
STM_AZURE_RTOS_ThreadX_Integration.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004fb0  080000c0  080000c0  000010c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  08005070  08005070  00006070  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800517c  0800517c  0000706c  2**0
                  CONTENTS
  4 .ARM          00000000  0800517c  0800517c  0000706c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800517c  0800517c  0000706c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800517c  0800517c  0000617c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005180  08005180  00006180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08005184  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001564  2000006c  080051f0  0000706c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200015d0  080051f0  000075d0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000706c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018bb8  00000000  00000000  00007094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004815  00000000  00000000  0001fc4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010d0  00000000  00000000  00024468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c47  00000000  00000000  00025538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000187b5  00000000  00000000  0002617f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c104  00000000  00000000  0003e934  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088826  00000000  00000000  0005aa38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e325e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039b4  00000000  00000000  000e32a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000ee  00000000  00000000  000e6c58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000006c 	.word	0x2000006c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005058 	.word	0x08005058

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000070 	.word	0x20000070
 8000104:	08005058 	.word	0x08005058
	...

08000110 <_tx_initialize_low_level>:
    .thumb_func
_tx_initialize_low_level:
@
@    /* Disable interrupts during ThreadX initialization.  */
@
    CPSID   i
 8000110:	b672      	cpsid	i
@    ORRS    r1, r1, r2                              @ Set the CYCCNTENA bit
@    STR     r1, [r0]                                @ Enable the cycle count register
@
@    /* Setup Vector Table Offset Register.  */
@
    LDR     r0, =0xE000E000                         @ Build address of NVIC registers
 8000112:	4816      	ldr	r0, [pc, #88]	@ (800016c <__tx_DBGHandler+0x4>)
    LDR     r2, =0xD08                              @ Offset to vector base register
 8000114:	4a16      	ldr	r2, [pc, #88]	@ (8000170 <__tx_DBGHandler+0x8>)
    ADD     r0, r0, r2                              @ Build vector base register
 8000116:	4410      	add	r0, r2
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 8000118:	4916      	ldr	r1, [pc, #88]	@ (8000174 <__tx_DBGHandler+0xc>)
    STR     r1, [r0]                                @ Set vector table address
 800011a:	6001      	str	r1, [r0, #0]
@
@    /* Set system stack pointer from vector value.  */
@
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 800011c:	4816      	ldr	r0, [pc, #88]	@ (8000178 <__tx_DBGHandler+0x10>)
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 800011e:	4915      	ldr	r1, [pc, #84]	@ (8000174 <__tx_DBGHandler+0xc>)
    LDR     r1, [r1]                                @ Pickup reset stack pointer
 8000120:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                @ Save system stack pointer
 8000122:	6001      	str	r1, [r0, #0]
@
@    /* Configure SysTick for 100Hz clock, or 16384 cycles if no reference.  */
@
    LDR     r0, =0xE000E000                         @ Build address of NVIC registers
 8000124:	4811      	ldr	r0, [pc, #68]	@ (800016c <__tx_DBGHandler+0x4>)
    LDR     r1, =SYSTICK_CYCLES
 8000126:	4915      	ldr	r1, [pc, #84]	@ (800017c <__tx_DBGHandler+0x14>)
    STR     r1, [r0, #0x14]                         // Setup SysTick Reload Value
 8000128:	6141      	str	r1, [r0, #20]
    LDR     r1, =0x7                                // Build SysTick Control Enable Value
 800012a:	4915      	ldr	r1, [pc, #84]	@ (8000180 <__tx_DBGHandler+0x18>)
    STR     r1, [r0, #0x10]                         // Setup SysTick Control
 800012c:	6101      	str	r1, [r0, #16]

    /* Configure handler priorities.  */

    LDR     r1, =0x00000000                         // Rsrv, UsgF, BusF, MemM
 800012e:	4915      	ldr	r1, [pc, #84]	@ (8000184 <__tx_DBGHandler+0x1c>)
    LDR     r0, =0xE000E000                         // Build address of NVIC registers
 8000130:	480e      	ldr	r0, [pc, #56]	@ (800016c <__tx_DBGHandler+0x4>)
    LDR     r2, =0xD18                              //
 8000132:	4a15      	ldr	r2, [pc, #84]	@ (8000188 <__tx_DBGHandler+0x20>)
    ADD     r0, r0, r2                              //
 8000134:	4410      	add	r0, r2
    STR     r1, [r0]                                // Setup System Handlers 4-7 Priority Registers
 8000136:	6001      	str	r1, [r0, #0]
    LDR     r1, =0xFF000000                         // SVCl, Rsrv, Rsrv, Rsrv
 8000138:	4914      	ldr	r1, [pc, #80]	@ (800018c <__tx_DBGHandler+0x24>)
    LDR     r0, =0xE000E000                         // Build address of NVIC registers
 800013a:	480c      	ldr	r0, [pc, #48]	@ (800016c <__tx_DBGHandler+0x4>)
    LDR     r2, =0xD1C                              //
 800013c:	4a14      	ldr	r2, [pc, #80]	@ (8000190 <__tx_DBGHandler+0x28>)
    ADD     r0, r0, r2                              //
 800013e:	4410      	add	r0, r2
    STR     r1, [r0]                                // Setup System Handlers 8-11 Priority Registers
 8000140:	6001      	str	r1, [r0, #0]
                                                    // Note: SVC must be lowest priority, which is 0xFF
    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 8000142:	4914      	ldr	r1, [pc, #80]	@ (8000194 <__tx_DBGHandler+0x2c>)
    LDR     r0, =0xE000E000                         // Build address of NVIC registers
 8000144:	4809      	ldr	r0, [pc, #36]	@ (800016c <__tx_DBGHandler+0x4>)
    LDR     r2, =0xD20                              //
 8000146:	4a14      	ldr	r2, [pc, #80]	@ (8000198 <__tx_DBGHandler+0x30>)
    ADD     r0, r0, r2                              //
 8000148:	4410      	add	r0, r2
    STR     r1, [r0]                                // Setup System Handlers 12-15 Priority Registers
 800014a:	6001      	str	r1, [r0, #0]
                                                    // Note: PnSV must be lowest priority, which is 0xFF

    /* Return to caller.  */
    BX      lr
 800014c:	4770      	bx	lr

0800014e <__tx_BadHandler>:

/* Define shells for each of the unused vectors.  */
    .global  __tx_BadHandler
    .thumb_func
__tx_BadHandler:
    B       __tx_BadHandler
 800014e:	e7fe      	b.n	800014e <__tx_BadHandler>

08000150 <__tx_HardfaultHandler>:

/* added to catch the hardfault */
    .global  __tx_HardfaultHandler
    .thumb_func
__tx_HardfaultHandler:
    B       __tx_HardfaultHandler
 8000150:	e7fe      	b.n	8000150 <__tx_HardfaultHandler>

08000152 <__tx_IntHandler>:
    .global  __tx_IntHandler
    .thumb_func
__tx_IntHandler:
// VOID InterruptHandler (VOID)
// {
    PUSH    {r0, lr}
 8000152:	b501      	push	{r0, lr}
    /* Do interrupt handler work here */
    /* BL <your C Function>.... */
#ifdef TX_ENABLE_EXECUTION_CHANGE_NOTIFY
    BL      _tx_execution_isr_exit              // Call the ISR exit function
#endif
    POP     {r0, r1}
 8000154:	bc03      	pop	{r0, r1}
    MOV     lr, r1
 8000156:	468e      	mov	lr, r1
    BX      lr
 8000158:	4770      	bx	lr

0800015a <SysTick_Handler>:
__tx_SysTickHandler:
    .thumb_func
SysTick_Handler:
// VOID SysTick_Handler (VOID)
// {
    PUSH    {r0, lr}
 800015a:	b501      	push	{r0, lr}
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_enter             // Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 800015c:	f000 f8a8 	bl	80002b0 <_tx_timer_interrupt>
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_exit              // Call the ISR exit function
#endif
    POP     {r0, r1}
 8000160:	bc03      	pop	{r0, r1}
    MOV     lr, r1
 8000162:	468e      	mov	lr, r1
    BX      lr
 8000164:	4770      	bx	lr

08000166 <__tx_NMIHandler>:

/* NMI, DBG handlers */
    .global  __tx_NMIHandler
    .thumb_func
__tx_NMIHandler:
    B       __tx_NMIHandler
 8000166:	e7fe      	b.n	8000166 <__tx_NMIHandler>

08000168 <__tx_DBGHandler>:

    .global  __tx_DBGHandler
    .thumb_func
__tx_DBGHandler:
    B       __tx_DBGHandler
 8000168:	e7fe      	b.n	8000168 <__tx_DBGHandler>
 800016a:	0000      	.short	0x0000
    LDR     r0, =0xE000E000                         @ Build address of NVIC registers
 800016c:	e000e000 	.word	0xe000e000
    LDR     r2, =0xD08                              @ Offset to vector base register
 8000170:	00000d08 	.word	0x00000d08
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 8000174:	08000000 	.word	0x08000000
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 8000178:	20000e78 	.word	0x20000e78
    LDR     r1, =SYSTICK_CYCLES
 800017c:	0001d4bf 	.word	0x0001d4bf
    LDR     r1, =0x7                                // Build SysTick Control Enable Value
 8000180:	00000007 	.word	0x00000007
    LDR     r1, =0x00000000                         // Rsrv, UsgF, BusF, MemM
 8000184:	00000000 	.word	0x00000000
    LDR     r2, =0xD18                              //
 8000188:	00000d18 	.word	0x00000d18
    LDR     r1, =0xFF000000                         // SVCl, Rsrv, Rsrv, Rsrv
 800018c:	ff000000 	.word	0xff000000
    LDR     r2, =0xD1C                              //
 8000190:	00000d1c 	.word	0x00000d1c
    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 8000194:	40ff0000 	.word	0x40ff0000
    LDR     r2, =0xD20                              //
 8000198:	00000d20 	.word	0x00000d20
 800019c:	00000000 	.word	0x00000000

080001a0 <_tx_thread_schedule>:
@       from the first schedule request. Subsequent scheduling occurs
@       from the PendSV handling routines below. */
@
@    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */
@
    MOVS    r0, #0                                  @ Build value for TX_FALSE
 80001a0:	2000      	movs	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         @ Build address of preempt disable flag
 80001a2:	4a26      	ldr	r2, [pc, #152]	@ (800023c <__tx_ts_ready+0xc>)
    STR     r0, [r2, #0]                            @ Clear preempt disable flag
 80001a4:	6010      	str	r0, [r2, #0]
@
@    /* Enable interrupts */
@
    CPSIE   i
 80001a6:	b662      	cpsie	i
@
@    /* Enter the scheduler for the first time.  */
@
    LDR     r0, =#0x10000000                        @ Load PENDSVSET bit
 80001a8:	4825      	ldr	r0, [pc, #148]	@ (8000240 <__tx_ts_ready+0x10>)
    LDR     r1, =#0xE000ED04                        @ Load NVIC base
 80001aa:	4926      	ldr	r1, [pc, #152]	@ (8000244 <__tx_ts_ready+0x14>)
    STR     r0, [r1]                                @ Set PENDSVBIT in ICSR
 80001ac:	6008      	str	r0, [r1, #0]
    DSB                                             @ Complete all memory accesses
 80001ae:	f3bf 8f4f 	dsb	sy
    ISB                                             @ Flush pipeline
 80001b2:	f3bf 8f6f 	isb	sy

080001b6 <__tx_wait_here>:
@
@    /* Wait here for the PendSV to take place.  */
@
__tx_wait_here:
    B       __tx_wait_here                          @ Wait for the PendSV to happen
 80001b6:	e7fe      	b.n	80001b6 <__tx_wait_here>

080001b8 <PendSV_Handler>:
    BL  _tx_execution_thread_exit                   @ Call the thread exit function
    POP     {r0, r1}                                @ Recover LR
    MOV     lr, r1                                  @
    CPSIE   i                                       @ Enable interrupts
#endif
    LDR     r0, =_tx_thread_current_ptr             @ Build current thread pointer address
 80001b8:	4823      	ldr	r0, [pc, #140]	@ (8000248 <__tx_ts_ready+0x18>)
    LDR     r2, =_tx_thread_execute_ptr             @ Build execute thread pointer address
 80001ba:	4a24      	ldr	r2, [pc, #144]	@ (800024c <__tx_ts_ready+0x1c>)
    MOVS    r3, #0                                  @ Build NULL value
 80001bc:	2300      	movs	r3, #0
    LDR     r1, [r0]                                @ Pickup current thread pointer
 80001be:	6801      	ldr	r1, [r0, #0]
@
@    /* Determine if there is a current thread to finish preserving.  */
@
    CMP     r1,#0                                   @ If NULL, skip preservation
 80001c0:	2900      	cmp	r1, #0
    BEQ     __tx_ts_new                             @
 80001c2:	d015      	beq.n	80001f0 <__tx_ts_new>
@
@    /* Recover PSP and preserve current thread context.  */
@
    STR     r3, [r0]                                @ Set _tx_thread_current_ptr to NULL
 80001c4:	6003      	str	r3, [r0, #0]
    MRS     r3, PSP                                 @ Pickup PSP pointer (thread's stack pointer)
 80001c6:	f3ef 8309 	mrs	r3, PSP
    SUBS    r3, r3, #16                             @ Allocate stack space
 80001ca:	3b10      	subs	r3, #16
    STM     r3!, {r4-r7}                            @ Save its remaining registers (M3 Instruction: STMDB r12!, {r4-r11})
 80001cc:	c3f0      	stmia	r3!, {r4, r5, r6, r7}
    MOV     r4,r8                                   @
 80001ce:	4644      	mov	r4, r8
    MOV     r5,r9                                   @
 80001d0:	464d      	mov	r5, r9
    MOV     r6,r10                                  @
 80001d2:	4656      	mov	r6, sl
    MOV     r7,r11                                  @
 80001d4:	465f      	mov	r7, fp
    SUBS    r3, r3, #32                             @ Allocate stack space
 80001d6:	3b20      	subs	r3, #32
    STM     r3!,{r4-r7}                             @
 80001d8:	c3f0      	stmia	r3!, {r4, r5, r6, r7}
    SUBS    r3, r3, #20                             @ Allocate stack space
 80001da:	3b14      	subs	r3, #20
    MOV     r5, lr                                  @ Move LR into R4
 80001dc:	4675      	mov	r5, lr
    STR     r5, [r3]                                @ Save LR
 80001de:	601d      	str	r5, [r3, #0]
    STR     r3, [r1, #8]                            @ Save its stack pointer
 80001e0:	608b      	str	r3, [r1, #8]
@
@    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */
@
    LDR     r4, =_tx_timer_time_slice               @ Build address of time-slice variable
 80001e2:	4c1b      	ldr	r4, [pc, #108]	@ (8000250 <__tx_ts_ready+0x20>)
    LDR     r5, [r4]                                @ Pickup current time-slice
 80001e4:	6825      	ldr	r5, [r4, #0]
    CMP     r5, #0                                  @ If not active, skip processing
 80001e6:	2d00      	cmp	r5, #0
    BEQ     __tx_ts_new                             @
 80001e8:	d002      	beq.n	80001f0 <__tx_ts_new>
@
@    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */
@
    STR     r5, [r1, #24]                           @ Save current time-slice
 80001ea:	618d      	str	r5, [r1, #24]
@
@    /* Clear the global time-slice.  */
@
    MOVS    r5, #0                                  @ Build clear value
 80001ec:	2500      	movs	r5, #0
    STR     r5, [r4]                                @ Clear time-slice
 80001ee:	6025      	str	r5, [r4, #0]

080001f0 <__tx_ts_new>:
@
__tx_ts_new:
@
@    /* Now we are looking for a new thread to execute!  */
@
    CPSID   i                                       @ Disable interrupts
 80001f0:	b672      	cpsid	i
    LDR     r1, [r2]                                @ Is there another thread ready to execute?
 80001f2:	6811      	ldr	r1, [r2, #0]
    CMP     r1, #0                                  @
 80001f4:	2900      	cmp	r1, #0
    BEQ     __tx_ts_wait                            @ No, skip to the wait processing
 80001f6:	d014      	beq.n	8000222 <__tx_ts_wait>
@
@    /* Yes, another thread is ready for else, make the current thread the new thread.  */
@
    STR     r1, [r0]                                @ Setup the current thread pointer to the new thread
 80001f8:	6001      	str	r1, [r0, #0]
    CPSIE   i                                       @ Enable interrupts
 80001fa:	b662      	cpsie	i

080001fc <__tx_ts_restore>:
@
@    /* Increment the thread run count.  */
@
__tx_ts_restore:
    LDR     r7, [r1, #4]                            @ Pickup the current thread run count
 80001fc:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               @ Build address of time-slice variable
 80001fe:	4c14      	ldr	r4, [pc, #80]	@ (8000250 <__tx_ts_ready+0x20>)
    LDR     r5, [r1, #24]                           @ Pickup thread's current time-slice
 8000200:	698d      	ldr	r5, [r1, #24]
    ADDS    r7, r7, #1                              @ Increment the thread run count
 8000202:	3701      	adds	r7, #1
    STR     r7, [r1, #4]                            @ Store the new run count
 8000204:	604f      	str	r7, [r1, #4]
@
@    /* Setup global time-slice with thread's current time-slice.  */
@
    STR     r5, [r4]                                @ Setup global time-slice
 8000206:	6025      	str	r5, [r4, #0]
    POP     {r0, r1}                                @ Recover r3
#endif
@
@    /* Restore the thread context and PSP.  */
@
    LDR     r3, [r1, #8]                            @ Pickup thread's stack pointer
 8000208:	688b      	ldr	r3, [r1, #8]
    LDR     r5, [r3]                                @ Recover saved LR
 800020a:	681d      	ldr	r5, [r3, #0]
    ADDS    r3, r3, #4                              @ Position past LR
 800020c:	3304      	adds	r3, #4
    MOV     lr, r5                                  @ Restore LR
 800020e:	46ae      	mov	lr, r5
    LDM     r3!,{r4-r7}                             @ Recover thread's registers (r4-r11)
 8000210:	cbf0      	ldmia	r3!, {r4, r5, r6, r7}
    MOV     r11,r7                                  @
 8000212:	46bb      	mov	fp, r7
    MOV     r10,r6                                  @
 8000214:	46b2      	mov	sl, r6
    MOV     r9,r5                                   @
 8000216:	46a9      	mov	r9, r5
    MOV     r8,r4                                   @
 8000218:	46a0      	mov	r8, r4
    LDM     r3!,{r4-r7}                             @
 800021a:	cbf0      	ldmia	r3!, {r4, r5, r6, r7}
    MSR     PSP, r3                                 @ Setup the thread's stack pointer
 800021c:	f383 8809 	msr	PSP, r3
@
@    /* Return to thread.  */
@
    BX      lr                                      @ Return to thread!
 8000220:	4770      	bx	lr

08000222 <__tx_ts_wait>:
@    /* The following is the idle wait processing... in this case, no threads are ready for execution and the
@       system will simply be idle until an interrupt occurs that makes a thread ready. Note that interrupts
@       are disabled to allow use of WFI for waiting for a thread to arrive.  */
@
__tx_ts_wait:
    CPSID   i                                       @ Disable interrupts
 8000222:	b672      	cpsid	i
    LDR     r1, [r2]                                @ Pickup the next thread to execute pointer
 8000224:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                @ Store it in the current pointer
 8000226:	6001      	str	r1, [r0, #0]
    CMP     r1, #0                                  @ If non-NULL, a new thread is ready!
 8000228:	2900      	cmp	r1, #0
    BNE     __tx_ts_ready                           @
 800022a:	d101      	bne.n	8000230 <__tx_ts_ready>
    PUSH    {r0-r3}
    BL      tx_low_power_exit                       @ Exit low power mode
    POP     {r0-r3}
#endif

    CPSIE   i                                       @ Enable interrupts
 800022c:	b662      	cpsie	i
    B       __tx_ts_wait                            @ Loop to continue waiting
 800022e:	e7f8      	b.n	8000222 <__tx_ts_wait>

08000230 <__tx_ts_ready>:
@
@    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
@       already in the handler!  */
@
__tx_ts_ready:
    LDR     r7, =0x08000000                         @ Build clear PendSV value
 8000230:	4f08      	ldr	r7, [pc, #32]	@ (8000254 <__tx_ts_ready+0x24>)
    LDR     r5, =0xE000ED04                         @ Build base NVIC address
 8000232:	4d04      	ldr	r5, [pc, #16]	@ (8000244 <__tx_ts_ready+0x14>)
    STR     r7, [r5]                                @ Clear any PendSV
 8000234:	602f      	str	r7, [r5, #0]
@
@    /* Re-enable interrupts and restore new thread.  */
@
    CPSIE   i                                       @ Enable interrupts
 8000236:	b662      	cpsie	i
    B       __tx_ts_restore                         @ Restore the thread
 8000238:	e7e0      	b.n	80001fc <__tx_ts_restore>
 800023a:	0000      	.short	0x0000
    LDR     r2, =_tx_thread_preempt_disable         @ Build address of preempt disable flag
 800023c:	20000f14 	.word	0x20000f14
    LDR     r0, =#0x10000000                        @ Load PENDSVSET bit
 8000240:	10000000 	.word	0x10000000
    LDR     r1, =#0xE000ED04                        @ Load NVIC base
 8000244:	e000ed04 	.word	0xe000ed04
    LDR     r0, =_tx_thread_current_ptr             @ Build current thread pointer address
 8000248:	20000e7c 	.word	0x20000e7c
    LDR     r2, =_tx_thread_execute_ptr             @ Build execute thread pointer address
 800024c:	20000e80 	.word	0x20000e80
    LDR     r4, =_tx_timer_time_slice               @ Build address of time-slice variable
 8000250:	20001480 	.word	0x20001480
    LDR     r7, =0x08000000                         @ Build clear PendSV value
 8000254:	08000000 	.word	0x08000000
	...

08000260 <_tx_thread_stack_build>:
@                       pc          Initial value for pc
@                       xPSR        Initial value for xPSR
@
@    Stack Bottom: (higher memory address)  */
@
    LDR     r2, [r0, #16]                           @ Pickup end of stack area
 8000260:	6902      	ldr	r2, [r0, #16]
    MOVS    r3, #0x7                                @
 8000262:	2307      	movs	r3, #7
    BICS    r2, r2, r3                              @ Align frame for 8-byte alignment
 8000264:	439a      	bics	r2, r3
    SUBS    r2, r2, #68                             @ Subtract frame size
 8000266:	3a44      	subs	r2, #68	@ 0x44
    LDR     r3, =0xFFFFFFFD                         @ Build initial LR value
 8000268:	4b0b      	ldr	r3, [pc, #44]	@ (8000298 <_tx_thread_stack_build+0x38>)
    STR     r3, [r2, #0]                            @ Save on the stack
 800026a:	6013      	str	r3, [r2, #0]
@
@    /* Actually build the stack frame.  */
@
    MOVS    r3, #0                                  @ Build initial register value
 800026c:	2300      	movs	r3, #0
    STR     r3, [r2, #4]                            @ Store initial r8
 800026e:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            @ Store initial r9
 8000270:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           @ Store initial r10
 8000272:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           @ Store initial r11
 8000274:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           @ Store initial r4
 8000276:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           @ Store initial r5
 8000278:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           @ Store initial r6
 800027a:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           @ Store initial r7
 800027c:	6213      	str	r3, [r2, #32]
@
@    /* Hardware stack follows.  */
@
    STR     r3, [r2, #36]                           @ Store initial r0
 800027e:	6253      	str	r3, [r2, #36]	@ 0x24
    STR     r3, [r2, #40]                           @ Store initial r1
 8000280:	6293      	str	r3, [r2, #40]	@ 0x28
    STR     r3, [r2, #44]                           @ Store initial r2
 8000282:	62d3      	str	r3, [r2, #44]	@ 0x2c
    STR     r3, [r2, #48]                           @ Store initial r3
 8000284:	6313      	str	r3, [r2, #48]	@ 0x30
    STR     r3, [r2, #52]                           @ Store initial r12
 8000286:	6353      	str	r3, [r2, #52]	@ 0x34
    LDR     r3, =0xFFFFFFFF                         @ Poison EXC_RETURN value
 8000288:	4b04      	ldr	r3, [pc, #16]	@ (800029c <_tx_thread_stack_build+0x3c>)
    STR     r3, [r2, #56]                           @ Store initial lr
 800028a:	6393      	str	r3, [r2, #56]	@ 0x38
    STR     r1, [r2, #60]                           @ Store initial pc
 800028c:	63d1      	str	r1, [r2, #60]	@ 0x3c
    LDR     r3, =0x01000000                         @ Only T-bit need be set
 800028e:	4b04      	ldr	r3, [pc, #16]	@ (80002a0 <_tx_thread_stack_build+0x40>)
    STR     r3, [r2, #64]                           @ Store initial xPSR
 8000290:	6413      	str	r3, [r2, #64]	@ 0x40
@
@    /* Setup stack pointer.  */
@    thread_ptr -> tx_thread_stack_ptr =  r2;
@
    STR     r2, [r0, #8]                            @ Save stack pointer in thread's
 8000292:	6082      	str	r2, [r0, #8]
                                                    @   control block
    BX      lr                                      @ Return to caller
 8000294:	4770      	bx	lr
 8000296:	0000      	.short	0x0000
    LDR     r3, =0xFFFFFFFD                         @ Build initial LR value
 8000298:	fffffffd 	.word	0xfffffffd
    LDR     r3, =0xFFFFFFFF                         @ Poison EXC_RETURN value
 800029c:	ffffffff 	.word	0xffffffff
    LDR     r3, =0x01000000                         @ Only T-bit need be set
 80002a0:	01000000 	.word	0x01000000
	...

080002b0 <_tx_timer_interrupt>:
@       for use.  */
@
@    /* Increment the system clock.  */
@    _tx_timer_system_clock++;
@
    LDR     r1, =_tx_timer_system_clock             @ Pickup address of system clock
 80002b0:	4923      	ldr	r1, [pc, #140]	@ (8000340 <__tx_timer_nothing_expired+0x8>)
    LDR     r0, [r1, #0]                            @ Pickup system clock
 80002b2:	6808      	ldr	r0, [r1, #0]
    ADDS    r0, r0, #1                              @ Increment system clock
 80002b4:	3001      	adds	r0, #1
    STR     r0, [r1, #0]                            @ Store new system clock
 80002b6:	6008      	str	r0, [r1, #0]
@
@    /* Test for time-slice expiration.  */
@    if (_tx_timer_time_slice)
@    {
@
    LDR     r3, =_tx_timer_time_slice               @ Pickup address of time-slice
 80002b8:	4b22      	ldr	r3, [pc, #136]	@ (8000344 <__tx_timer_nothing_expired+0xc>)
    LDR     r2, [r3, #0]                            @ Pickup time-slice
 80002ba:	681a      	ldr	r2, [r3, #0]
    CMP     r2, #0                                  @ Is it non-active?
 80002bc:	2a00      	cmp	r2, #0
    BEQ     __tx_timer_no_time_slice                @ Yes, skip time-slice processing
 80002be:	d006      	beq.n	80002ce <__tx_timer_no_time_slice>
@
@       /* Decrement the time_slice.  */
@       _tx_timer_time_slice--;
@
    SUBS    r2, r2, #1                              @ Decrement the time-slice
 80002c0:	3a01      	subs	r2, #1
    STR     r2, [r3, #0]                            @ Store new time-slice value
 80002c2:	601a      	str	r2, [r3, #0]
@
@       /* Check for expiration.  */
@       if (__tx_timer_time_slice == 0)
@
    CMP     r2, #0                                  @ Has it expired?
 80002c4:	2a00      	cmp	r2, #0
    BNE     __tx_timer_no_time_slice                @ No, skip expiration processing
 80002c6:	d102      	bne.n	80002ce <__tx_timer_no_time_slice>
@
@       /* Set the time-slice expired flag.  */
@       _tx_timer_expired_time_slice =  TX_TRUE;
@
    LDR     r3, =_tx_timer_expired_time_slice       @ Pickup address of expired flag
 80002c8:	4b1f      	ldr	r3, [pc, #124]	@ (8000348 <__tx_timer_nothing_expired+0x10>)
    MOVS    r0, #1                                  @ Build expired value
 80002ca:	2001      	movs	r0, #1
    STR     r0, [r3, #0]                            @ Set time-slice expiration flag
 80002cc:	6018      	str	r0, [r3, #0]

080002ce <__tx_timer_no_time_slice>:
@
@    /* Test for timer expiration.  */
@    if (*_tx_timer_current_ptr)
@    {
@
    LDR     r1, =_tx_timer_current_ptr              @ Pickup current timer pointer address
 80002ce:	491f      	ldr	r1, [pc, #124]	@ (800034c <__tx_timer_nothing_expired+0x14>)
    LDR     r0, [r1, #0]                            @ Pickup current timer
 80002d0:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            @ Pickup timer list entry
 80002d2:	6802      	ldr	r2, [r0, #0]
    CMP     r2, #0                                  @ Is there anything in the list?
 80002d4:	2a00      	cmp	r2, #0
    BEQ     __tx_timer_no_timer                     @ No, just increment the timer
 80002d6:	d003      	beq.n	80002e0 <__tx_timer_no_timer>
@
@        /* Set expiration flag.  */
@        _tx_timer_expired =  TX_TRUE;
@
    LDR     r3, =_tx_timer_expired                  @ Pickup expiration flag address
 80002d8:	4b1d      	ldr	r3, [pc, #116]	@ (8000350 <__tx_timer_nothing_expired+0x18>)
    MOVS    r2, #1                                  @ Build expired value
 80002da:	2201      	movs	r2, #1
    STR     r2, [r3, #0]                            @ Set expired flag
 80002dc:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         @ Finished timer processing
 80002de:	e007      	b.n	80002f0 <__tx_timer_done>

080002e0 <__tx_timer_no_timer>:
__tx_timer_no_timer:
@
@        /* No timer expired, increment the timer pointer.  */
@        _tx_timer_current_ptr++;
@
    ADDS    r0, r0, #4                              @ Move to next timer
 80002e0:	3004      	adds	r0, #4
@
@        /* Check for wrap-around.  */
@        if (_tx_timer_current_ptr == _tx_timer_list_end)
@
    LDR     r3, =_tx_timer_list_end                 @ Pickup addr of timer list end
 80002e2:	4b1c      	ldr	r3, [pc, #112]	@ (8000354 <__tx_timer_nothing_expired+0x1c>)
    LDR     r2, [r3, #0]                            @ Pickup list end
 80002e4:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  @ Are we at list end?
 80002e6:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    @ No, skip wrap-around logic
 80002e8:	d101      	bne.n	80002ee <__tx_timer_skip_wrap>
@
@            /* Wrap to beginning of list.  */
@            _tx_timer_current_ptr =  _tx_timer_list_start;
@
    LDR     r3, =_tx_timer_list_start               @ Pickup addr of timer list start
 80002ea:	4b1b      	ldr	r3, [pc, #108]	@ (8000358 <__tx_timer_nothing_expired+0x20>)
    LDR     r0, [r3, #0]                            @ Set current pointer to list start
 80002ec:	6818      	ldr	r0, [r3, #0]

080002ee <__tx_timer_skip_wrap>:
@
__tx_timer_skip_wrap:
@
    STR     r0, [r1, #0]                            @ Store new current timer pointer
 80002ee:	6008      	str	r0, [r1, #0]

080002f0 <__tx_timer_done>:
@
@    /* See if anything has expired.  */
@    if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
@    {
@
    LDR     r3, =_tx_timer_expired_time_slice       @ Pickup addr of expired flag
 80002f0:	4b15      	ldr	r3, [pc, #84]	@ (8000348 <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            @ Pickup time-slice expired flag
 80002f2:	681a      	ldr	r2, [r3, #0]
    CMP     r2, #0                                  @ Did a time-slice expire?
 80002f4:	2a00      	cmp	r2, #0
    BNE     __tx_something_expired                  @ If non-zero, time-slice expired
 80002f6:	d103      	bne.n	8000300 <__tx_something_expired>
    LDR     r1, =_tx_timer_expired                  @ Pickup addr of other expired flag
 80002f8:	4915      	ldr	r1, [pc, #84]	@ (8000350 <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            @ Pickup timer expired flag
 80002fa:	6808      	ldr	r0, [r1, #0]
    CMP     r0, #0                                  @ Did a timer expire?
 80002fc:	2800      	cmp	r0, #0
    BEQ     __tx_timer_nothing_expired              @ No, nothing expired
 80002fe:	d01b      	beq.n	8000338 <__tx_timer_nothing_expired>

08000300 <__tx_something_expired>:
@
__tx_something_expired:
@
@
    PUSH    {r0, lr}                                @ Save the lr register on the stack
 8000300:	b501      	push	{r0, lr}
@
@    /* Did a timer expire?  */
@    if (_tx_timer_expired)
@    {
@
    LDR     r1, =_tx_timer_expired                  @ Pickup addr of expired flag
 8000302:	4913      	ldr	r1, [pc, #76]	@ (8000350 <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            @ Pickup timer expired flag
 8000304:	6808      	ldr	r0, [r1, #0]
    CMP     r0, #0                                  @ Check for timer expiration
 8000306:	2800      	cmp	r0, #0
    BEQ     __tx_timer_dont_activate                @ If not set, skip timer activation
 8000308:	d001      	beq.n	800030e <__tx_timer_dont_activate>
@
@        /* Process timer expiration.  */
@        _tx_timer_expiration_process()@
@
    BL      _tx_timer_expiration_process            @ Call the timer expiration handling routine
 800030a:	f003 fc9b 	bl	8003c44 <_tx_timer_expiration_process>

0800030e <__tx_timer_dont_activate>:
@
@    /* Did time slice expire?  */
@    if (_tx_timer_expired_time_slice)
@    {
@
    LDR     r3, =_tx_timer_expired_time_slice       @ Pickup addr of time-slice expired
 800030e:	4b0e      	ldr	r3, [pc, #56]	@ (8000348 <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            @ Pickup the actual flag
 8000310:	681a      	ldr	r2, [r3, #0]
    CMP     r2, #0                                  @ See if the flag is set
 8000312:	2a00      	cmp	r2, #0
    BEQ     __tx_timer_not_ts_expiration            @ No, skip time-slice processing
 8000314:	d00e      	beq.n	8000334 <__tx_timer_not_ts_expiration>
@
@        /* Time slice interrupted thread.  */
@        _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   @ Call time-slice processing
 8000316:	f003 fc0b 	bl	8003b30 <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         @ Build address of preempt disable flag
 800031a:	4810      	ldr	r0, [pc, #64]	@ (800035c <__tx_timer_nothing_expired+0x24>)
    LDR     r1, [r0]                                @ Is the preempt disable flag set?
 800031c:	6801      	ldr	r1, [r0, #0]
    CMP     r1, #0                                  @
 800031e:	2900      	cmp	r1, #0
    BNE     __tx_timer_skip_time_slice              @ Yes, skip the PendSV logic
 8000320:	d108      	bne.n	8000334 <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             @ Build current thread pointer address
 8000322:	480f      	ldr	r0, [pc, #60]	@ (8000360 <__tx_timer_nothing_expired+0x28>)
    LDR     r1, [r0]                                @ Pickup the current thread pointer
 8000324:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             @ Build execute thread pointer address
 8000326:	4a0f      	ldr	r2, [pc, #60]	@ (8000364 <__tx_timer_nothing_expired+0x2c>)
    LDR     r3, [r2]                                @ Pickup the execute thread pointer
 8000328:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         @ Build address of control register
 800032a:	480f      	ldr	r0, [pc, #60]	@ (8000368 <__tx_timer_nothing_expired+0x30>)
    LDR     r2, =0x10000000                         @ Build value for PendSV bit
 800032c:	4a0f      	ldr	r2, [pc, #60]	@ (800036c <__tx_timer_nothing_expired+0x34>)
    CMP     r1, r3                                  @ Are they the same?
 800032e:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              @ If the same, there was no time-slice performed
 8000330:	d000      	beq.n	8000334 <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                @ Not the same, issue the PendSV for preemption
 8000332:	6002      	str	r2, [r0, #0]

08000334 <__tx_timer_not_ts_expiration>:
@
@    }
@
__tx_timer_not_ts_expiration:
@
    POP   {r0, r1}                                  @ Recover lr register (r0 is just there for
 8000334:	bc03      	pop	{r0, r1}
    MOV   lr, r1                                    @   the 8-byte stack alignment
 8000336:	468e      	mov	lr, r1

08000338 <__tx_timer_nothing_expired>:
@
@    }
@
__tx_timer_nothing_expired:

    DSB                                             @ Complete all memory access
 8000338:	f3bf 8f4f 	dsb	sy
    BX      lr                                      @ Return to caller
 800033c:	4770      	bx	lr
 800033e:	0000      	.short	0x0000
    LDR     r1, =_tx_timer_system_clock             @ Pickup address of system clock
 8000340:	20000f20 	.word	0x20000f20
    LDR     r3, =_tx_timer_time_slice               @ Pickup address of time-slice
 8000344:	20001480 	.word	0x20001480
    LDR     r3, =_tx_timer_expired_time_slice       @ Pickup address of expired flag
 8000348:	20000f24 	.word	0x20000f24
    LDR     r1, =_tx_timer_current_ptr              @ Pickup current timer pointer address
 800034c:	20000fb0 	.word	0x20000fb0
    LDR     r3, =_tx_timer_expired                  @ Pickup expiration flag address
 8000350:	20000fb4 	.word	0x20000fb4
    LDR     r3, =_tx_timer_list_end                 @ Pickup addr of timer list end
 8000354:	20000fac 	.word	0x20000fac
    LDR     r3, =_tx_timer_list_start               @ Pickup addr of timer list start
 8000358:	20000fa8 	.word	0x20000fa8
    LDR     r0, =_tx_thread_preempt_disable         @ Build address of preempt disable flag
 800035c:	20000f14 	.word	0x20000f14
    LDR     r0, =_tx_thread_current_ptr             @ Build current thread pointer address
 8000360:	20000e7c 	.word	0x20000e7c
    LDR     r2, =_tx_thread_execute_ptr             @ Build execute thread pointer address
 8000364:	20000e80 	.word	0x20000e80
    LDR     r0, =0xE000ED04                         @ Build address of control register
 8000368:	e000ed04 	.word	0xe000ed04
    LDR     r2, =0x10000000                         @ Build value for PendSV bit
 800036c:	10000000 	.word	0x10000000

08000370 <__udivsi3>:
 8000370:	2200      	movs	r2, #0
 8000372:	0843      	lsrs	r3, r0, #1
 8000374:	428b      	cmp	r3, r1
 8000376:	d374      	bcc.n	8000462 <__udivsi3+0xf2>
 8000378:	0903      	lsrs	r3, r0, #4
 800037a:	428b      	cmp	r3, r1
 800037c:	d35f      	bcc.n	800043e <__udivsi3+0xce>
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d344      	bcc.n	800040e <__udivsi3+0x9e>
 8000384:	0b03      	lsrs	r3, r0, #12
 8000386:	428b      	cmp	r3, r1
 8000388:	d328      	bcc.n	80003dc <__udivsi3+0x6c>
 800038a:	0c03      	lsrs	r3, r0, #16
 800038c:	428b      	cmp	r3, r1
 800038e:	d30d      	bcc.n	80003ac <__udivsi3+0x3c>
 8000390:	22ff      	movs	r2, #255	@ 0xff
 8000392:	0209      	lsls	r1, r1, #8
 8000394:	ba12      	rev	r2, r2
 8000396:	0c03      	lsrs	r3, r0, #16
 8000398:	428b      	cmp	r3, r1
 800039a:	d302      	bcc.n	80003a2 <__udivsi3+0x32>
 800039c:	1212      	asrs	r2, r2, #8
 800039e:	0209      	lsls	r1, r1, #8
 80003a0:	d065      	beq.n	800046e <__udivsi3+0xfe>
 80003a2:	0b03      	lsrs	r3, r0, #12
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d319      	bcc.n	80003dc <__udivsi3+0x6c>
 80003a8:	e000      	b.n	80003ac <__udivsi3+0x3c>
 80003aa:	0a09      	lsrs	r1, r1, #8
 80003ac:	0bc3      	lsrs	r3, r0, #15
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__udivsi3+0x46>
 80003b2:	03cb      	lsls	r3, r1, #15
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	0b83      	lsrs	r3, r0, #14
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d301      	bcc.n	80003c2 <__udivsi3+0x52>
 80003be:	038b      	lsls	r3, r1, #14
 80003c0:	1ac0      	subs	r0, r0, r3
 80003c2:	4152      	adcs	r2, r2
 80003c4:	0b43      	lsrs	r3, r0, #13
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__udivsi3+0x5e>
 80003ca:	034b      	lsls	r3, r1, #13
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	0b03      	lsrs	r3, r0, #12
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d301      	bcc.n	80003da <__udivsi3+0x6a>
 80003d6:	030b      	lsls	r3, r1, #12
 80003d8:	1ac0      	subs	r0, r0, r3
 80003da:	4152      	adcs	r2, r2
 80003dc:	0ac3      	lsrs	r3, r0, #11
 80003de:	428b      	cmp	r3, r1
 80003e0:	d301      	bcc.n	80003e6 <__udivsi3+0x76>
 80003e2:	02cb      	lsls	r3, r1, #11
 80003e4:	1ac0      	subs	r0, r0, r3
 80003e6:	4152      	adcs	r2, r2
 80003e8:	0a83      	lsrs	r3, r0, #10
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__udivsi3+0x82>
 80003ee:	028b      	lsls	r3, r1, #10
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	0a43      	lsrs	r3, r0, #9
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d301      	bcc.n	80003fe <__udivsi3+0x8e>
 80003fa:	024b      	lsls	r3, r1, #9
 80003fc:	1ac0      	subs	r0, r0, r3
 80003fe:	4152      	adcs	r2, r2
 8000400:	0a03      	lsrs	r3, r0, #8
 8000402:	428b      	cmp	r3, r1
 8000404:	d301      	bcc.n	800040a <__udivsi3+0x9a>
 8000406:	020b      	lsls	r3, r1, #8
 8000408:	1ac0      	subs	r0, r0, r3
 800040a:	4152      	adcs	r2, r2
 800040c:	d2cd      	bcs.n	80003aa <__udivsi3+0x3a>
 800040e:	09c3      	lsrs	r3, r0, #7
 8000410:	428b      	cmp	r3, r1
 8000412:	d301      	bcc.n	8000418 <__udivsi3+0xa8>
 8000414:	01cb      	lsls	r3, r1, #7
 8000416:	1ac0      	subs	r0, r0, r3
 8000418:	4152      	adcs	r2, r2
 800041a:	0983      	lsrs	r3, r0, #6
 800041c:	428b      	cmp	r3, r1
 800041e:	d301      	bcc.n	8000424 <__udivsi3+0xb4>
 8000420:	018b      	lsls	r3, r1, #6
 8000422:	1ac0      	subs	r0, r0, r3
 8000424:	4152      	adcs	r2, r2
 8000426:	0943      	lsrs	r3, r0, #5
 8000428:	428b      	cmp	r3, r1
 800042a:	d301      	bcc.n	8000430 <__udivsi3+0xc0>
 800042c:	014b      	lsls	r3, r1, #5
 800042e:	1ac0      	subs	r0, r0, r3
 8000430:	4152      	adcs	r2, r2
 8000432:	0903      	lsrs	r3, r0, #4
 8000434:	428b      	cmp	r3, r1
 8000436:	d301      	bcc.n	800043c <__udivsi3+0xcc>
 8000438:	010b      	lsls	r3, r1, #4
 800043a:	1ac0      	subs	r0, r0, r3
 800043c:	4152      	adcs	r2, r2
 800043e:	08c3      	lsrs	r3, r0, #3
 8000440:	428b      	cmp	r3, r1
 8000442:	d301      	bcc.n	8000448 <__udivsi3+0xd8>
 8000444:	00cb      	lsls	r3, r1, #3
 8000446:	1ac0      	subs	r0, r0, r3
 8000448:	4152      	adcs	r2, r2
 800044a:	0883      	lsrs	r3, r0, #2
 800044c:	428b      	cmp	r3, r1
 800044e:	d301      	bcc.n	8000454 <__udivsi3+0xe4>
 8000450:	008b      	lsls	r3, r1, #2
 8000452:	1ac0      	subs	r0, r0, r3
 8000454:	4152      	adcs	r2, r2
 8000456:	0843      	lsrs	r3, r0, #1
 8000458:	428b      	cmp	r3, r1
 800045a:	d301      	bcc.n	8000460 <__udivsi3+0xf0>
 800045c:	004b      	lsls	r3, r1, #1
 800045e:	1ac0      	subs	r0, r0, r3
 8000460:	4152      	adcs	r2, r2
 8000462:	1a41      	subs	r1, r0, r1
 8000464:	d200      	bcs.n	8000468 <__udivsi3+0xf8>
 8000466:	4601      	mov	r1, r0
 8000468:	4152      	adcs	r2, r2
 800046a:	4610      	mov	r0, r2
 800046c:	4770      	bx	lr
 800046e:	e7ff      	b.n	8000470 <__udivsi3+0x100>
 8000470:	b501      	push	{r0, lr}
 8000472:	2000      	movs	r0, #0
 8000474:	f000 f806 	bl	8000484 <__aeabi_idiv0>
 8000478:	bd02      	pop	{r1, pc}
 800047a:	46c0      	nop			@ (mov r8, r8)

0800047c <__aeabi_uidivmod>:
 800047c:	2900      	cmp	r1, #0
 800047e:	d0f7      	beq.n	8000470 <__udivsi3+0x100>
 8000480:	e776      	b.n	8000370 <__udivsi3>
 8000482:	4770      	bx	lr

08000484 <__aeabi_idiv0>:
 8000484:	4770      	bx	lr
 8000486:	46c0      	nop			@ (mov r8, r8)

08000488 <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 8000488:	b590      	push	{r4, r7, lr}
 800048a:	b087      	sub	sp, #28
 800048c:	af02      	add	r7, sp, #8
 800048e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN  tx_application_define_1*/

  /* USER CODE END  tx_application_define_1 */
#if (USE_STATIC_ALLOCATION == 1)
  UINT status = TX_SUCCESS;
 8000490:	2300      	movs	r3, #0
 8000492:	60fb      	str	r3, [r7, #12]
  VOID *memory_ptr;

  if (tx_byte_pool_create(&tx_app_byte_pool, "Tx App memory pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 8000494:	2380      	movs	r3, #128	@ 0x80
 8000496:	00db      	lsls	r3, r3, #3
 8000498:	4a0c      	ldr	r2, [pc, #48]	@ (80004cc <tx_application_define+0x44>)
 800049a:	490d      	ldr	r1, [pc, #52]	@ (80004d0 <tx_application_define+0x48>)
 800049c:	480d      	ldr	r0, [pc, #52]	@ (80004d4 <tx_application_define+0x4c>)
 800049e:	2434      	movs	r4, #52	@ 0x34
 80004a0:	9400      	str	r4, [sp, #0]
 80004a2:	f003 fe1d 	bl	80040e0 <_txe_byte_pool_create>
 80004a6:	1e03      	subs	r3, r0, #0
 80004a8:	d10c      	bne.n	80004c4 <tx_application_define+0x3c>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Success */

    /* USER CODE END TX_Byte_Pool_Success */

    memory_ptr = (VOID *)&tx_app_byte_pool;
 80004aa:	4b0a      	ldr	r3, [pc, #40]	@ (80004d4 <tx_application_define+0x4c>)
 80004ac:	60bb      	str	r3, [r7, #8]
    status = App_ThreadX_Init(memory_ptr);
 80004ae:	68bb      	ldr	r3, [r7, #8]
 80004b0:	0018      	movs	r0, r3
 80004b2:	f000 f811 	bl	80004d8 <App_ThreadX_Init>
 80004b6:	0003      	movs	r3, r0
 80004b8:	60fb      	str	r3, [r7, #12]
    if (status != TX_SUCCESS)
 80004ba:	68fb      	ldr	r3, [r7, #12]
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d001      	beq.n	80004c4 <tx_application_define+0x3c>
    {
      /* USER CODE BEGIN  App_ThreadX_Init_Error */
      while(1)
 80004c0:	46c0      	nop			@ (mov r8, r8)
 80004c2:	e7fd      	b.n	80004c0 <tx_application_define+0x38>
  /* USER CODE BEGIN DYNAMIC_MEM_ALLOC */
  (void)first_unused_memory;
  /* USER CODE END DYNAMIC_MEM_ALLOC */
#endif

}
 80004c4:	46c0      	nop			@ (mov r8, r8)
 80004c6:	46bd      	mov	sp, r7
 80004c8:	b005      	add	sp, #20
 80004ca:	bd90      	pop	{r4, r7, pc}
 80004cc:	20000088 	.word	0x20000088
 80004d0:	08005070 	.word	0x08005070
 80004d4:	20000488 	.word	0x20000488

080004d8 <App_ThreadX_Init>:
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b08c      	sub	sp, #48	@ 0x30
 80004dc:	af08      	add	r7, sp, #32
 80004de:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 80004e0:	2300      	movs	r3, #0
 80004e2:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN App_ThreadX_MEM_POOL */

  /* USER CODE END App_ThreadX_MEM_POOL */
  /* USER CODE BEGIN App_ThreadX_Init */
  tx_queue_create(&queue0_ptr, "message_btn_status", TX_1_ULONG ,queue0_stack,QUEUE_STACK_SIZE);
 80004e4:	4b2b      	ldr	r3, [pc, #172]	@ (8000594 <App_ThreadX_Init+0xbc>)
 80004e6:	492c      	ldr	r1, [pc, #176]	@ (8000598 <App_ThreadX_Init+0xc0>)
 80004e8:	482c      	ldr	r0, [pc, #176]	@ (800059c <App_ThreadX_Init+0xc4>)
 80004ea:	2238      	movs	r2, #56	@ 0x38
 80004ec:	9201      	str	r2, [sp, #4]
 80004ee:	2210      	movs	r2, #16
 80004f0:	9200      	str	r2, [sp, #0]
 80004f2:	2201      	movs	r2, #1
 80004f4:	f003 fe92 	bl	800421c <_txe_queue_create>
  tx_queue_create(&queue1_ptr, "message_led_status", TX_1_ULONG ,queue1_stack,QUEUE_STACK_SIZE);
 80004f8:	4b29      	ldr	r3, [pc, #164]	@ (80005a0 <App_ThreadX_Init+0xc8>)
 80004fa:	492a      	ldr	r1, [pc, #168]	@ (80005a4 <App_ThreadX_Init+0xcc>)
 80004fc:	482a      	ldr	r0, [pc, #168]	@ (80005a8 <App_ThreadX_Init+0xd0>)
 80004fe:	2238      	movs	r2, #56	@ 0x38
 8000500:	9201      	str	r2, [sp, #4]
 8000502:	2210      	movs	r2, #16
 8000504:	9200      	str	r2, [sp, #0]
 8000506:	2201      	movs	r2, #1
 8000508:	f003 fe88 	bl	800421c <_txe_queue_create>

  tx_thread_create(&btn_status_ptr,"btn_status",btn_status,0,btn_status_stack, BTN_STATUS_STACK_SIZE,15,15,1,TX_AUTO_START);
 800050c:	4a27      	ldr	r2, [pc, #156]	@ (80005ac <App_ThreadX_Init+0xd4>)
 800050e:	4928      	ldr	r1, [pc, #160]	@ (80005b0 <App_ThreadX_Init+0xd8>)
 8000510:	4828      	ldr	r0, [pc, #160]	@ (80005b4 <App_ThreadX_Init+0xdc>)
 8000512:	23b0      	movs	r3, #176	@ 0xb0
 8000514:	9306      	str	r3, [sp, #24]
 8000516:	2301      	movs	r3, #1
 8000518:	9305      	str	r3, [sp, #20]
 800051a:	2301      	movs	r3, #1
 800051c:	9304      	str	r3, [sp, #16]
 800051e:	230f      	movs	r3, #15
 8000520:	9303      	str	r3, [sp, #12]
 8000522:	230f      	movs	r3, #15
 8000524:	9302      	str	r3, [sp, #8]
 8000526:	2380      	movs	r3, #128	@ 0x80
 8000528:	009b      	lsls	r3, r3, #2
 800052a:	9301      	str	r3, [sp, #4]
 800052c:	4b22      	ldr	r3, [pc, #136]	@ (80005b8 <App_ThreadX_Init+0xe0>)
 800052e:	9300      	str	r3, [sp, #0]
 8000530:	2300      	movs	r3, #0
 8000532:	f003 ffbb 	bl	80044ac <_txe_thread_create>

  tx_thread_create(&led_action_ptr,"led_action",led_action,0,led_action_stack, LED_ACTION_STACK_SIZE,15,15,1,TX_AUTO_START);
 8000536:	4a21      	ldr	r2, [pc, #132]	@ (80005bc <App_ThreadX_Init+0xe4>)
 8000538:	4921      	ldr	r1, [pc, #132]	@ (80005c0 <App_ThreadX_Init+0xe8>)
 800053a:	4822      	ldr	r0, [pc, #136]	@ (80005c4 <App_ThreadX_Init+0xec>)
 800053c:	23b0      	movs	r3, #176	@ 0xb0
 800053e:	9306      	str	r3, [sp, #24]
 8000540:	2301      	movs	r3, #1
 8000542:	9305      	str	r3, [sp, #20]
 8000544:	2301      	movs	r3, #1
 8000546:	9304      	str	r3, [sp, #16]
 8000548:	230f      	movs	r3, #15
 800054a:	9303      	str	r3, [sp, #12]
 800054c:	230f      	movs	r3, #15
 800054e:	9302      	str	r3, [sp, #8]
 8000550:	2380      	movs	r3, #128	@ 0x80
 8000552:	009b      	lsls	r3, r3, #2
 8000554:	9301      	str	r3, [sp, #4]
 8000556:	4b1c      	ldr	r3, [pc, #112]	@ (80005c8 <App_ThreadX_Init+0xf0>)
 8000558:	9300      	str	r3, [sp, #0]
 800055a:	2300      	movs	r3, #0
 800055c:	f003 ffa6 	bl	80044ac <_txe_thread_create>

  tx_thread_create(&led_status_ptr,"led_status",led_status,0,led_status_stack, LED_STATUS_STACK_SIZE,15,15,1,TX_AUTO_START);
 8000560:	4a1a      	ldr	r2, [pc, #104]	@ (80005cc <App_ThreadX_Init+0xf4>)
 8000562:	491b      	ldr	r1, [pc, #108]	@ (80005d0 <App_ThreadX_Init+0xf8>)
 8000564:	481b      	ldr	r0, [pc, #108]	@ (80005d4 <App_ThreadX_Init+0xfc>)
 8000566:	23b0      	movs	r3, #176	@ 0xb0
 8000568:	9306      	str	r3, [sp, #24]
 800056a:	2301      	movs	r3, #1
 800056c:	9305      	str	r3, [sp, #20]
 800056e:	2301      	movs	r3, #1
 8000570:	9304      	str	r3, [sp, #16]
 8000572:	230f      	movs	r3, #15
 8000574:	9303      	str	r3, [sp, #12]
 8000576:	230f      	movs	r3, #15
 8000578:	9302      	str	r3, [sp, #8]
 800057a:	2380      	movs	r3, #128	@ 0x80
 800057c:	009b      	lsls	r3, r3, #2
 800057e:	9301      	str	r3, [sp, #4]
 8000580:	4b15      	ldr	r3, [pc, #84]	@ (80005d8 <App_ThreadX_Init+0x100>)
 8000582:	9300      	str	r3, [sp, #0]
 8000584:	2300      	movs	r3, #0
 8000586:	f003 ff91 	bl	80044ac <_txe_thread_create>
  /* USER CODE END App_ThreadX_Init */

  return ret;
 800058a:	68fb      	ldr	r3, [r7, #12]
}
 800058c:	0018      	movs	r0, r3
 800058e:	46bd      	mov	sp, r7
 8000590:	b004      	add	sp, #16
 8000592:	bd80      	pop	{r7, pc}
 8000594:	20000abc 	.word	0x20000abc
 8000598:	08005084 	.word	0x08005084
 800059c:	20000cec 	.word	0x20000cec
 80005a0:	20000acc 	.word	0x20000acc
 80005a4:	08005098 	.word	0x08005098
 80005a8:	20000d24 	.word	0x20000d24
 80005ac:	080005ed 	.word	0x080005ed
 80005b0:	080050ac 	.word	0x080050ac
 80005b4:	20000adc 	.word	0x20000adc
 80005b8:	200004bc 	.word	0x200004bc
 80005bc:	08000645 	.word	0x08000645
 80005c0:	080050b8 	.word	0x080050b8
 80005c4:	20000b8c 	.word	0x20000b8c
 80005c8:	200006bc 	.word	0x200006bc
 80005cc:	08000699 	.word	0x08000699
 80005d0:	080050c4 	.word	0x080050c4
 80005d4:	20000c3c 	.word	0x20000c3c
 80005d8:	200008bc 	.word	0x200008bc

080005dc <MX_ThreadX_Init>:
  * @brief  Function that implements the kernel's initialization.
  * @param  None
  * @retval None
  */
void MX_ThreadX_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  Before_Kernel_Start */

  /* USER CODE END  Before_Kernel_Start */

  tx_kernel_enter();
 80005e0:	f002 f976 	bl	80028d0 <_tx_initialize_kernel_enter>

  /* USER CODE BEGIN  Kernel_Start_Error */

  /* USER CODE END  Kernel_Start_Error */
}
 80005e4:	46c0      	nop			@ (mov r8, r8)
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
	...

080005ec <btn_status>:

/* USER CODE BEGIN 1 */
VOID btn_status (ULONG initial_input) {
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
ULONG message_pin_status = DISABLE;
 80005f4:	2300      	movs	r3, #0
 80005f6:	60bb      	str	r3, [r7, #8]
ULONG message_pin_status_new = DISABLE;
 80005f8:	2300      	movs	r3, #0
 80005fa:	60fb      	str	r3, [r7, #12]

while(1) {
tx_thread_sleep(10);
 80005fc:	200a      	movs	r0, #10
 80005fe:	f002 ff59 	bl	80034b4 <_tx_thread_sleep>

   if(!HAL_GPIO_ReadPin(User_Button_GPIO_Port, User_Button_Pin)) {
 8000602:	2380      	movs	r3, #128	@ 0x80
 8000604:	019b      	lsls	r3, r3, #6
 8000606:	4a0d      	ldr	r2, [pc, #52]	@ (800063c <btn_status+0x50>)
 8000608:	0019      	movs	r1, r3
 800060a:	0010      	movs	r0, r2
 800060c:	f000 fd84 	bl	8001118 <HAL_GPIO_ReadPin>
 8000610:	1e03      	subs	r3, r0, #0
 8000612:	d102      	bne.n	800061a <btn_status+0x2e>
   message_pin_status_new = ENABLE;
 8000614:	2301      	movs	r3, #1
 8000616:	60fb      	str	r3, [r7, #12]
 8000618:	e001      	b.n	800061e <btn_status+0x32>
   }

   else {
   message_pin_status_new = DISABLE;
 800061a:	2300      	movs	r3, #0
 800061c:	60fb      	str	r3, [r7, #12]
   }

   if (message_pin_status != message_pin_status_new) {
 800061e:	68bb      	ldr	r3, [r7, #8]
 8000620:	68fa      	ldr	r2, [r7, #12]
 8000622:	429a      	cmp	r2, r3
 8000624:	d0ea      	beq.n	80005fc <btn_status+0x10>
   message_pin_status = message_pin_status_new;
 8000626:	68fb      	ldr	r3, [r7, #12]
 8000628:	60bb      	str	r3, [r7, #8]
   tx_queue_send(&queue0_ptr,&message_pin_status,TX_NO_WAIT);
 800062a:	2308      	movs	r3, #8
 800062c:	18f9      	adds	r1, r7, r3
 800062e:	4b04      	ldr	r3, [pc, #16]	@ (8000640 <btn_status+0x54>)
 8000630:	2200      	movs	r2, #0
 8000632:	0018      	movs	r0, r3
 8000634:	f003 feee 	bl	8004414 <_txe_queue_send>
tx_thread_sleep(10);
 8000638:	e7e0      	b.n	80005fc <btn_status+0x10>
 800063a:	46c0      	nop			@ (mov r8, r8)
 800063c:	50000800 	.word	0x50000800
 8000640:	20000cec 	.word	0x20000cec

08000644 <led_action>:
   }
   }
   }

VOID led_action(ULONG initial_input) {
 8000644:	b580      	push	{r7, lr}
 8000646:	b084      	sub	sp, #16
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]

ULONG message_status;

while(1) {
tx_queue_receive(&queue0_ptr,&message_status,TX_WAIT_FOREVER);
 800064c:	2301      	movs	r3, #1
 800064e:	425a      	negs	r2, r3
 8000650:	230c      	movs	r3, #12
 8000652:	18f9      	adds	r1, r7, r3
 8000654:	4b0e      	ldr	r3, [pc, #56]	@ (8000690 <led_action+0x4c>)
 8000656:	0018      	movs	r0, r3
 8000658:	f003 fe90 	bl	800437c <_txe_queue_receive>

   if(message_status) {
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	2b00      	cmp	r3, #0
 8000660:	d007      	beq.n	8000672 <led_action+0x2e>
   HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin,GPIO_PIN_SET);
 8000662:	23a0      	movs	r3, #160	@ 0xa0
 8000664:	05db      	lsls	r3, r3, #23
 8000666:	2201      	movs	r2, #1
 8000668:	2120      	movs	r1, #32
 800066a:	0018      	movs	r0, r3
 800066c:	f000 fd71 	bl	8001152 <HAL_GPIO_WritePin>
 8000670:	e006      	b.n	8000680 <led_action+0x3c>
   }

   else {
   HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin,GPIO_PIN_RESET);
 8000672:	23a0      	movs	r3, #160	@ 0xa0
 8000674:	05db      	lsls	r3, r3, #23
 8000676:	2200      	movs	r2, #0
 8000678:	2120      	movs	r1, #32
 800067a:	0018      	movs	r0, r3
 800067c:	f000 fd69 	bl	8001152 <HAL_GPIO_WritePin>
   }

   tx_queue_send(&queue1_ptr,&message_status,TX_NO_WAIT);
 8000680:	230c      	movs	r3, #12
 8000682:	18f9      	adds	r1, r7, r3
 8000684:	4b03      	ldr	r3, [pc, #12]	@ (8000694 <led_action+0x50>)
 8000686:	2200      	movs	r2, #0
 8000688:	0018      	movs	r0, r3
 800068a:	f003 fec3 	bl	8004414 <_txe_queue_send>
tx_queue_receive(&queue0_ptr,&message_status,TX_WAIT_FOREVER);
 800068e:	e7dd      	b.n	800064c <led_action+0x8>
 8000690:	20000cec 	.word	0x20000cec
 8000694:	20000d24 	.word	0x20000d24

08000698 <led_status>:
  }
  }

VOID led_status(ULONG initial_input) {
 8000698:	b580      	push	{r7, lr}
 800069a:	b084      	sub	sp, #16
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]

ULONG message_status = DISABLE;
 80006a0:	2300      	movs	r3, #0
 80006a2:	60fb      	str	r3, [r7, #12]

while(1) {

   tx_queue_receive(&queue1_ptr,&message_status,TX_WAIT_FOREVER);
 80006a4:	2301      	movs	r3, #1
 80006a6:	425a      	negs	r2, r3
 80006a8:	230c      	movs	r3, #12
 80006aa:	18f9      	adds	r1, r7, r3
 80006ac:	4b08      	ldr	r3, [pc, #32]	@ (80006d0 <led_status+0x38>)
 80006ae:	0018      	movs	r0, r3
 80006b0:	f003 fe64 	bl	800437c <_txe_queue_receive>

   if(message_status)
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d004      	beq.n	80006c4 <led_status+0x2c>
   printf("The LED is ON\r\n");
 80006ba:	4b06      	ldr	r3, [pc, #24]	@ (80006d4 <led_status+0x3c>)
 80006bc:	0018      	movs	r0, r3
 80006be:	f004 f901 	bl	80048c4 <puts>
 80006c2:	e7ef      	b.n	80006a4 <led_status+0xc>

   else
   printf("The LED is OFF\r\n");
 80006c4:	4b04      	ldr	r3, [pc, #16]	@ (80006d8 <led_status+0x40>)
 80006c6:	0018      	movs	r0, r3
 80006c8:	f004 f8fc 	bl	80048c4 <puts>
   tx_queue_receive(&queue1_ptr,&message_status,TX_WAIT_FOREVER);
 80006cc:	e7ea      	b.n	80006a4 <led_status+0xc>
 80006ce:	46c0      	nop			@ (mov r8, r8)
 80006d0:	20000d24 	.word	0x20000d24
 80006d4:	080050d0 	.word	0x080050d0
 80006d8:	080050e0 	.word	0x080050e0

080006dc <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void __io_putchar(char ch) {
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	0002      	movs	r2, r0
 80006e4:	1dfb      	adds	r3, r7, #7
 80006e6:	701a      	strb	r2, [r3, #0]
    // Code to write character 'ch' on the UART
    HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 10);
 80006e8:	1df9      	adds	r1, r7, #7
 80006ea:	4804      	ldr	r0, [pc, #16]	@ (80006fc <__io_putchar+0x20>)
 80006ec:	230a      	movs	r3, #10
 80006ee:	2201      	movs	r2, #1
 80006f0:	f001 fbb0 	bl	8001e54 <HAL_UART_Transmit>
}
 80006f4:	46c0      	nop			@ (mov r8, r8)
 80006f6:	46bd      	mov	sp, r7
 80006f8:	b002      	add	sp, #8
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	20000d5c 	.word	0x20000d5c

08000700 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000704:	f000 fab5 	bl	8000c72 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000708:	f000 f808 	bl	800071c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800070c:	f000 f87e 	bl	800080c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000710:	f000 f848 	bl	80007a4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  MX_ThreadX_Init();
 8000714:	f7ff ff62 	bl	80005dc <MX_ThreadX_Init>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000718:	46c0      	nop			@ (mov r8, r8)
 800071a:	e7fd      	b.n	8000718 <main+0x18>

0800071c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800071c:	b590      	push	{r4, r7, lr}
 800071e:	b08d      	sub	sp, #52	@ 0x34
 8000720:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000722:	2414      	movs	r4, #20
 8000724:	193b      	adds	r3, r7, r4
 8000726:	0018      	movs	r0, r3
 8000728:	231c      	movs	r3, #28
 800072a:	001a      	movs	r2, r3
 800072c:	2100      	movs	r1, #0
 800072e:	f004 f9bf 	bl	8004ab0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000732:	003b      	movs	r3, r7
 8000734:	0018      	movs	r0, r3
 8000736:	2314      	movs	r3, #20
 8000738:	001a      	movs	r2, r3
 800073a:	2100      	movs	r1, #0
 800073c:	f004 f9b8 	bl	8004ab0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000740:	193b      	adds	r3, r7, r4
 8000742:	2202      	movs	r2, #2
 8000744:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000746:	193b      	adds	r3, r7, r4
 8000748:	2280      	movs	r2, #128	@ 0x80
 800074a:	0052      	lsls	r2, r2, #1
 800074c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV4;
 800074e:	193b      	adds	r3, r7, r4
 8000750:	2280      	movs	r2, #128	@ 0x80
 8000752:	0152      	lsls	r2, r2, #5
 8000754:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000756:	193b      	adds	r3, r7, r4
 8000758:	2240      	movs	r2, #64	@ 0x40
 800075a:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800075c:	193b      	adds	r3, r7, r4
 800075e:	0018      	movs	r0, r3
 8000760:	f000 fd52 	bl	8001208 <HAL_RCC_OscConfig>
 8000764:	1e03      	subs	r3, r0, #0
 8000766:	d001      	beq.n	800076c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000768:	f000 f8c2 	bl	80008f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800076c:	003b      	movs	r3, r7
 800076e:	2207      	movs	r2, #7
 8000770:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000772:	003b      	movs	r3, r7
 8000774:	2200      	movs	r2, #0
 8000776:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000778:	003b      	movs	r3, r7
 800077a:	2200      	movs	r2, #0
 800077c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800077e:	003b      	movs	r3, r7
 8000780:	2200      	movs	r2, #0
 8000782:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000784:	003b      	movs	r3, r7
 8000786:	2200      	movs	r2, #0
 8000788:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800078a:	003b      	movs	r3, r7
 800078c:	2100      	movs	r1, #0
 800078e:	0018      	movs	r0, r3
 8000790:	f000 ff1e 	bl	80015d0 <HAL_RCC_ClockConfig>
 8000794:	1e03      	subs	r3, r0, #0
 8000796:	d001      	beq.n	800079c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000798:	f000 f8aa 	bl	80008f0 <Error_Handler>
  }
}
 800079c:	46c0      	nop			@ (mov r8, r8)
 800079e:	46bd      	mov	sp, r7
 80007a0:	b00d      	add	sp, #52	@ 0x34
 80007a2:	bd90      	pop	{r4, r7, pc}

080007a4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007a8:	4b16      	ldr	r3, [pc, #88]	@ (8000804 <MX_USART2_UART_Init+0x60>)
 80007aa:	4a17      	ldr	r2, [pc, #92]	@ (8000808 <MX_USART2_UART_Init+0x64>)
 80007ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007ae:	4b15      	ldr	r3, [pc, #84]	@ (8000804 <MX_USART2_UART_Init+0x60>)
 80007b0:	22e1      	movs	r2, #225	@ 0xe1
 80007b2:	0252      	lsls	r2, r2, #9
 80007b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007b6:	4b13      	ldr	r3, [pc, #76]	@ (8000804 <MX_USART2_UART_Init+0x60>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007bc:	4b11      	ldr	r3, [pc, #68]	@ (8000804 <MX_USART2_UART_Init+0x60>)
 80007be:	2200      	movs	r2, #0
 80007c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007c2:	4b10      	ldr	r3, [pc, #64]	@ (8000804 <MX_USART2_UART_Init+0x60>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007c8:	4b0e      	ldr	r3, [pc, #56]	@ (8000804 <MX_USART2_UART_Init+0x60>)
 80007ca:	220c      	movs	r2, #12
 80007cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ce:	4b0d      	ldr	r3, [pc, #52]	@ (8000804 <MX_USART2_UART_Init+0x60>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007d4:	4b0b      	ldr	r3, [pc, #44]	@ (8000804 <MX_USART2_UART_Init+0x60>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007da:	4b0a      	ldr	r3, [pc, #40]	@ (8000804 <MX_USART2_UART_Init+0x60>)
 80007dc:	2200      	movs	r2, #0
 80007de:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007e0:	4b08      	ldr	r3, [pc, #32]	@ (8000804 <MX_USART2_UART_Init+0x60>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007e6:	4b07      	ldr	r3, [pc, #28]	@ (8000804 <MX_USART2_UART_Init+0x60>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007ec:	4b05      	ldr	r3, [pc, #20]	@ (8000804 <MX_USART2_UART_Init+0x60>)
 80007ee:	0018      	movs	r0, r3
 80007f0:	f001 fada 	bl	8001da8 <HAL_UART_Init>
 80007f4:	1e03      	subs	r3, r0, #0
 80007f6:	d001      	beq.n	80007fc <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80007f8:	f000 f87a 	bl	80008f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007fc:	46c0      	nop			@ (mov r8, r8)
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	46c0      	nop			@ (mov r8, r8)
 8000804:	20000d5c 	.word	0x20000d5c
 8000808:	40004400 	.word	0x40004400

0800080c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800080c:	b590      	push	{r4, r7, lr}
 800080e:	b089      	sub	sp, #36	@ 0x24
 8000810:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000812:	240c      	movs	r4, #12
 8000814:	193b      	adds	r3, r7, r4
 8000816:	0018      	movs	r0, r3
 8000818:	2314      	movs	r3, #20
 800081a:	001a      	movs	r2, r3
 800081c:	2100      	movs	r1, #0
 800081e:	f004 f947 	bl	8004ab0 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000822:	4b27      	ldr	r3, [pc, #156]	@ (80008c0 <MX_GPIO_Init+0xb4>)
 8000824:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000826:	4b26      	ldr	r3, [pc, #152]	@ (80008c0 <MX_GPIO_Init+0xb4>)
 8000828:	2104      	movs	r1, #4
 800082a:	430a      	orrs	r2, r1
 800082c:	635a      	str	r2, [r3, #52]	@ 0x34
 800082e:	4b24      	ldr	r3, [pc, #144]	@ (80008c0 <MX_GPIO_Init+0xb4>)
 8000830:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000832:	2204      	movs	r2, #4
 8000834:	4013      	ands	r3, r2
 8000836:	60bb      	str	r3, [r7, #8]
 8000838:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800083a:	4b21      	ldr	r3, [pc, #132]	@ (80008c0 <MX_GPIO_Init+0xb4>)
 800083c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800083e:	4b20      	ldr	r3, [pc, #128]	@ (80008c0 <MX_GPIO_Init+0xb4>)
 8000840:	2101      	movs	r1, #1
 8000842:	430a      	orrs	r2, r1
 8000844:	635a      	str	r2, [r3, #52]	@ 0x34
 8000846:	4b1e      	ldr	r3, [pc, #120]	@ (80008c0 <MX_GPIO_Init+0xb4>)
 8000848:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800084a:	2201      	movs	r2, #1
 800084c:	4013      	ands	r3, r2
 800084e:	607b      	str	r3, [r7, #4]
 8000850:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000852:	23a0      	movs	r3, #160	@ 0xa0
 8000854:	05db      	lsls	r3, r3, #23
 8000856:	2200      	movs	r2, #0
 8000858:	2120      	movs	r1, #32
 800085a:	0018      	movs	r0, r3
 800085c:	f000 fc79 	bl	8001152 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : User_Button_Pin */
  GPIO_InitStruct.Pin = User_Button_Pin;
 8000860:	193b      	adds	r3, r7, r4
 8000862:	2280      	movs	r2, #128	@ 0x80
 8000864:	0192      	lsls	r2, r2, #6
 8000866:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000868:	193b      	adds	r3, r7, r4
 800086a:	4a16      	ldr	r2, [pc, #88]	@ (80008c4 <MX_GPIO_Init+0xb8>)
 800086c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086e:	193b      	adds	r3, r7, r4
 8000870:	2200      	movs	r2, #0
 8000872:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 8000874:	193b      	adds	r3, r7, r4
 8000876:	4a14      	ldr	r2, [pc, #80]	@ (80008c8 <MX_GPIO_Init+0xbc>)
 8000878:	0019      	movs	r1, r3
 800087a:	0010      	movs	r0, r2
 800087c:	f000 fada 	bl	8000e34 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000880:	0021      	movs	r1, r4
 8000882:	187b      	adds	r3, r7, r1
 8000884:	2220      	movs	r2, #32
 8000886:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000888:	187b      	adds	r3, r7, r1
 800088a:	2201      	movs	r2, #1
 800088c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088e:	187b      	adds	r3, r7, r1
 8000890:	2200      	movs	r2, #0
 8000892:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000894:	187b      	adds	r3, r7, r1
 8000896:	2200      	movs	r2, #0
 8000898:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800089a:	187a      	adds	r2, r7, r1
 800089c:	23a0      	movs	r3, #160	@ 0xa0
 800089e:	05db      	lsls	r3, r3, #23
 80008a0:	0011      	movs	r1, r2
 80008a2:	0018      	movs	r0, r3
 80008a4:	f000 fac6 	bl	8000e34 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80008a8:	2200      	movs	r2, #0
 80008aa:	2100      	movs	r1, #0
 80008ac:	2007      	movs	r0, #7
 80008ae:	f000 fa9b 	bl	8000de8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80008b2:	2007      	movs	r0, #7
 80008b4:	f000 faad 	bl	8000e12 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008b8:	46c0      	nop			@ (mov r8, r8)
 80008ba:	46bd      	mov	sp, r7
 80008bc:	b009      	add	sp, #36	@ 0x24
 80008be:	bd90      	pop	{r4, r7, pc}
 80008c0:	40021000 	.word	0x40021000
 80008c4:	10110000 	.word	0x10110000
 80008c8:	50000800 	.word	0x50000800

080008cc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM16) {
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4a04      	ldr	r2, [pc, #16]	@ (80008ec <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008da:	4293      	cmp	r3, r2
 80008dc:	d101      	bne.n	80008e2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008de:	f000 f9df 	bl	8000ca0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008e2:	46c0      	nop			@ (mov r8, r8)
 80008e4:	46bd      	mov	sp, r7
 80008e6:	b002      	add	sp, #8
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	46c0      	nop			@ (mov r8, r8)
 80008ec:	40014400 	.word	0x40014400

080008f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008f4:	b672      	cpsid	i
}
 80008f6:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008f8:	46c0      	nop			@ (mov r8, r8)
 80008fa:	e7fd      	b.n	80008f8 <Error_Handler+0x8>

080008fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000902:	4b0f      	ldr	r3, [pc, #60]	@ (8000940 <HAL_MspInit+0x44>)
 8000904:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000906:	4b0e      	ldr	r3, [pc, #56]	@ (8000940 <HAL_MspInit+0x44>)
 8000908:	2101      	movs	r1, #1
 800090a:	430a      	orrs	r2, r1
 800090c:	641a      	str	r2, [r3, #64]	@ 0x40
 800090e:	4b0c      	ldr	r3, [pc, #48]	@ (8000940 <HAL_MspInit+0x44>)
 8000910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000912:	2201      	movs	r2, #1
 8000914:	4013      	ands	r3, r2
 8000916:	607b      	str	r3, [r7, #4]
 8000918:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800091a:	4b09      	ldr	r3, [pc, #36]	@ (8000940 <HAL_MspInit+0x44>)
 800091c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800091e:	4b08      	ldr	r3, [pc, #32]	@ (8000940 <HAL_MspInit+0x44>)
 8000920:	2180      	movs	r1, #128	@ 0x80
 8000922:	0549      	lsls	r1, r1, #21
 8000924:	430a      	orrs	r2, r1
 8000926:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000928:	4b05      	ldr	r3, [pc, #20]	@ (8000940 <HAL_MspInit+0x44>)
 800092a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800092c:	2380      	movs	r3, #128	@ 0x80
 800092e:	055b      	lsls	r3, r3, #21
 8000930:	4013      	ands	r3, r2
 8000932:	603b      	str	r3, [r7, #0]
 8000934:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000936:	46c0      	nop			@ (mov r8, r8)
 8000938:	46bd      	mov	sp, r7
 800093a:	b002      	add	sp, #8
 800093c:	bd80      	pop	{r7, pc}
 800093e:	46c0      	nop			@ (mov r8, r8)
 8000940:	40021000 	.word	0x40021000

08000944 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000944:	b590      	push	{r4, r7, lr}
 8000946:	b08b      	sub	sp, #44	@ 0x2c
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800094c:	2414      	movs	r4, #20
 800094e:	193b      	adds	r3, r7, r4
 8000950:	0018      	movs	r0, r3
 8000952:	2314      	movs	r3, #20
 8000954:	001a      	movs	r2, r3
 8000956:	2100      	movs	r1, #0
 8000958:	f004 f8aa 	bl	8004ab0 <memset>
  if(huart->Instance==USART2)
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4a1b      	ldr	r2, [pc, #108]	@ (80009d0 <HAL_UART_MspInit+0x8c>)
 8000962:	4293      	cmp	r3, r2
 8000964:	d130      	bne.n	80009c8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000966:	4b1b      	ldr	r3, [pc, #108]	@ (80009d4 <HAL_UART_MspInit+0x90>)
 8000968:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800096a:	4b1a      	ldr	r3, [pc, #104]	@ (80009d4 <HAL_UART_MspInit+0x90>)
 800096c:	2180      	movs	r1, #128	@ 0x80
 800096e:	0289      	lsls	r1, r1, #10
 8000970:	430a      	orrs	r2, r1
 8000972:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000974:	4b17      	ldr	r3, [pc, #92]	@ (80009d4 <HAL_UART_MspInit+0x90>)
 8000976:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000978:	2380      	movs	r3, #128	@ 0x80
 800097a:	029b      	lsls	r3, r3, #10
 800097c:	4013      	ands	r3, r2
 800097e:	613b      	str	r3, [r7, #16]
 8000980:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000982:	4b14      	ldr	r3, [pc, #80]	@ (80009d4 <HAL_UART_MspInit+0x90>)
 8000984:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000986:	4b13      	ldr	r3, [pc, #76]	@ (80009d4 <HAL_UART_MspInit+0x90>)
 8000988:	2101      	movs	r1, #1
 800098a:	430a      	orrs	r2, r1
 800098c:	635a      	str	r2, [r3, #52]	@ 0x34
 800098e:	4b11      	ldr	r3, [pc, #68]	@ (80009d4 <HAL_UART_MspInit+0x90>)
 8000990:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000992:	2201      	movs	r2, #1
 8000994:	4013      	ands	r3, r2
 8000996:	60fb      	str	r3, [r7, #12]
 8000998:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800099a:	0021      	movs	r1, r4
 800099c:	187b      	adds	r3, r7, r1
 800099e:	220c      	movs	r2, #12
 80009a0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a2:	187b      	adds	r3, r7, r1
 80009a4:	2202      	movs	r2, #2
 80009a6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a8:	187b      	adds	r3, r7, r1
 80009aa:	2200      	movs	r2, #0
 80009ac:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ae:	187b      	adds	r3, r7, r1
 80009b0:	2200      	movs	r2, #0
 80009b2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80009b4:	187b      	adds	r3, r7, r1
 80009b6:	2201      	movs	r2, #1
 80009b8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ba:	187a      	adds	r2, r7, r1
 80009bc:	23a0      	movs	r3, #160	@ 0xa0
 80009be:	05db      	lsls	r3, r3, #23
 80009c0:	0011      	movs	r1, r2
 80009c2:	0018      	movs	r0, r3
 80009c4:	f000 fa36 	bl	8000e34 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009c8:	46c0      	nop			@ (mov r8, r8)
 80009ca:	46bd      	mov	sp, r7
 80009cc:	b00b      	add	sp, #44	@ 0x2c
 80009ce:	bd90      	pop	{r4, r7, pc}
 80009d0:	40004400 	.word	0x40004400
 80009d4:	40021000 	.word	0x40021000

080009d8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b08c      	sub	sp, #48	@ 0x30
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80009e0:	2300      	movs	r3, #0
 80009e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t              uwPrescalerValue = 0;
 80009e4:	2300      	movs	r3, #0
 80009e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  /*Configure the TIM16 IRQ priority */
  HAL_NVIC_SetPriority(TIM16_IRQn, TickPriority ,0);
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	2200      	movs	r2, #0
 80009ec:	0019      	movs	r1, r3
 80009ee:	2015      	movs	r0, #21
 80009f0:	f000 f9fa 	bl	8000de8 <HAL_NVIC_SetPriority>
  /* Enable the TIM16 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM16_IRQn);
 80009f4:	2015      	movs	r0, #21
 80009f6:	f000 fa0c 	bl	8000e12 <HAL_NVIC_EnableIRQ>

  /* Enable TIM16 clock */
  __HAL_RCC_TIM16_CLK_ENABLE();
 80009fa:	4b21      	ldr	r3, [pc, #132]	@ (8000a80 <HAL_InitTick+0xa8>)
 80009fc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80009fe:	4b20      	ldr	r3, [pc, #128]	@ (8000a80 <HAL_InitTick+0xa8>)
 8000a00:	2180      	movs	r1, #128	@ 0x80
 8000a02:	0289      	lsls	r1, r1, #10
 8000a04:	430a      	orrs	r2, r1
 8000a06:	641a      	str	r2, [r3, #64]	@ 0x40
 8000a08:	4b1d      	ldr	r3, [pc, #116]	@ (8000a80 <HAL_InitTick+0xa8>)
 8000a0a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000a0c:	2380      	movs	r3, #128	@ 0x80
 8000a0e:	029b      	lsls	r3, r3, #10
 8000a10:	4013      	ands	r3, r2
 8000a12:	60fb      	str	r3, [r7, #12]
 8000a14:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a16:	2310      	movs	r3, #16
 8000a18:	18fa      	adds	r2, r7, r3
 8000a1a:	2314      	movs	r3, #20
 8000a1c:	18fb      	adds	r3, r7, r3
 8000a1e:	0011      	movs	r1, r2
 8000a20:	0018      	movs	r0, r3
 8000a22:	f000 ff43 	bl	80018ac <HAL_RCC_GetClockConfig>

  /* Compute TIM16 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000a26:	f000 ff29 	bl	800187c <HAL_RCC_GetPCLK1Freq>
 8000a2a:	0003      	movs	r3, r0
 8000a2c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Compute the prescaler value to have TIM16 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a30:	4914      	ldr	r1, [pc, #80]	@ (8000a84 <HAL_InitTick+0xac>)
 8000a32:	0018      	movs	r0, r3
 8000a34:	f7ff fc9c 	bl	8000370 <__udivsi3>
 8000a38:	0003      	movs	r3, r0
 8000a3a:	3b01      	subs	r3, #1
 8000a3c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM16 */
  htim16.Instance = TIM16;
 8000a3e:	4b12      	ldr	r3, [pc, #72]	@ (8000a88 <HAL_InitTick+0xb0>)
 8000a40:	4a12      	ldr	r2, [pc, #72]	@ (8000a8c <HAL_InitTick+0xb4>)
 8000a42:	601a      	str	r2, [r3, #0]
  + Period = [(TIM16CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim16.Init.Period = (1000000U / 1000U) - 1U;
 8000a44:	4b10      	ldr	r3, [pc, #64]	@ (8000a88 <HAL_InitTick+0xb0>)
 8000a46:	4a12      	ldr	r2, [pc, #72]	@ (8000a90 <HAL_InitTick+0xb8>)
 8000a48:	60da      	str	r2, [r3, #12]
  htim16.Init.Prescaler = uwPrescalerValue;
 8000a4a:	4b0f      	ldr	r3, [pc, #60]	@ (8000a88 <HAL_InitTick+0xb0>)
 8000a4c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000a4e:	605a      	str	r2, [r3, #4]
  htim16.Init.ClockDivision = 0;
 8000a50:	4b0d      	ldr	r3, [pc, #52]	@ (8000a88 <HAL_InitTick+0xb0>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	611a      	str	r2, [r3, #16]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a56:	4b0c      	ldr	r3, [pc, #48]	@ (8000a88 <HAL_InitTick+0xb0>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim16) == HAL_OK)
 8000a5c:	4b0a      	ldr	r3, [pc, #40]	@ (8000a88 <HAL_InitTick+0xb0>)
 8000a5e:	0018      	movs	r0, r3
 8000a60:	f000 ff4e 	bl	8001900 <HAL_TIM_Base_Init>
 8000a64:	1e03      	subs	r3, r0, #0
 8000a66:	d105      	bne.n	8000a74 <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim16);
 8000a68:	4b07      	ldr	r3, [pc, #28]	@ (8000a88 <HAL_InitTick+0xb0>)
 8000a6a:	0018      	movs	r0, r3
 8000a6c:	f000 ffa8 	bl	80019c0 <HAL_TIM_Base_Start_IT>
 8000a70:	0003      	movs	r3, r0
 8000a72:	e000      	b.n	8000a76 <HAL_InitTick+0x9e>
  }

  /* Return function status */
  return HAL_ERROR;
 8000a74:	2301      	movs	r3, #1
}
 8000a76:	0018      	movs	r0, r3
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	b00c      	add	sp, #48	@ 0x30
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	46c0      	nop			@ (mov r8, r8)
 8000a80:	40021000 	.word	0x40021000
 8000a84:	000f4240 	.word	0x000f4240
 8000a88:	20000df0 	.word	0x20000df0
 8000a8c:	40014400 	.word	0x40014400
 8000a90:	000003e7 	.word	0x000003e7

08000a94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a98:	46c0      	nop			@ (mov r8, r8)
 8000a9a:	e7fd      	b.n	8000a98 <NMI_Handler+0x4>

08000a9c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aa0:	46c0      	nop			@ (mov r8, r8)
 8000aa2:	e7fd      	b.n	8000aa0 <HardFault_Handler+0x4>

08000aa4 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(User_Button_Pin);
 8000aa8:	2380      	movs	r3, #128	@ 0x80
 8000aaa:	019b      	lsls	r3, r3, #6
 8000aac:	0018      	movs	r0, r3
 8000aae:	f000 fb6d 	bl	800118c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000ab2:	46c0      	nop			@ (mov r8, r8)
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}

08000ab8 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8000abc:	4b03      	ldr	r3, [pc, #12]	@ (8000acc <TIM16_IRQHandler+0x14>)
 8000abe:	0018      	movs	r0, r3
 8000ac0:	f000 ffcc 	bl	8001a5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8000ac4:	46c0      	nop			@ (mov r8, r8)
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	46c0      	nop			@ (mov r8, r8)
 8000acc:	20000df0 	.word	0x20000df0

08000ad0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b086      	sub	sp, #24
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	60f8      	str	r0, [r7, #12]
 8000ad8:	60b9      	str	r1, [r7, #8]
 8000ada:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000adc:	2300      	movs	r3, #0
 8000ade:	617b      	str	r3, [r7, #20]
 8000ae0:	e00a      	b.n	8000af8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ae2:	e000      	b.n	8000ae6 <_read+0x16>
 8000ae4:	bf00      	nop
 8000ae6:	0001      	movs	r1, r0
 8000ae8:	68bb      	ldr	r3, [r7, #8]
 8000aea:	1c5a      	adds	r2, r3, #1
 8000aec:	60ba      	str	r2, [r7, #8]
 8000aee:	b2ca      	uxtb	r2, r1
 8000af0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000af2:	697b      	ldr	r3, [r7, #20]
 8000af4:	3301      	adds	r3, #1
 8000af6:	617b      	str	r3, [r7, #20]
 8000af8:	697a      	ldr	r2, [r7, #20]
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	429a      	cmp	r2, r3
 8000afe:	dbf0      	blt.n	8000ae2 <_read+0x12>
  }

  return len;
 8000b00:	687b      	ldr	r3, [r7, #4]
}
 8000b02:	0018      	movs	r0, r3
 8000b04:	46bd      	mov	sp, r7
 8000b06:	b006      	add	sp, #24
 8000b08:	bd80      	pop	{r7, pc}

08000b0a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b0a:	b580      	push	{r7, lr}
 8000b0c:	b086      	sub	sp, #24
 8000b0e:	af00      	add	r7, sp, #0
 8000b10:	60f8      	str	r0, [r7, #12]
 8000b12:	60b9      	str	r1, [r7, #8]
 8000b14:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b16:	2300      	movs	r3, #0
 8000b18:	617b      	str	r3, [r7, #20]
 8000b1a:	e009      	b.n	8000b30 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b1c:	68bb      	ldr	r3, [r7, #8]
 8000b1e:	1c5a      	adds	r2, r3, #1
 8000b20:	60ba      	str	r2, [r7, #8]
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	0018      	movs	r0, r3
 8000b26:	f7ff fdd9 	bl	80006dc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b2a:	697b      	ldr	r3, [r7, #20]
 8000b2c:	3301      	adds	r3, #1
 8000b2e:	617b      	str	r3, [r7, #20]
 8000b30:	697a      	ldr	r2, [r7, #20]
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	429a      	cmp	r2, r3
 8000b36:	dbf1      	blt.n	8000b1c <_write+0x12>
  }
  return len;
 8000b38:	687b      	ldr	r3, [r7, #4]
}
 8000b3a:	0018      	movs	r0, r3
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	b006      	add	sp, #24
 8000b40:	bd80      	pop	{r7, pc}

08000b42 <_close>:

int _close(int file)
{
 8000b42:	b580      	push	{r7, lr}
 8000b44:	b082      	sub	sp, #8
 8000b46:	af00      	add	r7, sp, #0
 8000b48:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	425b      	negs	r3, r3
}
 8000b4e:	0018      	movs	r0, r3
 8000b50:	46bd      	mov	sp, r7
 8000b52:	b002      	add	sp, #8
 8000b54:	bd80      	pop	{r7, pc}

08000b56 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b56:	b580      	push	{r7, lr}
 8000b58:	b082      	sub	sp, #8
 8000b5a:	af00      	add	r7, sp, #0
 8000b5c:	6078      	str	r0, [r7, #4]
 8000b5e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	2280      	movs	r2, #128	@ 0x80
 8000b64:	0192      	lsls	r2, r2, #6
 8000b66:	605a      	str	r2, [r3, #4]
  return 0;
 8000b68:	2300      	movs	r3, #0
}
 8000b6a:	0018      	movs	r0, r3
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	b002      	add	sp, #8
 8000b70:	bd80      	pop	{r7, pc}

08000b72 <_isatty>:

int _isatty(int file)
{
 8000b72:	b580      	push	{r7, lr}
 8000b74:	b082      	sub	sp, #8
 8000b76:	af00      	add	r7, sp, #0
 8000b78:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b7a:	2301      	movs	r3, #1
}
 8000b7c:	0018      	movs	r0, r3
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	b002      	add	sp, #8
 8000b82:	bd80      	pop	{r7, pc}

08000b84 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b084      	sub	sp, #16
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	60f8      	str	r0, [r7, #12]
 8000b8c:	60b9      	str	r1, [r7, #8]
 8000b8e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b90:	2300      	movs	r3, #0
}
 8000b92:	0018      	movs	r0, r3
 8000b94:	46bd      	mov	sp, r7
 8000b96:	b004      	add	sp, #16
 8000b98:	bd80      	pop	{r7, pc}
	...

08000b9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b086      	sub	sp, #24
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ba4:	4a14      	ldr	r2, [pc, #80]	@ (8000bf8 <_sbrk+0x5c>)
 8000ba6:	4b15      	ldr	r3, [pc, #84]	@ (8000bfc <_sbrk+0x60>)
 8000ba8:	1ad3      	subs	r3, r2, r3
 8000baa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bb0:	4b13      	ldr	r3, [pc, #76]	@ (8000c00 <_sbrk+0x64>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d102      	bne.n	8000bbe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bb8:	4b11      	ldr	r3, [pc, #68]	@ (8000c00 <_sbrk+0x64>)
 8000bba:	4a12      	ldr	r2, [pc, #72]	@ (8000c04 <_sbrk+0x68>)
 8000bbc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bbe:	4b10      	ldr	r3, [pc, #64]	@ (8000c00 <_sbrk+0x64>)
 8000bc0:	681a      	ldr	r2, [r3, #0]
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	18d3      	adds	r3, r2, r3
 8000bc6:	693a      	ldr	r2, [r7, #16]
 8000bc8:	429a      	cmp	r2, r3
 8000bca:	d207      	bcs.n	8000bdc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bcc:	f003 ffc6 	bl	8004b5c <__errno>
 8000bd0:	0003      	movs	r3, r0
 8000bd2:	220c      	movs	r2, #12
 8000bd4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	425b      	negs	r3, r3
 8000bda:	e009      	b.n	8000bf0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bdc:	4b08      	ldr	r3, [pc, #32]	@ (8000c00 <_sbrk+0x64>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000be2:	4b07      	ldr	r3, [pc, #28]	@ (8000c00 <_sbrk+0x64>)
 8000be4:	681a      	ldr	r2, [r3, #0]
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	18d2      	adds	r2, r2, r3
 8000bea:	4b05      	ldr	r3, [pc, #20]	@ (8000c00 <_sbrk+0x64>)
 8000bec:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000bee:	68fb      	ldr	r3, [r7, #12]
}
 8000bf0:	0018      	movs	r0, r3
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	b006      	add	sp, #24
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	20003000 	.word	0x20003000
 8000bfc:	00000400 	.word	0x00000400
 8000c00:	20000e3c 	.word	0x20000e3c
 8000c04:	200015d0 	.word	0x200015d0

08000c08 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c0c:	4b03      	ldr	r3, [pc, #12]	@ (8000c1c <SystemInit+0x14>)
 8000c0e:	2280      	movs	r2, #128	@ 0x80
 8000c10:	0512      	lsls	r2, r2, #20
 8000c12:	609a      	str	r2, [r3, #8]
#endif
}
 8000c14:	46c0      	nop			@ (mov r8, r8)
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	46c0      	nop			@ (mov r8, r8)
 8000c1c:	e000ed00 	.word	0xe000ed00

08000c20 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c20:	480d      	ldr	r0, [pc, #52]	@ (8000c58 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c22:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c24:	f7ff fff0 	bl	8000c08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000c28:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000c2a:	e003      	b.n	8000c34 <LoopCopyDataInit>

08000c2c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000c2c:	4b0b      	ldr	r3, [pc, #44]	@ (8000c5c <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8000c2e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000c30:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000c32:	3104      	adds	r1, #4

08000c34 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000c34:	480a      	ldr	r0, [pc, #40]	@ (8000c60 <LoopForever+0xa>)
  ldr r3, =_edata
 8000c36:	4b0b      	ldr	r3, [pc, #44]	@ (8000c64 <LoopForever+0xe>)
  adds r2, r0, r1
 8000c38:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000c3a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000c3c:	d3f6      	bcc.n	8000c2c <CopyDataInit>
  ldr r2, =_sbss
 8000c3e:	4a0a      	ldr	r2, [pc, #40]	@ (8000c68 <LoopForever+0x12>)
  b LoopFillZerobss
 8000c40:	e002      	b.n	8000c48 <LoopFillZerobss>

08000c42 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000c42:	2300      	movs	r3, #0
  str  r3, [r2]
 8000c44:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c46:	3204      	adds	r2, #4

08000c48 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8000c48:	4b08      	ldr	r3, [pc, #32]	@ (8000c6c <LoopForever+0x16>)
  cmp r2, r3
 8000c4a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000c4c:	d3f9      	bcc.n	8000c42 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000c4e:	f003 ff8b 	bl	8004b68 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c52:	f7ff fd55 	bl	8000700 <main>

08000c56 <LoopForever>:

LoopForever:
    b LoopForever
 8000c56:	e7fe      	b.n	8000c56 <LoopForever>
  ldr   r0, =_estack
 8000c58:	20003000 	.word	0x20003000
  ldr r3, =_sidata
 8000c5c:	08005184 	.word	0x08005184
  ldr r0, =_sdata
 8000c60:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000c64:	2000006c 	.word	0x2000006c
  ldr r2, =_sbss
 8000c68:	2000006c 	.word	0x2000006c
  ldr r3, = _ebss
 8000c6c:	200015d0 	.word	0x200015d0

08000c70 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c70:	e7fe      	b.n	8000c70 <ADC1_IRQHandler>

08000c72 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c72:	b580      	push	{r7, lr}
 8000c74:	b082      	sub	sp, #8
 8000c76:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c78:	1dfb      	adds	r3, r7, #7
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c7e:	2003      	movs	r0, #3
 8000c80:	f7ff feaa 	bl	80009d8 <HAL_InitTick>
 8000c84:	1e03      	subs	r3, r0, #0
 8000c86:	d003      	beq.n	8000c90 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8000c88:	1dfb      	adds	r3, r7, #7
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	701a      	strb	r2, [r3, #0]
 8000c8e:	e001      	b.n	8000c94 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c90:	f7ff fe34 	bl	80008fc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c94:	1dfb      	adds	r3, r7, #7
 8000c96:	781b      	ldrb	r3, [r3, #0]
}
 8000c98:	0018      	movs	r0, r3
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	b002      	add	sp, #8
 8000c9e:	bd80      	pop	{r7, pc}

08000ca0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ca4:	4b05      	ldr	r3, [pc, #20]	@ (8000cbc <HAL_IncTick+0x1c>)
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	001a      	movs	r2, r3
 8000caa:	4b05      	ldr	r3, [pc, #20]	@ (8000cc0 <HAL_IncTick+0x20>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	18d2      	adds	r2, r2, r3
 8000cb0:	4b03      	ldr	r3, [pc, #12]	@ (8000cc0 <HAL_IncTick+0x20>)
 8000cb2:	601a      	str	r2, [r3, #0]
}
 8000cb4:	46c0      	nop			@ (mov r8, r8)
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	46c0      	nop			@ (mov r8, r8)
 8000cbc:	20000008 	.word	0x20000008
 8000cc0:	20000e40 	.word	0x20000e40

08000cc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  return uwTick;
 8000cc8:	4b02      	ldr	r3, [pc, #8]	@ (8000cd4 <HAL_GetTick+0x10>)
 8000cca:	681b      	ldr	r3, [r3, #0]
}
 8000ccc:	0018      	movs	r0, r3
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	46c0      	nop			@ (mov r8, r8)
 8000cd4:	20000e40 	.word	0x20000e40

08000cd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	0002      	movs	r2, r0
 8000ce0:	1dfb      	adds	r3, r7, #7
 8000ce2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ce4:	1dfb      	adds	r3, r7, #7
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	2b7f      	cmp	r3, #127	@ 0x7f
 8000cea:	d809      	bhi.n	8000d00 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cec:	1dfb      	adds	r3, r7, #7
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	001a      	movs	r2, r3
 8000cf2:	231f      	movs	r3, #31
 8000cf4:	401a      	ands	r2, r3
 8000cf6:	4b04      	ldr	r3, [pc, #16]	@ (8000d08 <__NVIC_EnableIRQ+0x30>)
 8000cf8:	2101      	movs	r1, #1
 8000cfa:	4091      	lsls	r1, r2
 8000cfc:	000a      	movs	r2, r1
 8000cfe:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000d00:	46c0      	nop			@ (mov r8, r8)
 8000d02:	46bd      	mov	sp, r7
 8000d04:	b002      	add	sp, #8
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	e000e100 	.word	0xe000e100

08000d0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d0c:	b590      	push	{r4, r7, lr}
 8000d0e:	b083      	sub	sp, #12
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	0002      	movs	r2, r0
 8000d14:	6039      	str	r1, [r7, #0]
 8000d16:	1dfb      	adds	r3, r7, #7
 8000d18:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d1a:	1dfb      	adds	r3, r7, #7
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	2b7f      	cmp	r3, #127	@ 0x7f
 8000d20:	d828      	bhi.n	8000d74 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d22:	4a2f      	ldr	r2, [pc, #188]	@ (8000de0 <__NVIC_SetPriority+0xd4>)
 8000d24:	1dfb      	adds	r3, r7, #7
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	b25b      	sxtb	r3, r3
 8000d2a:	089b      	lsrs	r3, r3, #2
 8000d2c:	33c0      	adds	r3, #192	@ 0xc0
 8000d2e:	009b      	lsls	r3, r3, #2
 8000d30:	589b      	ldr	r3, [r3, r2]
 8000d32:	1dfa      	adds	r2, r7, #7
 8000d34:	7812      	ldrb	r2, [r2, #0]
 8000d36:	0011      	movs	r1, r2
 8000d38:	2203      	movs	r2, #3
 8000d3a:	400a      	ands	r2, r1
 8000d3c:	00d2      	lsls	r2, r2, #3
 8000d3e:	21ff      	movs	r1, #255	@ 0xff
 8000d40:	4091      	lsls	r1, r2
 8000d42:	000a      	movs	r2, r1
 8000d44:	43d2      	mvns	r2, r2
 8000d46:	401a      	ands	r2, r3
 8000d48:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	019b      	lsls	r3, r3, #6
 8000d4e:	22ff      	movs	r2, #255	@ 0xff
 8000d50:	401a      	ands	r2, r3
 8000d52:	1dfb      	adds	r3, r7, #7
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	0018      	movs	r0, r3
 8000d58:	2303      	movs	r3, #3
 8000d5a:	4003      	ands	r3, r0
 8000d5c:	00db      	lsls	r3, r3, #3
 8000d5e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d60:	481f      	ldr	r0, [pc, #124]	@ (8000de0 <__NVIC_SetPriority+0xd4>)
 8000d62:	1dfb      	adds	r3, r7, #7
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	b25b      	sxtb	r3, r3
 8000d68:	089b      	lsrs	r3, r3, #2
 8000d6a:	430a      	orrs	r2, r1
 8000d6c:	33c0      	adds	r3, #192	@ 0xc0
 8000d6e:	009b      	lsls	r3, r3, #2
 8000d70:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000d72:	e031      	b.n	8000dd8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d74:	4a1b      	ldr	r2, [pc, #108]	@ (8000de4 <__NVIC_SetPriority+0xd8>)
 8000d76:	1dfb      	adds	r3, r7, #7
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	0019      	movs	r1, r3
 8000d7c:	230f      	movs	r3, #15
 8000d7e:	400b      	ands	r3, r1
 8000d80:	3b08      	subs	r3, #8
 8000d82:	089b      	lsrs	r3, r3, #2
 8000d84:	3306      	adds	r3, #6
 8000d86:	009b      	lsls	r3, r3, #2
 8000d88:	18d3      	adds	r3, r2, r3
 8000d8a:	3304      	adds	r3, #4
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	1dfa      	adds	r2, r7, #7
 8000d90:	7812      	ldrb	r2, [r2, #0]
 8000d92:	0011      	movs	r1, r2
 8000d94:	2203      	movs	r2, #3
 8000d96:	400a      	ands	r2, r1
 8000d98:	00d2      	lsls	r2, r2, #3
 8000d9a:	21ff      	movs	r1, #255	@ 0xff
 8000d9c:	4091      	lsls	r1, r2
 8000d9e:	000a      	movs	r2, r1
 8000da0:	43d2      	mvns	r2, r2
 8000da2:	401a      	ands	r2, r3
 8000da4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	019b      	lsls	r3, r3, #6
 8000daa:	22ff      	movs	r2, #255	@ 0xff
 8000dac:	401a      	ands	r2, r3
 8000dae:	1dfb      	adds	r3, r7, #7
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	0018      	movs	r0, r3
 8000db4:	2303      	movs	r3, #3
 8000db6:	4003      	ands	r3, r0
 8000db8:	00db      	lsls	r3, r3, #3
 8000dba:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000dbc:	4809      	ldr	r0, [pc, #36]	@ (8000de4 <__NVIC_SetPriority+0xd8>)
 8000dbe:	1dfb      	adds	r3, r7, #7
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	001c      	movs	r4, r3
 8000dc4:	230f      	movs	r3, #15
 8000dc6:	4023      	ands	r3, r4
 8000dc8:	3b08      	subs	r3, #8
 8000dca:	089b      	lsrs	r3, r3, #2
 8000dcc:	430a      	orrs	r2, r1
 8000dce:	3306      	adds	r3, #6
 8000dd0:	009b      	lsls	r3, r3, #2
 8000dd2:	18c3      	adds	r3, r0, r3
 8000dd4:	3304      	adds	r3, #4
 8000dd6:	601a      	str	r2, [r3, #0]
}
 8000dd8:	46c0      	nop			@ (mov r8, r8)
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	b003      	add	sp, #12
 8000dde:	bd90      	pop	{r4, r7, pc}
 8000de0:	e000e100 	.word	0xe000e100
 8000de4:	e000ed00 	.word	0xe000ed00

08000de8 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b084      	sub	sp, #16
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	60b9      	str	r1, [r7, #8]
 8000df0:	607a      	str	r2, [r7, #4]
 8000df2:	210f      	movs	r1, #15
 8000df4:	187b      	adds	r3, r7, r1
 8000df6:	1c02      	adds	r2, r0, #0
 8000df8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000dfa:	68ba      	ldr	r2, [r7, #8]
 8000dfc:	187b      	adds	r3, r7, r1
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	b25b      	sxtb	r3, r3
 8000e02:	0011      	movs	r1, r2
 8000e04:	0018      	movs	r0, r3
 8000e06:	f7ff ff81 	bl	8000d0c <__NVIC_SetPriority>
}
 8000e0a:	46c0      	nop			@ (mov r8, r8)
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	b004      	add	sp, #16
 8000e10:	bd80      	pop	{r7, pc}

08000e12 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e12:	b580      	push	{r7, lr}
 8000e14:	b082      	sub	sp, #8
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	0002      	movs	r2, r0
 8000e1a:	1dfb      	adds	r3, r7, #7
 8000e1c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e1e:	1dfb      	adds	r3, r7, #7
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	b25b      	sxtb	r3, r3
 8000e24:	0018      	movs	r0, r3
 8000e26:	f7ff ff57 	bl	8000cd8 <__NVIC_EnableIRQ>
}
 8000e2a:	46c0      	nop			@ (mov r8, r8)
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	b002      	add	sp, #8
 8000e30:	bd80      	pop	{r7, pc}
	...

08000e34 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b086      	sub	sp, #24
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
 8000e3c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000e42:	e153      	b.n	80010ec <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	2101      	movs	r1, #1
 8000e4a:	693a      	ldr	r2, [r7, #16]
 8000e4c:	4091      	lsls	r1, r2
 8000e4e:	000a      	movs	r2, r1
 8000e50:	4013      	ands	r3, r2
 8000e52:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d100      	bne.n	8000e5c <HAL_GPIO_Init+0x28>
 8000e5a:	e144      	b.n	80010e6 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	2b02      	cmp	r3, #2
 8000e62:	d003      	beq.n	8000e6c <HAL_GPIO_Init+0x38>
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	2b12      	cmp	r3, #18
 8000e6a:	d125      	bne.n	8000eb8 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8000e6c:	693b      	ldr	r3, [r7, #16]
 8000e6e:	08da      	lsrs	r2, r3, #3
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	3208      	adds	r2, #8
 8000e74:	0092      	lsls	r2, r2, #2
 8000e76:	58d3      	ldr	r3, [r2, r3]
 8000e78:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * 4U)) ;
 8000e7a:	693b      	ldr	r3, [r7, #16]
 8000e7c:	2207      	movs	r2, #7
 8000e7e:	4013      	ands	r3, r2
 8000e80:	009b      	lsls	r3, r3, #2
 8000e82:	220f      	movs	r2, #15
 8000e84:	409a      	lsls	r2, r3
 8000e86:	0013      	movs	r3, r2
 8000e88:	43da      	mvns	r2, r3
 8000e8a:	697b      	ldr	r3, [r7, #20]
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	691b      	ldr	r3, [r3, #16]
 8000e94:	220f      	movs	r2, #15
 8000e96:	401a      	ands	r2, r3
 8000e98:	693b      	ldr	r3, [r7, #16]
 8000e9a:	2107      	movs	r1, #7
 8000e9c:	400b      	ands	r3, r1
 8000e9e:	009b      	lsls	r3, r3, #2
 8000ea0:	409a      	lsls	r2, r3
 8000ea2:	0013      	movs	r3, r2
 8000ea4:	697a      	ldr	r2, [r7, #20]
 8000ea6:	4313      	orrs	r3, r2
 8000ea8:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8000eaa:	693b      	ldr	r3, [r7, #16]
 8000eac:	08da      	lsrs	r2, r3, #3
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	3208      	adds	r2, #8
 8000eb2:	0092      	lsls	r2, r2, #2
 8000eb4:	6979      	ldr	r1, [r7, #20]
 8000eb6:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000ebe:	693b      	ldr	r3, [r7, #16]
 8000ec0:	005b      	lsls	r3, r3, #1
 8000ec2:	2203      	movs	r2, #3
 8000ec4:	409a      	lsls	r2, r3
 8000ec6:	0013      	movs	r3, r2
 8000ec8:	43da      	mvns	r2, r3
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	4013      	ands	r3, r2
 8000ece:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	2203      	movs	r2, #3
 8000ed6:	401a      	ands	r2, r3
 8000ed8:	693b      	ldr	r3, [r7, #16]
 8000eda:	005b      	lsls	r3, r3, #1
 8000edc:	409a      	lsls	r2, r3
 8000ede:	0013      	movs	r3, r2
 8000ee0:	697a      	ldr	r2, [r7, #20]
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	697a      	ldr	r2, [r7, #20]
 8000eea:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	2b01      	cmp	r3, #1
 8000ef2:	d00b      	beq.n	8000f0c <HAL_GPIO_Init+0xd8>
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	2b02      	cmp	r3, #2
 8000efa:	d007      	beq.n	8000f0c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f00:	2b11      	cmp	r3, #17
 8000f02:	d003      	beq.n	8000f0c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	2b12      	cmp	r3, #18
 8000f0a:	d130      	bne.n	8000f6e <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	689b      	ldr	r3, [r3, #8]
 8000f10:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000f12:	693b      	ldr	r3, [r7, #16]
 8000f14:	005b      	lsls	r3, r3, #1
 8000f16:	2203      	movs	r2, #3
 8000f18:	409a      	lsls	r2, r3
 8000f1a:	0013      	movs	r3, r2
 8000f1c:	43da      	mvns	r2, r3
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	4013      	ands	r3, r2
 8000f22:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	68da      	ldr	r2, [r3, #12]
 8000f28:	693b      	ldr	r3, [r7, #16]
 8000f2a:	005b      	lsls	r3, r3, #1
 8000f2c:	409a      	lsls	r2, r3
 8000f2e:	0013      	movs	r3, r2
 8000f30:	697a      	ldr	r2, [r7, #20]
 8000f32:	4313      	orrs	r3, r2
 8000f34:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	697a      	ldr	r2, [r7, #20]
 8000f3a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f42:	2201      	movs	r2, #1
 8000f44:	693b      	ldr	r3, [r7, #16]
 8000f46:	409a      	lsls	r2, r3
 8000f48:	0013      	movs	r3, r2
 8000f4a:	43da      	mvns	r2, r3
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	4013      	ands	r3, r2
 8000f50:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	091b      	lsrs	r3, r3, #4
 8000f58:	2201      	movs	r2, #1
 8000f5a:	401a      	ands	r2, r3
 8000f5c:	693b      	ldr	r3, [r7, #16]
 8000f5e:	409a      	lsls	r2, r3
 8000f60:	0013      	movs	r3, r2
 8000f62:	697a      	ldr	r2, [r7, #20]
 8000f64:	4313      	orrs	r3, r2
 8000f66:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	697a      	ldr	r2, [r7, #20]
 8000f6c:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	2b03      	cmp	r3, #3
 8000f74:	d017      	beq.n	8000fa6 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	68db      	ldr	r3, [r3, #12]
 8000f7a:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f7c:	693b      	ldr	r3, [r7, #16]
 8000f7e:	005b      	lsls	r3, r3, #1
 8000f80:	2203      	movs	r2, #3
 8000f82:	409a      	lsls	r2, r3
 8000f84:	0013      	movs	r3, r2
 8000f86:	43da      	mvns	r2, r3
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	689a      	ldr	r2, [r3, #8]
 8000f92:	693b      	ldr	r3, [r7, #16]
 8000f94:	005b      	lsls	r3, r3, #1
 8000f96:	409a      	lsls	r2, r3
 8000f98:	0013      	movs	r3, r2
 8000f9a:	697a      	ldr	r2, [r7, #20]
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	697a      	ldr	r2, [r7, #20]
 8000fa4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	685a      	ldr	r2, [r3, #4]
 8000faa:	2380      	movs	r3, #128	@ 0x80
 8000fac:	055b      	lsls	r3, r3, #21
 8000fae:	4013      	ands	r3, r2
 8000fb0:	d100      	bne.n	8000fb4 <HAL_GPIO_Init+0x180>
 8000fb2:	e098      	b.n	80010e6 <HAL_GPIO_Init+0x2b2>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8000fb4:	4a53      	ldr	r2, [pc, #332]	@ (8001104 <HAL_GPIO_Init+0x2d0>)
 8000fb6:	693b      	ldr	r3, [r7, #16]
 8000fb8:	089b      	lsrs	r3, r3, #2
 8000fba:	3318      	adds	r3, #24
 8000fbc:	009b      	lsls	r3, r3, #2
 8000fbe:	589b      	ldr	r3, [r3, r2]
 8000fc0:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8000fc2:	693b      	ldr	r3, [r7, #16]
 8000fc4:	2203      	movs	r2, #3
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	00db      	lsls	r3, r3, #3
 8000fca:	220f      	movs	r2, #15
 8000fcc:	409a      	lsls	r2, r3
 8000fce:	0013      	movs	r3, r2
 8000fd0:	43da      	mvns	r2, r3
 8000fd2:	697b      	ldr	r3, [r7, #20]
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8000fd8:	687a      	ldr	r2, [r7, #4]
 8000fda:	23a0      	movs	r3, #160	@ 0xa0
 8000fdc:	05db      	lsls	r3, r3, #23
 8000fde:	429a      	cmp	r2, r3
 8000fe0:	d019      	beq.n	8001016 <HAL_GPIO_Init+0x1e2>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4a48      	ldr	r2, [pc, #288]	@ (8001108 <HAL_GPIO_Init+0x2d4>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d013      	beq.n	8001012 <HAL_GPIO_Init+0x1de>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4a47      	ldr	r2, [pc, #284]	@ (800110c <HAL_GPIO_Init+0x2d8>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d00d      	beq.n	800100e <HAL_GPIO_Init+0x1da>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4a46      	ldr	r2, [pc, #280]	@ (8001110 <HAL_GPIO_Init+0x2dc>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d007      	beq.n	800100a <HAL_GPIO_Init+0x1d6>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4a45      	ldr	r2, [pc, #276]	@ (8001114 <HAL_GPIO_Init+0x2e0>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d101      	bne.n	8001006 <HAL_GPIO_Init+0x1d2>
 8001002:	2305      	movs	r3, #5
 8001004:	e008      	b.n	8001018 <HAL_GPIO_Init+0x1e4>
 8001006:	2306      	movs	r3, #6
 8001008:	e006      	b.n	8001018 <HAL_GPIO_Init+0x1e4>
 800100a:	2303      	movs	r3, #3
 800100c:	e004      	b.n	8001018 <HAL_GPIO_Init+0x1e4>
 800100e:	2302      	movs	r3, #2
 8001010:	e002      	b.n	8001018 <HAL_GPIO_Init+0x1e4>
 8001012:	2301      	movs	r3, #1
 8001014:	e000      	b.n	8001018 <HAL_GPIO_Init+0x1e4>
 8001016:	2300      	movs	r3, #0
 8001018:	693a      	ldr	r2, [r7, #16]
 800101a:	2103      	movs	r1, #3
 800101c:	400a      	ands	r2, r1
 800101e:	00d2      	lsls	r2, r2, #3
 8001020:	4093      	lsls	r3, r2
 8001022:	697a      	ldr	r2, [r7, #20]
 8001024:	4313      	orrs	r3, r2
 8001026:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001028:	4936      	ldr	r1, [pc, #216]	@ (8001104 <HAL_GPIO_Init+0x2d0>)
 800102a:	693b      	ldr	r3, [r7, #16]
 800102c:	089b      	lsrs	r3, r3, #2
 800102e:	3318      	adds	r3, #24
 8001030:	009b      	lsls	r3, r3, #2
 8001032:	697a      	ldr	r2, [r7, #20]
 8001034:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8001036:	4a33      	ldr	r2, [pc, #204]	@ (8001104 <HAL_GPIO_Init+0x2d0>)
 8001038:	2380      	movs	r3, #128	@ 0x80
 800103a:	58d3      	ldr	r3, [r2, r3]
 800103c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	43da      	mvns	r2, r3
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	4013      	ands	r3, r2
 8001046:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	685a      	ldr	r2, [r3, #4]
 800104c:	2380      	movs	r3, #128	@ 0x80
 800104e:	025b      	lsls	r3, r3, #9
 8001050:	4013      	ands	r3, r2
 8001052:	d003      	beq.n	800105c <HAL_GPIO_Init+0x228>
        {
          tmp |= iocurrent;
 8001054:	697a      	ldr	r2, [r7, #20]
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	4313      	orrs	r3, r2
 800105a:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 800105c:	4929      	ldr	r1, [pc, #164]	@ (8001104 <HAL_GPIO_Init+0x2d0>)
 800105e:	2280      	movs	r2, #128	@ 0x80
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8001064:	4a27      	ldr	r2, [pc, #156]	@ (8001104 <HAL_GPIO_Init+0x2d0>)
 8001066:	2384      	movs	r3, #132	@ 0x84
 8001068:	58d3      	ldr	r3, [r2, r3]
 800106a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	43da      	mvns	r2, r3
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	4013      	ands	r3, r2
 8001074:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	685a      	ldr	r2, [r3, #4]
 800107a:	2380      	movs	r3, #128	@ 0x80
 800107c:	029b      	lsls	r3, r3, #10
 800107e:	4013      	ands	r3, r2
 8001080:	d003      	beq.n	800108a <HAL_GPIO_Init+0x256>
        {
          tmp |= iocurrent;
 8001082:	697a      	ldr	r2, [r7, #20]
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	4313      	orrs	r3, r2
 8001088:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 800108a:	491e      	ldr	r1, [pc, #120]	@ (8001104 <HAL_GPIO_Init+0x2d0>)
 800108c:	2284      	movs	r2, #132	@ 0x84
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001092:	4b1c      	ldr	r3, [pc, #112]	@ (8001104 <HAL_GPIO_Init+0x2d0>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	43da      	mvns	r2, r3
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	4013      	ands	r3, r2
 80010a0:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	685a      	ldr	r2, [r3, #4]
 80010a6:	2380      	movs	r3, #128	@ 0x80
 80010a8:	035b      	lsls	r3, r3, #13
 80010aa:	4013      	ands	r3, r2
 80010ac:	d003      	beq.n	80010b6 <HAL_GPIO_Init+0x282>
        {
          tmp |= iocurrent;
 80010ae:	697a      	ldr	r2, [r7, #20]
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	4313      	orrs	r3, r2
 80010b4:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 80010b6:	4b13      	ldr	r3, [pc, #76]	@ (8001104 <HAL_GPIO_Init+0x2d0>)
 80010b8:	697a      	ldr	r2, [r7, #20]
 80010ba:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 80010bc:	4b11      	ldr	r3, [pc, #68]	@ (8001104 <HAL_GPIO_Init+0x2d0>)
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	43da      	mvns	r2, r3
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	4013      	ands	r3, r2
 80010ca:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	685a      	ldr	r2, [r3, #4]
 80010d0:	2380      	movs	r3, #128	@ 0x80
 80010d2:	039b      	lsls	r3, r3, #14
 80010d4:	4013      	ands	r3, r2
 80010d6:	d003      	beq.n	80010e0 <HAL_GPIO_Init+0x2ac>
        {
          tmp |= iocurrent;
 80010d8:	697a      	ldr	r2, [r7, #20]
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	4313      	orrs	r3, r2
 80010de:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 80010e0:	4b08      	ldr	r3, [pc, #32]	@ (8001104 <HAL_GPIO_Init+0x2d0>)
 80010e2:	697a      	ldr	r2, [r7, #20]
 80010e4:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	3301      	adds	r3, #1
 80010ea:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	693b      	ldr	r3, [r7, #16]
 80010f2:	40da      	lsrs	r2, r3
 80010f4:	1e13      	subs	r3, r2, #0
 80010f6:	d000      	beq.n	80010fa <HAL_GPIO_Init+0x2c6>
 80010f8:	e6a4      	b.n	8000e44 <HAL_GPIO_Init+0x10>
  }
}
 80010fa:	46c0      	nop			@ (mov r8, r8)
 80010fc:	46c0      	nop			@ (mov r8, r8)
 80010fe:	46bd      	mov	sp, r7
 8001100:	b006      	add	sp, #24
 8001102:	bd80      	pop	{r7, pc}
 8001104:	40021800 	.word	0x40021800
 8001108:	50000400 	.word	0x50000400
 800110c:	50000800 	.word	0x50000800
 8001110:	50000c00 	.word	0x50000c00
 8001114:	50001400 	.word	0x50001400

08001118 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	000a      	movs	r2, r1
 8001122:	1cbb      	adds	r3, r7, #2
 8001124:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	691b      	ldr	r3, [r3, #16]
 800112a:	1cba      	adds	r2, r7, #2
 800112c:	8812      	ldrh	r2, [r2, #0]
 800112e:	4013      	ands	r3, r2
 8001130:	d004      	beq.n	800113c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001132:	230f      	movs	r3, #15
 8001134:	18fb      	adds	r3, r7, r3
 8001136:	2201      	movs	r2, #1
 8001138:	701a      	strb	r2, [r3, #0]
 800113a:	e003      	b.n	8001144 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800113c:	230f      	movs	r3, #15
 800113e:	18fb      	adds	r3, r7, r3
 8001140:	2200      	movs	r2, #0
 8001142:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001144:	230f      	movs	r3, #15
 8001146:	18fb      	adds	r3, r7, r3
 8001148:	781b      	ldrb	r3, [r3, #0]
}
 800114a:	0018      	movs	r0, r3
 800114c:	46bd      	mov	sp, r7
 800114e:	b004      	add	sp, #16
 8001150:	bd80      	pop	{r7, pc}

08001152 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001152:	b580      	push	{r7, lr}
 8001154:	b082      	sub	sp, #8
 8001156:	af00      	add	r7, sp, #0
 8001158:	6078      	str	r0, [r7, #4]
 800115a:	0008      	movs	r0, r1
 800115c:	0011      	movs	r1, r2
 800115e:	1cbb      	adds	r3, r7, #2
 8001160:	1c02      	adds	r2, r0, #0
 8001162:	801a      	strh	r2, [r3, #0]
 8001164:	1c7b      	adds	r3, r7, #1
 8001166:	1c0a      	adds	r2, r1, #0
 8001168:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800116a:	1c7b      	adds	r3, r7, #1
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d004      	beq.n	800117c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001172:	1cbb      	adds	r3, r7, #2
 8001174:	881a      	ldrh	r2, [r3, #0]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800117a:	e003      	b.n	8001184 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800117c:	1cbb      	adds	r3, r7, #2
 800117e:	881a      	ldrh	r2, [r3, #0]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001184:	46c0      	nop			@ (mov r8, r8)
 8001186:	46bd      	mov	sp, r7
 8001188:	b002      	add	sp, #8
 800118a:	bd80      	pop	{r7, pc}

0800118c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	0002      	movs	r2, r0
 8001194:	1dbb      	adds	r3, r7, #6
 8001196:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8001198:	4b10      	ldr	r3, [pc, #64]	@ (80011dc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800119a:	68db      	ldr	r3, [r3, #12]
 800119c:	1dba      	adds	r2, r7, #6
 800119e:	8812      	ldrh	r2, [r2, #0]
 80011a0:	4013      	ands	r3, r2
 80011a2:	d008      	beq.n	80011b6 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80011a4:	4b0d      	ldr	r3, [pc, #52]	@ (80011dc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80011a6:	1dba      	adds	r2, r7, #6
 80011a8:	8812      	ldrh	r2, [r2, #0]
 80011aa:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80011ac:	1dbb      	adds	r3, r7, #6
 80011ae:	881b      	ldrh	r3, [r3, #0]
 80011b0:	0018      	movs	r0, r3
 80011b2:	f000 f815 	bl	80011e0 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 80011b6:	4b09      	ldr	r3, [pc, #36]	@ (80011dc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80011b8:	691b      	ldr	r3, [r3, #16]
 80011ba:	1dba      	adds	r2, r7, #6
 80011bc:	8812      	ldrh	r2, [r2, #0]
 80011be:	4013      	ands	r3, r2
 80011c0:	d008      	beq.n	80011d4 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80011c2:	4b06      	ldr	r3, [pc, #24]	@ (80011dc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80011c4:	1dba      	adds	r2, r7, #6
 80011c6:	8812      	ldrh	r2, [r2, #0]
 80011c8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80011ca:	1dbb      	adds	r3, r7, #6
 80011cc:	881b      	ldrh	r3, [r3, #0]
 80011ce:	0018      	movs	r0, r3
 80011d0:	f000 f810 	bl	80011f4 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80011d4:	46c0      	nop			@ (mov r8, r8)
 80011d6:	46bd      	mov	sp, r7
 80011d8:	b002      	add	sp, #8
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	40021800 	.word	0x40021800

080011e0 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	0002      	movs	r2, r0
 80011e8:	1dbb      	adds	r3, r7, #6
 80011ea:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 80011ec:	46c0      	nop			@ (mov r8, r8)
 80011ee:	46bd      	mov	sp, r7
 80011f0:	b002      	add	sp, #8
 80011f2:	bd80      	pop	{r7, pc}

080011f4 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	0002      	movs	r2, r0
 80011fc:	1dbb      	adds	r3, r7, #6
 80011fe:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8001200:	46c0      	nop			@ (mov r8, r8)
 8001202:	46bd      	mov	sp, r7
 8001204:	b002      	add	sp, #8
 8001206:	bd80      	pop	{r7, pc}

08001208 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b086      	sub	sp, #24
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d101      	bne.n	800121a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001216:	2301      	movs	r3, #1
 8001218:	e1d0      	b.n	80015bc <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	2201      	movs	r2, #1
 8001220:	4013      	ands	r3, r2
 8001222:	d100      	bne.n	8001226 <HAL_RCC_OscConfig+0x1e>
 8001224:	e069      	b.n	80012fa <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001226:	4bc8      	ldr	r3, [pc, #800]	@ (8001548 <HAL_RCC_OscConfig+0x340>)
 8001228:	689b      	ldr	r3, [r3, #8]
 800122a:	2238      	movs	r2, #56	@ 0x38
 800122c:	4013      	ands	r3, r2
 800122e:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	2b08      	cmp	r3, #8
 8001234:	d105      	bne.n	8001242 <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d15d      	bne.n	80012fa <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
 8001240:	e1bc      	b.n	80015bc <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	685a      	ldr	r2, [r3, #4]
 8001246:	2380      	movs	r3, #128	@ 0x80
 8001248:	025b      	lsls	r3, r3, #9
 800124a:	429a      	cmp	r2, r3
 800124c:	d107      	bne.n	800125e <HAL_RCC_OscConfig+0x56>
 800124e:	4bbe      	ldr	r3, [pc, #760]	@ (8001548 <HAL_RCC_OscConfig+0x340>)
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	4bbd      	ldr	r3, [pc, #756]	@ (8001548 <HAL_RCC_OscConfig+0x340>)
 8001254:	2180      	movs	r1, #128	@ 0x80
 8001256:	0249      	lsls	r1, r1, #9
 8001258:	430a      	orrs	r2, r1
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	e020      	b.n	80012a0 <HAL_RCC_OscConfig+0x98>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	685a      	ldr	r2, [r3, #4]
 8001262:	23a0      	movs	r3, #160	@ 0xa0
 8001264:	02db      	lsls	r3, r3, #11
 8001266:	429a      	cmp	r2, r3
 8001268:	d10e      	bne.n	8001288 <HAL_RCC_OscConfig+0x80>
 800126a:	4bb7      	ldr	r3, [pc, #732]	@ (8001548 <HAL_RCC_OscConfig+0x340>)
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	4bb6      	ldr	r3, [pc, #728]	@ (8001548 <HAL_RCC_OscConfig+0x340>)
 8001270:	2180      	movs	r1, #128	@ 0x80
 8001272:	02c9      	lsls	r1, r1, #11
 8001274:	430a      	orrs	r2, r1
 8001276:	601a      	str	r2, [r3, #0]
 8001278:	4bb3      	ldr	r3, [pc, #716]	@ (8001548 <HAL_RCC_OscConfig+0x340>)
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	4bb2      	ldr	r3, [pc, #712]	@ (8001548 <HAL_RCC_OscConfig+0x340>)
 800127e:	2180      	movs	r1, #128	@ 0x80
 8001280:	0249      	lsls	r1, r1, #9
 8001282:	430a      	orrs	r2, r1
 8001284:	601a      	str	r2, [r3, #0]
 8001286:	e00b      	b.n	80012a0 <HAL_RCC_OscConfig+0x98>
 8001288:	4baf      	ldr	r3, [pc, #700]	@ (8001548 <HAL_RCC_OscConfig+0x340>)
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	4bae      	ldr	r3, [pc, #696]	@ (8001548 <HAL_RCC_OscConfig+0x340>)
 800128e:	49af      	ldr	r1, [pc, #700]	@ (800154c <HAL_RCC_OscConfig+0x344>)
 8001290:	400a      	ands	r2, r1
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	4bac      	ldr	r3, [pc, #688]	@ (8001548 <HAL_RCC_OscConfig+0x340>)
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	4bab      	ldr	r3, [pc, #684]	@ (8001548 <HAL_RCC_OscConfig+0x340>)
 800129a:	49ad      	ldr	r1, [pc, #692]	@ (8001550 <HAL_RCC_OscConfig+0x348>)
 800129c:	400a      	ands	r2, r1
 800129e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d014      	beq.n	80012d2 <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012a8:	f7ff fd0c 	bl	8000cc4 <HAL_GetTick>
 80012ac:	0003      	movs	r3, r0
 80012ae:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80012b0:	e008      	b.n	80012c4 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80012b2:	f7ff fd07 	bl	8000cc4 <HAL_GetTick>
 80012b6:	0002      	movs	r2, r0
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	1ad3      	subs	r3, r2, r3
 80012bc:	2b64      	cmp	r3, #100	@ 0x64
 80012be:	d901      	bls.n	80012c4 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 80012c0:	2303      	movs	r3, #3
 80012c2:	e17b      	b.n	80015bc <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80012c4:	4ba0      	ldr	r3, [pc, #640]	@ (8001548 <HAL_RCC_OscConfig+0x340>)
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	2380      	movs	r3, #128	@ 0x80
 80012ca:	029b      	lsls	r3, r3, #10
 80012cc:	4013      	ands	r3, r2
 80012ce:	d0f0      	beq.n	80012b2 <HAL_RCC_OscConfig+0xaa>
 80012d0:	e013      	b.n	80012fa <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012d2:	f7ff fcf7 	bl	8000cc4 <HAL_GetTick>
 80012d6:	0003      	movs	r3, r0
 80012d8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80012da:	e008      	b.n	80012ee <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80012dc:	f7ff fcf2 	bl	8000cc4 <HAL_GetTick>
 80012e0:	0002      	movs	r2, r0
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	2b64      	cmp	r3, #100	@ 0x64
 80012e8:	d901      	bls.n	80012ee <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 80012ea:	2303      	movs	r3, #3
 80012ec:	e166      	b.n	80015bc <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80012ee:	4b96      	ldr	r3, [pc, #600]	@ (8001548 <HAL_RCC_OscConfig+0x340>)
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	2380      	movs	r3, #128	@ 0x80
 80012f4:	029b      	lsls	r3, r3, #10
 80012f6:	4013      	ands	r3, r2
 80012f8:	d1f0      	bne.n	80012dc <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	2202      	movs	r2, #2
 8001300:	4013      	ands	r3, r2
 8001302:	d100      	bne.n	8001306 <HAL_RCC_OscConfig+0xfe>
 8001304:	e086      	b.n	8001414 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001306:	4b90      	ldr	r3, [pc, #576]	@ (8001548 <HAL_RCC_OscConfig+0x340>)
 8001308:	689b      	ldr	r3, [r3, #8]
 800130a:	2238      	movs	r2, #56	@ 0x38
 800130c:	4013      	ands	r3, r2
 800130e:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d12f      	bne.n	8001376 <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	68db      	ldr	r3, [r3, #12]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d101      	bne.n	8001322 <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	e14c      	b.n	80015bc <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001322:	4b89      	ldr	r3, [pc, #548]	@ (8001548 <HAL_RCC_OscConfig+0x340>)
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	4a8b      	ldr	r2, [pc, #556]	@ (8001554 <HAL_RCC_OscConfig+0x34c>)
 8001328:	4013      	ands	r3, r2
 800132a:	0019      	movs	r1, r3
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	695b      	ldr	r3, [r3, #20]
 8001330:	021a      	lsls	r2, r3, #8
 8001332:	4b85      	ldr	r3, [pc, #532]	@ (8001548 <HAL_RCC_OscConfig+0x340>)
 8001334:	430a      	orrs	r2, r1
 8001336:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d112      	bne.n	8001364 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800133e:	4b82      	ldr	r3, [pc, #520]	@ (8001548 <HAL_RCC_OscConfig+0x340>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a85      	ldr	r2, [pc, #532]	@ (8001558 <HAL_RCC_OscConfig+0x350>)
 8001344:	4013      	ands	r3, r2
 8001346:	0019      	movs	r1, r3
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	691a      	ldr	r2, [r3, #16]
 800134c:	4b7e      	ldr	r3, [pc, #504]	@ (8001548 <HAL_RCC_OscConfig+0x340>)
 800134e:	430a      	orrs	r2, r1
 8001350:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001352:	4b7d      	ldr	r3, [pc, #500]	@ (8001548 <HAL_RCC_OscConfig+0x340>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	0adb      	lsrs	r3, r3, #11
 8001358:	2207      	movs	r2, #7
 800135a:	4013      	ands	r3, r2
 800135c:	4a7f      	ldr	r2, [pc, #508]	@ (800155c <HAL_RCC_OscConfig+0x354>)
 800135e:	40da      	lsrs	r2, r3
 8001360:	4b7f      	ldr	r3, [pc, #508]	@ (8001560 <HAL_RCC_OscConfig+0x358>)
 8001362:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001364:	4b7f      	ldr	r3, [pc, #508]	@ (8001564 <HAL_RCC_OscConfig+0x35c>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	0018      	movs	r0, r3
 800136a:	f7ff fb35 	bl	80009d8 <HAL_InitTick>
 800136e:	1e03      	subs	r3, r0, #0
 8001370:	d050      	beq.n	8001414 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 8001372:	2301      	movs	r3, #1
 8001374:	e122      	b.n	80015bc <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	68db      	ldr	r3, [r3, #12]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d030      	beq.n	80013e0 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800137e:	4b72      	ldr	r3, [pc, #456]	@ (8001548 <HAL_RCC_OscConfig+0x340>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a75      	ldr	r2, [pc, #468]	@ (8001558 <HAL_RCC_OscConfig+0x350>)
 8001384:	4013      	ands	r3, r2
 8001386:	0019      	movs	r1, r3
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	691a      	ldr	r2, [r3, #16]
 800138c:	4b6e      	ldr	r3, [pc, #440]	@ (8001548 <HAL_RCC_OscConfig+0x340>)
 800138e:	430a      	orrs	r2, r1
 8001390:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 8001392:	4b6d      	ldr	r3, [pc, #436]	@ (8001548 <HAL_RCC_OscConfig+0x340>)
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	4b6c      	ldr	r3, [pc, #432]	@ (8001548 <HAL_RCC_OscConfig+0x340>)
 8001398:	2180      	movs	r1, #128	@ 0x80
 800139a:	0049      	lsls	r1, r1, #1
 800139c:	430a      	orrs	r2, r1
 800139e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013a0:	f7ff fc90 	bl	8000cc4 <HAL_GetTick>
 80013a4:	0003      	movs	r3, r0
 80013a6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80013a8:	e008      	b.n	80013bc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80013aa:	f7ff fc8b 	bl	8000cc4 <HAL_GetTick>
 80013ae:	0002      	movs	r2, r0
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	1ad3      	subs	r3, r2, r3
 80013b4:	2b02      	cmp	r3, #2
 80013b6:	d901      	bls.n	80013bc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80013b8:	2303      	movs	r3, #3
 80013ba:	e0ff      	b.n	80015bc <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80013bc:	4b62      	ldr	r3, [pc, #392]	@ (8001548 <HAL_RCC_OscConfig+0x340>)
 80013be:	681a      	ldr	r2, [r3, #0]
 80013c0:	2380      	movs	r3, #128	@ 0x80
 80013c2:	00db      	lsls	r3, r3, #3
 80013c4:	4013      	ands	r3, r2
 80013c6:	d0f0      	beq.n	80013aa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013c8:	4b5f      	ldr	r3, [pc, #380]	@ (8001548 <HAL_RCC_OscConfig+0x340>)
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	4a61      	ldr	r2, [pc, #388]	@ (8001554 <HAL_RCC_OscConfig+0x34c>)
 80013ce:	4013      	ands	r3, r2
 80013d0:	0019      	movs	r1, r3
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	695b      	ldr	r3, [r3, #20]
 80013d6:	021a      	lsls	r2, r3, #8
 80013d8:	4b5b      	ldr	r3, [pc, #364]	@ (8001548 <HAL_RCC_OscConfig+0x340>)
 80013da:	430a      	orrs	r2, r1
 80013dc:	605a      	str	r2, [r3, #4]
 80013de:	e019      	b.n	8001414 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 80013e0:	4b59      	ldr	r3, [pc, #356]	@ (8001548 <HAL_RCC_OscConfig+0x340>)
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	4b58      	ldr	r3, [pc, #352]	@ (8001548 <HAL_RCC_OscConfig+0x340>)
 80013e6:	4960      	ldr	r1, [pc, #384]	@ (8001568 <HAL_RCC_OscConfig+0x360>)
 80013e8:	400a      	ands	r2, r1
 80013ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013ec:	f7ff fc6a 	bl	8000cc4 <HAL_GetTick>
 80013f0:	0003      	movs	r3, r0
 80013f2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80013f4:	e008      	b.n	8001408 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80013f6:	f7ff fc65 	bl	8000cc4 <HAL_GetTick>
 80013fa:	0002      	movs	r2, r0
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	1ad3      	subs	r3, r2, r3
 8001400:	2b02      	cmp	r3, #2
 8001402:	d901      	bls.n	8001408 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001404:	2303      	movs	r3, #3
 8001406:	e0d9      	b.n	80015bc <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001408:	4b4f      	ldr	r3, [pc, #316]	@ (8001548 <HAL_RCC_OscConfig+0x340>)
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	2380      	movs	r3, #128	@ 0x80
 800140e:	00db      	lsls	r3, r3, #3
 8001410:	4013      	ands	r3, r2
 8001412:	d1f0      	bne.n	80013f6 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	2208      	movs	r2, #8
 800141a:	4013      	ands	r3, r2
 800141c:	d042      	beq.n	80014a4 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 800141e:	4b4a      	ldr	r3, [pc, #296]	@ (8001548 <HAL_RCC_OscConfig+0x340>)
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	2238      	movs	r2, #56	@ 0x38
 8001424:	4013      	ands	r3, r2
 8001426:	2b18      	cmp	r3, #24
 8001428:	d105      	bne.n	8001436 <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	699b      	ldr	r3, [r3, #24]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d138      	bne.n	80014a4 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
 8001434:	e0c2      	b.n	80015bc <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	699b      	ldr	r3, [r3, #24]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d019      	beq.n	8001472 <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800143e:	4b42      	ldr	r3, [pc, #264]	@ (8001548 <HAL_RCC_OscConfig+0x340>)
 8001440:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001442:	4b41      	ldr	r3, [pc, #260]	@ (8001548 <HAL_RCC_OscConfig+0x340>)
 8001444:	2101      	movs	r1, #1
 8001446:	430a      	orrs	r2, r1
 8001448:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800144a:	f7ff fc3b 	bl	8000cc4 <HAL_GetTick>
 800144e:	0003      	movs	r3, r0
 8001450:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001452:	e008      	b.n	8001466 <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001454:	f7ff fc36 	bl	8000cc4 <HAL_GetTick>
 8001458:	0002      	movs	r2, r0
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	1ad3      	subs	r3, r2, r3
 800145e:	2b02      	cmp	r3, #2
 8001460:	d901      	bls.n	8001466 <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 8001462:	2303      	movs	r3, #3
 8001464:	e0aa      	b.n	80015bc <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001466:	4b38      	ldr	r3, [pc, #224]	@ (8001548 <HAL_RCC_OscConfig+0x340>)
 8001468:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800146a:	2202      	movs	r2, #2
 800146c:	4013      	ands	r3, r2
 800146e:	d0f1      	beq.n	8001454 <HAL_RCC_OscConfig+0x24c>
 8001470:	e018      	b.n	80014a4 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001472:	4b35      	ldr	r3, [pc, #212]	@ (8001548 <HAL_RCC_OscConfig+0x340>)
 8001474:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001476:	4b34      	ldr	r3, [pc, #208]	@ (8001548 <HAL_RCC_OscConfig+0x340>)
 8001478:	2101      	movs	r1, #1
 800147a:	438a      	bics	r2, r1
 800147c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800147e:	f7ff fc21 	bl	8000cc4 <HAL_GetTick>
 8001482:	0003      	movs	r3, r0
 8001484:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8001486:	e008      	b.n	800149a <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001488:	f7ff fc1c 	bl	8000cc4 <HAL_GetTick>
 800148c:	0002      	movs	r2, r0
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	2b02      	cmp	r3, #2
 8001494:	d901      	bls.n	800149a <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 8001496:	2303      	movs	r3, #3
 8001498:	e090      	b.n	80015bc <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 800149a:	4b2b      	ldr	r3, [pc, #172]	@ (8001548 <HAL_RCC_OscConfig+0x340>)
 800149c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800149e:	2202      	movs	r2, #2
 80014a0:	4013      	ands	r3, r2
 80014a2:	d1f1      	bne.n	8001488 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	2204      	movs	r2, #4
 80014aa:	4013      	ands	r3, r2
 80014ac:	d100      	bne.n	80014b0 <HAL_RCC_OscConfig+0x2a8>
 80014ae:	e084      	b.n	80015ba <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014b0:	230f      	movs	r3, #15
 80014b2:	18fb      	adds	r3, r7, r3
 80014b4:	2200      	movs	r2, #0
 80014b6:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80014b8:	4b23      	ldr	r3, [pc, #140]	@ (8001548 <HAL_RCC_OscConfig+0x340>)
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	2238      	movs	r2, #56	@ 0x38
 80014be:	4013      	ands	r3, r2
 80014c0:	2b20      	cmp	r3, #32
 80014c2:	d106      	bne.n	80014d2 <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d000      	beq.n	80014ce <HAL_RCC_OscConfig+0x2c6>
 80014cc:	e075      	b.n	80015ba <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	e074      	b.n	80015bc <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	689b      	ldr	r3, [r3, #8]
 80014d6:	2b01      	cmp	r3, #1
 80014d8:	d106      	bne.n	80014e8 <HAL_RCC_OscConfig+0x2e0>
 80014da:	4b1b      	ldr	r3, [pc, #108]	@ (8001548 <HAL_RCC_OscConfig+0x340>)
 80014dc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80014de:	4b1a      	ldr	r3, [pc, #104]	@ (8001548 <HAL_RCC_OscConfig+0x340>)
 80014e0:	2101      	movs	r1, #1
 80014e2:	430a      	orrs	r2, r1
 80014e4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80014e6:	e01c      	b.n	8001522 <HAL_RCC_OscConfig+0x31a>
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	689b      	ldr	r3, [r3, #8]
 80014ec:	2b05      	cmp	r3, #5
 80014ee:	d10c      	bne.n	800150a <HAL_RCC_OscConfig+0x302>
 80014f0:	4b15      	ldr	r3, [pc, #84]	@ (8001548 <HAL_RCC_OscConfig+0x340>)
 80014f2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80014f4:	4b14      	ldr	r3, [pc, #80]	@ (8001548 <HAL_RCC_OscConfig+0x340>)
 80014f6:	2104      	movs	r1, #4
 80014f8:	430a      	orrs	r2, r1
 80014fa:	65da      	str	r2, [r3, #92]	@ 0x5c
 80014fc:	4b12      	ldr	r3, [pc, #72]	@ (8001548 <HAL_RCC_OscConfig+0x340>)
 80014fe:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001500:	4b11      	ldr	r3, [pc, #68]	@ (8001548 <HAL_RCC_OscConfig+0x340>)
 8001502:	2101      	movs	r1, #1
 8001504:	430a      	orrs	r2, r1
 8001506:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001508:	e00b      	b.n	8001522 <HAL_RCC_OscConfig+0x31a>
 800150a:	4b0f      	ldr	r3, [pc, #60]	@ (8001548 <HAL_RCC_OscConfig+0x340>)
 800150c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800150e:	4b0e      	ldr	r3, [pc, #56]	@ (8001548 <HAL_RCC_OscConfig+0x340>)
 8001510:	2101      	movs	r1, #1
 8001512:	438a      	bics	r2, r1
 8001514:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001516:	4b0c      	ldr	r3, [pc, #48]	@ (8001548 <HAL_RCC_OscConfig+0x340>)
 8001518:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800151a:	4b0b      	ldr	r3, [pc, #44]	@ (8001548 <HAL_RCC_OscConfig+0x340>)
 800151c:	2104      	movs	r1, #4
 800151e:	438a      	bics	r2, r1
 8001520:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	689b      	ldr	r3, [r3, #8]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d028      	beq.n	800157c <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800152a:	f7ff fbcb 	bl	8000cc4 <HAL_GetTick>
 800152e:	0003      	movs	r3, r0
 8001530:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001532:	e01d      	b.n	8001570 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001534:	f7ff fbc6 	bl	8000cc4 <HAL_GetTick>
 8001538:	0002      	movs	r2, r0
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	4a0b      	ldr	r2, [pc, #44]	@ (800156c <HAL_RCC_OscConfig+0x364>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d915      	bls.n	8001570 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 8001544:	2303      	movs	r3, #3
 8001546:	e039      	b.n	80015bc <HAL_RCC_OscConfig+0x3b4>
 8001548:	40021000 	.word	0x40021000
 800154c:	fffeffff 	.word	0xfffeffff
 8001550:	fffbffff 	.word	0xfffbffff
 8001554:	ffff80ff 	.word	0xffff80ff
 8001558:	ffffc7ff 	.word	0xffffc7ff
 800155c:	02dc6c00 	.word	0x02dc6c00
 8001560:	20000000 	.word	0x20000000
 8001564:	20000004 	.word	0x20000004
 8001568:	fffffeff 	.word	0xfffffeff
 800156c:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001570:	4b14      	ldr	r3, [pc, #80]	@ (80015c4 <HAL_RCC_OscConfig+0x3bc>)
 8001572:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001574:	2202      	movs	r2, #2
 8001576:	4013      	ands	r3, r2
 8001578:	d0dc      	beq.n	8001534 <HAL_RCC_OscConfig+0x32c>
 800157a:	e013      	b.n	80015a4 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800157c:	f7ff fba2 	bl	8000cc4 <HAL_GetTick>
 8001580:	0003      	movs	r3, r0
 8001582:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8001584:	e009      	b.n	800159a <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001586:	f7ff fb9d 	bl	8000cc4 <HAL_GetTick>
 800158a:	0002      	movs	r2, r0
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	1ad3      	subs	r3, r2, r3
 8001590:	4a0d      	ldr	r2, [pc, #52]	@ (80015c8 <HAL_RCC_OscConfig+0x3c0>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d901      	bls.n	800159a <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 8001596:	2303      	movs	r3, #3
 8001598:	e010      	b.n	80015bc <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 800159a:	4b0a      	ldr	r3, [pc, #40]	@ (80015c4 <HAL_RCC_OscConfig+0x3bc>)
 800159c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800159e:	2202      	movs	r2, #2
 80015a0:	4013      	ands	r3, r2
 80015a2:	d1f0      	bne.n	8001586 <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80015a4:	230f      	movs	r3, #15
 80015a6:	18fb      	adds	r3, r7, r3
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d105      	bne.n	80015ba <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80015ae:	4b05      	ldr	r3, [pc, #20]	@ (80015c4 <HAL_RCC_OscConfig+0x3bc>)
 80015b0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80015b2:	4b04      	ldr	r3, [pc, #16]	@ (80015c4 <HAL_RCC_OscConfig+0x3bc>)
 80015b4:	4905      	ldr	r1, [pc, #20]	@ (80015cc <HAL_RCC_OscConfig+0x3c4>)
 80015b6:	400a      	ands	r2, r1
 80015b8:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
  return HAL_OK;
 80015ba:	2300      	movs	r3, #0
}
 80015bc:	0018      	movs	r0, r3
 80015be:	46bd      	mov	sp, r7
 80015c0:	b006      	add	sp, #24
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	40021000 	.word	0x40021000
 80015c8:	00001388 	.word	0x00001388
 80015cc:	efffffff 	.word	0xefffffff

080015d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b084      	sub	sp, #16
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d101      	bne.n	80015e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015e0:	2301      	movs	r3, #1
 80015e2:	e0e9      	b.n	80017b8 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80015e4:	4b76      	ldr	r3, [pc, #472]	@ (80017c0 <HAL_RCC_ClockConfig+0x1f0>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	2207      	movs	r2, #7
 80015ea:	4013      	ands	r3, r2
 80015ec:	683a      	ldr	r2, [r7, #0]
 80015ee:	429a      	cmp	r2, r3
 80015f0:	d91e      	bls.n	8001630 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015f2:	4b73      	ldr	r3, [pc, #460]	@ (80017c0 <HAL_RCC_ClockConfig+0x1f0>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	2207      	movs	r2, #7
 80015f8:	4393      	bics	r3, r2
 80015fa:	0019      	movs	r1, r3
 80015fc:	4b70      	ldr	r3, [pc, #448]	@ (80017c0 <HAL_RCC_ClockConfig+0x1f0>)
 80015fe:	683a      	ldr	r2, [r7, #0]
 8001600:	430a      	orrs	r2, r1
 8001602:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001604:	f7ff fb5e 	bl	8000cc4 <HAL_GetTick>
 8001608:	0003      	movs	r3, r0
 800160a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800160c:	e009      	b.n	8001622 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800160e:	f7ff fb59 	bl	8000cc4 <HAL_GetTick>
 8001612:	0002      	movs	r2, r0
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	1ad3      	subs	r3, r2, r3
 8001618:	4a6a      	ldr	r2, [pc, #424]	@ (80017c4 <HAL_RCC_ClockConfig+0x1f4>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d901      	bls.n	8001622 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800161e:	2303      	movs	r3, #3
 8001620:	e0ca      	b.n	80017b8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001622:	4b67      	ldr	r3, [pc, #412]	@ (80017c0 <HAL_RCC_ClockConfig+0x1f0>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	2207      	movs	r2, #7
 8001628:	4013      	ands	r3, r2
 800162a:	683a      	ldr	r2, [r7, #0]
 800162c:	429a      	cmp	r2, r3
 800162e:	d1ee      	bne.n	800160e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	2202      	movs	r2, #2
 8001636:	4013      	ands	r3, r2
 8001638:	d017      	beq.n	800166a <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	2204      	movs	r2, #4
 8001640:	4013      	ands	r3, r2
 8001642:	d008      	beq.n	8001656 <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001644:	4b60      	ldr	r3, [pc, #384]	@ (80017c8 <HAL_RCC_ClockConfig+0x1f8>)
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	4a60      	ldr	r2, [pc, #384]	@ (80017cc <HAL_RCC_ClockConfig+0x1fc>)
 800164a:	401a      	ands	r2, r3
 800164c:	4b5e      	ldr	r3, [pc, #376]	@ (80017c8 <HAL_RCC_ClockConfig+0x1f8>)
 800164e:	21b0      	movs	r1, #176	@ 0xb0
 8001650:	0109      	lsls	r1, r1, #4
 8001652:	430a      	orrs	r2, r1
 8001654:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001656:	4b5c      	ldr	r3, [pc, #368]	@ (80017c8 <HAL_RCC_ClockConfig+0x1f8>)
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	4a5d      	ldr	r2, [pc, #372]	@ (80017d0 <HAL_RCC_ClockConfig+0x200>)
 800165c:	4013      	ands	r3, r2
 800165e:	0019      	movs	r1, r3
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	68da      	ldr	r2, [r3, #12]
 8001664:	4b58      	ldr	r3, [pc, #352]	@ (80017c8 <HAL_RCC_ClockConfig+0x1f8>)
 8001666:	430a      	orrs	r2, r1
 8001668:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	2201      	movs	r2, #1
 8001670:	4013      	ands	r3, r2
 8001672:	d055      	beq.n	8001720 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 8001674:	4b54      	ldr	r3, [pc, #336]	@ (80017c8 <HAL_RCC_ClockConfig+0x1f8>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	221c      	movs	r2, #28
 800167a:	4393      	bics	r3, r2
 800167c:	0019      	movs	r1, r3
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	689a      	ldr	r2, [r3, #8]
 8001682:	4b51      	ldr	r3, [pc, #324]	@ (80017c8 <HAL_RCC_ClockConfig+0x1f8>)
 8001684:	430a      	orrs	r2, r1
 8001686:	601a      	str	r2, [r3, #0]

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	2b01      	cmp	r3, #1
 800168e:	d107      	bne.n	80016a0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001690:	4b4d      	ldr	r3, [pc, #308]	@ (80017c8 <HAL_RCC_ClockConfig+0x1f8>)
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	2380      	movs	r3, #128	@ 0x80
 8001696:	029b      	lsls	r3, r3, #10
 8001698:	4013      	ands	r3, r2
 800169a:	d11f      	bne.n	80016dc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800169c:	2301      	movs	r3, #1
 800169e:	e08b      	b.n	80017b8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d107      	bne.n	80016b8 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016a8:	4b47      	ldr	r3, [pc, #284]	@ (80017c8 <HAL_RCC_ClockConfig+0x1f8>)
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	2380      	movs	r3, #128	@ 0x80
 80016ae:	00db      	lsls	r3, r3, #3
 80016b0:	4013      	ands	r3, r2
 80016b2:	d113      	bne.n	80016dc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80016b4:	2301      	movs	r3, #1
 80016b6:	e07f      	b.n	80017b8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	2b03      	cmp	r3, #3
 80016be:	d106      	bne.n	80016ce <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80016c0:	4b41      	ldr	r3, [pc, #260]	@ (80017c8 <HAL_RCC_ClockConfig+0x1f8>)
 80016c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016c4:	2202      	movs	r2, #2
 80016c6:	4013      	ands	r3, r2
 80016c8:	d108      	bne.n	80016dc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e074      	b.n	80017b8 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80016ce:	4b3e      	ldr	r3, [pc, #248]	@ (80017c8 <HAL_RCC_ClockConfig+0x1f8>)
 80016d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016d2:	2202      	movs	r2, #2
 80016d4:	4013      	ands	r3, r2
 80016d6:	d101      	bne.n	80016dc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80016d8:	2301      	movs	r3, #1
 80016da:	e06d      	b.n	80017b8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80016dc:	4b3a      	ldr	r3, [pc, #232]	@ (80017c8 <HAL_RCC_ClockConfig+0x1f8>)
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	2207      	movs	r2, #7
 80016e2:	4393      	bics	r3, r2
 80016e4:	0019      	movs	r1, r3
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	685a      	ldr	r2, [r3, #4]
 80016ea:	4b37      	ldr	r3, [pc, #220]	@ (80017c8 <HAL_RCC_ClockConfig+0x1f8>)
 80016ec:	430a      	orrs	r2, r1
 80016ee:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80016f0:	f7ff fae8 	bl	8000cc4 <HAL_GetTick>
 80016f4:	0003      	movs	r3, r0
 80016f6:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016f8:	e009      	b.n	800170e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80016fa:	f7ff fae3 	bl	8000cc4 <HAL_GetTick>
 80016fe:	0002      	movs	r2, r0
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	1ad3      	subs	r3, r2, r3
 8001704:	4a2f      	ldr	r2, [pc, #188]	@ (80017c4 <HAL_RCC_ClockConfig+0x1f4>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d901      	bls.n	800170e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800170a:	2303      	movs	r3, #3
 800170c:	e054      	b.n	80017b8 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800170e:	4b2e      	ldr	r3, [pc, #184]	@ (80017c8 <HAL_RCC_ClockConfig+0x1f8>)
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	2238      	movs	r2, #56	@ 0x38
 8001714:	401a      	ands	r2, r3
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	00db      	lsls	r3, r3, #3
 800171c:	429a      	cmp	r2, r3
 800171e:	d1ec      	bne.n	80016fa <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001720:	4b27      	ldr	r3, [pc, #156]	@ (80017c0 <HAL_RCC_ClockConfig+0x1f0>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	2207      	movs	r2, #7
 8001726:	4013      	ands	r3, r2
 8001728:	683a      	ldr	r2, [r7, #0]
 800172a:	429a      	cmp	r2, r3
 800172c:	d21e      	bcs.n	800176c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800172e:	4b24      	ldr	r3, [pc, #144]	@ (80017c0 <HAL_RCC_ClockConfig+0x1f0>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	2207      	movs	r2, #7
 8001734:	4393      	bics	r3, r2
 8001736:	0019      	movs	r1, r3
 8001738:	4b21      	ldr	r3, [pc, #132]	@ (80017c0 <HAL_RCC_ClockConfig+0x1f0>)
 800173a:	683a      	ldr	r2, [r7, #0]
 800173c:	430a      	orrs	r2, r1
 800173e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001740:	f7ff fac0 	bl	8000cc4 <HAL_GetTick>
 8001744:	0003      	movs	r3, r0
 8001746:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001748:	e009      	b.n	800175e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800174a:	f7ff fabb 	bl	8000cc4 <HAL_GetTick>
 800174e:	0002      	movs	r2, r0
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	4a1b      	ldr	r2, [pc, #108]	@ (80017c4 <HAL_RCC_ClockConfig+0x1f4>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d901      	bls.n	800175e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800175a:	2303      	movs	r3, #3
 800175c:	e02c      	b.n	80017b8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800175e:	4b18      	ldr	r3, [pc, #96]	@ (80017c0 <HAL_RCC_ClockConfig+0x1f0>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	2207      	movs	r2, #7
 8001764:	4013      	ands	r3, r2
 8001766:	683a      	ldr	r2, [r7, #0]
 8001768:	429a      	cmp	r2, r3
 800176a:	d1ee      	bne.n	800174a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	2204      	movs	r2, #4
 8001772:	4013      	ands	r3, r2
 8001774:	d009      	beq.n	800178a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001776:	4b14      	ldr	r3, [pc, #80]	@ (80017c8 <HAL_RCC_ClockConfig+0x1f8>)
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	4a16      	ldr	r2, [pc, #88]	@ (80017d4 <HAL_RCC_ClockConfig+0x204>)
 800177c:	4013      	ands	r3, r2
 800177e:	0019      	movs	r1, r3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	691a      	ldr	r2, [r3, #16]
 8001784:	4b10      	ldr	r3, [pc, #64]	@ (80017c8 <HAL_RCC_ClockConfig+0x1f8>)
 8001786:	430a      	orrs	r2, r1
 8001788:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800178a:	f000 f82b 	bl	80017e4 <HAL_RCC_GetSysClockFreq>
 800178e:	0001      	movs	r1, r0
 8001790:	4b0d      	ldr	r3, [pc, #52]	@ (80017c8 <HAL_RCC_ClockConfig+0x1f8>)
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	0a1b      	lsrs	r3, r3, #8
 8001796:	220f      	movs	r2, #15
 8001798:	401a      	ands	r2, r3
 800179a:	4b0f      	ldr	r3, [pc, #60]	@ (80017d8 <HAL_RCC_ClockConfig+0x208>)
 800179c:	0092      	lsls	r2, r2, #2
 800179e:	58d3      	ldr	r3, [r2, r3]
 80017a0:	221f      	movs	r2, #31
 80017a2:	4013      	ands	r3, r2
 80017a4:	000a      	movs	r2, r1
 80017a6:	40da      	lsrs	r2, r3
 80017a8:	4b0c      	ldr	r3, [pc, #48]	@ (80017dc <HAL_RCC_ClockConfig+0x20c>)
 80017aa:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80017ac:	4b0c      	ldr	r3, [pc, #48]	@ (80017e0 <HAL_RCC_ClockConfig+0x210>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	0018      	movs	r0, r3
 80017b2:	f7ff f911 	bl	80009d8 <HAL_InitTick>
 80017b6:	0003      	movs	r3, r0
}
 80017b8:	0018      	movs	r0, r3
 80017ba:	46bd      	mov	sp, r7
 80017bc:	b004      	add	sp, #16
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	40022000 	.word	0x40022000
 80017c4:	00001388 	.word	0x00001388
 80017c8:	40021000 	.word	0x40021000
 80017cc:	ffff84ff 	.word	0xffff84ff
 80017d0:	fffff0ff 	.word	0xfffff0ff
 80017d4:	ffff8fff 	.word	0xffff8fff
 80017d8:	08005104 	.word	0x08005104
 80017dc:	20000000 	.word	0x20000000
 80017e0:	20000004 	.word	0x20000004

080017e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80017ea:	4b1c      	ldr	r3, [pc, #112]	@ (800185c <HAL_RCC_GetSysClockFreq+0x78>)
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	2238      	movs	r2, #56	@ 0x38
 80017f0:	4013      	ands	r3, r2
 80017f2:	d10f      	bne.n	8001814 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80017f4:	4b19      	ldr	r3, [pc, #100]	@ (800185c <HAL_RCC_GetSysClockFreq+0x78>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	0adb      	lsrs	r3, r3, #11
 80017fa:	2207      	movs	r2, #7
 80017fc:	4013      	ands	r3, r2
 80017fe:	2201      	movs	r2, #1
 8001800:	409a      	lsls	r2, r3
 8001802:	0013      	movs	r3, r2
 8001804:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001806:	6839      	ldr	r1, [r7, #0]
 8001808:	4815      	ldr	r0, [pc, #84]	@ (8001860 <HAL_RCC_GetSysClockFreq+0x7c>)
 800180a:	f7fe fdb1 	bl	8000370 <__udivsi3>
 800180e:	0003      	movs	r3, r0
 8001810:	607b      	str	r3, [r7, #4]
 8001812:	e01e      	b.n	8001852 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001814:	4b11      	ldr	r3, [pc, #68]	@ (800185c <HAL_RCC_GetSysClockFreq+0x78>)
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	2238      	movs	r2, #56	@ 0x38
 800181a:	4013      	ands	r3, r2
 800181c:	2b08      	cmp	r3, #8
 800181e:	d102      	bne.n	8001826 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001820:	4b10      	ldr	r3, [pc, #64]	@ (8001864 <HAL_RCC_GetSysClockFreq+0x80>)
 8001822:	607b      	str	r3, [r7, #4]
 8001824:	e015      	b.n	8001852 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001826:	4b0d      	ldr	r3, [pc, #52]	@ (800185c <HAL_RCC_GetSysClockFreq+0x78>)
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	2238      	movs	r2, #56	@ 0x38
 800182c:	4013      	ands	r3, r2
 800182e:	2b20      	cmp	r3, #32
 8001830:	d103      	bne.n	800183a <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001832:	2380      	movs	r3, #128	@ 0x80
 8001834:	021b      	lsls	r3, r3, #8
 8001836:	607b      	str	r3, [r7, #4]
 8001838:	e00b      	b.n	8001852 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 800183a:	4b08      	ldr	r3, [pc, #32]	@ (800185c <HAL_RCC_GetSysClockFreq+0x78>)
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	2238      	movs	r2, #56	@ 0x38
 8001840:	4013      	ands	r3, r2
 8001842:	2b18      	cmp	r3, #24
 8001844:	d103      	bne.n	800184e <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001846:	23fa      	movs	r3, #250	@ 0xfa
 8001848:	01db      	lsls	r3, r3, #7
 800184a:	607b      	str	r3, [r7, #4]
 800184c:	e001      	b.n	8001852 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else
  {
    sysclockfreq = 0U;
 800184e:	2300      	movs	r3, #0
 8001850:	607b      	str	r3, [r7, #4]
  }

  return sysclockfreq;
 8001852:	687b      	ldr	r3, [r7, #4]
}
 8001854:	0018      	movs	r0, r3
 8001856:	46bd      	mov	sp, r7
 8001858:	b002      	add	sp, #8
 800185a:	bd80      	pop	{r7, pc}
 800185c:	40021000 	.word	0x40021000
 8001860:	02dc6c00 	.word	0x02dc6c00
 8001864:	007a1200 	.word	0x007a1200

08001868 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800186c:	4b02      	ldr	r3, [pc, #8]	@ (8001878 <HAL_RCC_GetHCLKFreq+0x10>)
 800186e:	681b      	ldr	r3, [r3, #0]
}
 8001870:	0018      	movs	r0, r3
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	46c0      	nop			@ (mov r8, r8)
 8001878:	20000000 	.word	0x20000000

0800187c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 8001880:	f7ff fff2 	bl	8001868 <HAL_RCC_GetHCLKFreq>
 8001884:	0001      	movs	r1, r0
 8001886:	4b07      	ldr	r3, [pc, #28]	@ (80018a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	0b1b      	lsrs	r3, r3, #12
 800188c:	2207      	movs	r2, #7
 800188e:	401a      	ands	r2, r3
 8001890:	4b05      	ldr	r3, [pc, #20]	@ (80018a8 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8001892:	0092      	lsls	r2, r2, #2
 8001894:	58d3      	ldr	r3, [r2, r3]
 8001896:	221f      	movs	r2, #31
 8001898:	4013      	ands	r3, r2
 800189a:	40d9      	lsrs	r1, r3
 800189c:	000b      	movs	r3, r1
}
 800189e:	0018      	movs	r0, r3
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	40021000 	.word	0x40021000
 80018a8:	08005144 	.word	0x08005144

080018ac <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
 80018b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2207      	movs	r2, #7
 80018ba:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80018bc:	4b0e      	ldr	r3, [pc, #56]	@ (80018f8 <HAL_RCC_GetClockConfig+0x4c>)
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	2207      	movs	r2, #7
 80018c2:	401a      	ands	r2, r3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80018c8:	4b0b      	ldr	r3, [pc, #44]	@ (80018f8 <HAL_RCC_GetClockConfig+0x4c>)
 80018ca:	689a      	ldr	r2, [r3, #8]
 80018cc:	23f0      	movs	r3, #240	@ 0xf0
 80018ce:	011b      	lsls	r3, r3, #4
 80018d0:	401a      	ands	r2, r3
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	60da      	str	r2, [r3, #12]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);
 80018d6:	4b08      	ldr	r3, [pc, #32]	@ (80018f8 <HAL_RCC_GetClockConfig+0x4c>)
 80018d8:	689a      	ldr	r2, [r3, #8]
 80018da:	23e0      	movs	r3, #224	@ 0xe0
 80018dc:	01db      	lsls	r3, r3, #7
 80018de:	401a      	ands	r2, r3
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	611a      	str	r2, [r3, #16]


  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80018e4:	4b05      	ldr	r3, [pc, #20]	@ (80018fc <HAL_RCC_GetClockConfig+0x50>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	2207      	movs	r2, #7
 80018ea:	401a      	ands	r2, r3
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	601a      	str	r2, [r3, #0]
}
 80018f0:	46c0      	nop			@ (mov r8, r8)
 80018f2:	46bd      	mov	sp, r7
 80018f4:	b002      	add	sp, #8
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	40021000 	.word	0x40021000
 80018fc:	40022000 	.word	0x40022000

08001900 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d101      	bne.n	8001912 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e04a      	b.n	80019a8 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	223d      	movs	r2, #61	@ 0x3d
 8001916:	5c9b      	ldrb	r3, [r3, r2]
 8001918:	b2db      	uxtb	r3, r3
 800191a:	2b00      	cmp	r3, #0
 800191c:	d107      	bne.n	800192e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	223c      	movs	r2, #60	@ 0x3c
 8001922:	2100      	movs	r1, #0
 8001924:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	0018      	movs	r0, r3
 800192a:	f000 f841 	bl	80019b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	223d      	movs	r2, #61	@ 0x3d
 8001932:	2102      	movs	r1, #2
 8001934:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	3304      	adds	r3, #4
 800193e:	0019      	movs	r1, r3
 8001940:	0010      	movs	r0, r2
 8001942:	f000 f9ad 	bl	8001ca0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2248      	movs	r2, #72	@ 0x48
 800194a:	2101      	movs	r1, #1
 800194c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	223e      	movs	r2, #62	@ 0x3e
 8001952:	2101      	movs	r1, #1
 8001954:	5499      	strb	r1, [r3, r2]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	223f      	movs	r2, #63	@ 0x3f
 800195a:	2101      	movs	r1, #1
 800195c:	5499      	strb	r1, [r3, r2]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2240      	movs	r2, #64	@ 0x40
 8001962:	2101      	movs	r1, #1
 8001964:	5499      	strb	r1, [r3, r2]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2241      	movs	r2, #65	@ 0x41
 800196a:	2101      	movs	r1, #1
 800196c:	5499      	strb	r1, [r3, r2]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2242      	movs	r2, #66	@ 0x42
 8001972:	2101      	movs	r1, #1
 8001974:	5499      	strb	r1, [r3, r2]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2243      	movs	r2, #67	@ 0x43
 800197a:	2101      	movs	r1, #1
 800197c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2244      	movs	r2, #68	@ 0x44
 8001982:	2101      	movs	r1, #1
 8001984:	5499      	strb	r1, [r3, r2]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2245      	movs	r2, #69	@ 0x45
 800198a:	2101      	movs	r1, #1
 800198c:	5499      	strb	r1, [r3, r2]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2246      	movs	r2, #70	@ 0x46
 8001992:	2101      	movs	r1, #1
 8001994:	5499      	strb	r1, [r3, r2]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2247      	movs	r2, #71	@ 0x47
 800199a:	2101      	movs	r1, #1
 800199c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	223d      	movs	r2, #61	@ 0x3d
 80019a2:	2101      	movs	r1, #1
 80019a4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80019a6:	2300      	movs	r3, #0
}
 80019a8:	0018      	movs	r0, r3
 80019aa:	46bd      	mov	sp, r7
 80019ac:	b002      	add	sp, #8
 80019ae:	bd80      	pop	{r7, pc}

080019b0 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80019b8:	46c0      	nop			@ (mov r8, r8)
 80019ba:	46bd      	mov	sp, r7
 80019bc:	b002      	add	sp, #8
 80019be:	bd80      	pop	{r7, pc}

080019c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b084      	sub	sp, #16
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	223d      	movs	r2, #61	@ 0x3d
 80019cc:	5c9b      	ldrb	r3, [r3, r2]
 80019ce:	b2db      	uxtb	r3, r3
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d001      	beq.n	80019d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	e037      	b.n	8001a48 <HAL_TIM_Base_Start_IT+0x88>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	223d      	movs	r2, #61	@ 0x3d
 80019dc:	2102      	movs	r1, #2
 80019de:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	68da      	ldr	r2, [r3, #12]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	2101      	movs	r1, #1
 80019ec:	430a      	orrs	r2, r1
 80019ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a16      	ldr	r2, [pc, #88]	@ (8001a50 <HAL_TIM_Base_Start_IT+0x90>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d004      	beq.n	8001a04 <HAL_TIM_Base_Start_IT+0x44>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a15      	ldr	r2, [pc, #84]	@ (8001a54 <HAL_TIM_Base_Start_IT+0x94>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d116      	bne.n	8001a32 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	4a13      	ldr	r2, [pc, #76]	@ (8001a58 <HAL_TIM_Base_Start_IT+0x98>)
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	2b06      	cmp	r3, #6
 8001a14:	d016      	beq.n	8001a44 <HAL_TIM_Base_Start_IT+0x84>
 8001a16:	68fa      	ldr	r2, [r7, #12]
 8001a18:	2380      	movs	r3, #128	@ 0x80
 8001a1a:	025b      	lsls	r3, r3, #9
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d011      	beq.n	8001a44 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	2101      	movs	r1, #1
 8001a2c:	430a      	orrs	r2, r1
 8001a2e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a30:	e008      	b.n	8001a44 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	2101      	movs	r1, #1
 8001a3e:	430a      	orrs	r2, r1
 8001a40:	601a      	str	r2, [r3, #0]
 8001a42:	e000      	b.n	8001a46 <HAL_TIM_Base_Start_IT+0x86>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a44:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8001a46:	2300      	movs	r3, #0
}
 8001a48:	0018      	movs	r0, r3
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	b004      	add	sp, #16
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	40012c00 	.word	0x40012c00
 8001a54:	40000400 	.word	0x40000400
 8001a58:	00010007 	.word	0x00010007

08001a5c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b084      	sub	sp, #16
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	68db      	ldr	r3, [r3, #12]
 8001a6a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	691b      	ldr	r3, [r3, #16]
 8001a72:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	2202      	movs	r2, #2
 8001a78:	4013      	ands	r3, r2
 8001a7a:	d021      	beq.n	8001ac0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	2202      	movs	r2, #2
 8001a80:	4013      	ands	r3, r2
 8001a82:	d01d      	beq.n	8001ac0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	2203      	movs	r2, #3
 8001a8a:	4252      	negs	r2, r2
 8001a8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2201      	movs	r2, #1
 8001a92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	699b      	ldr	r3, [r3, #24]
 8001a9a:	2203      	movs	r2, #3
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	d004      	beq.n	8001aaa <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	0018      	movs	r0, r3
 8001aa4:	f000 f8e4 	bl	8001c70 <HAL_TIM_IC_CaptureCallback>
 8001aa8:	e007      	b.n	8001aba <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	0018      	movs	r0, r3
 8001aae:	f000 f8d7 	bl	8001c60 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	0018      	movs	r0, r3
 8001ab6:	f000 f8e3 	bl	8001c80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2200      	movs	r2, #0
 8001abe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	2204      	movs	r2, #4
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	d022      	beq.n	8001b0e <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	2204      	movs	r2, #4
 8001acc:	4013      	ands	r3, r2
 8001ace:	d01e      	beq.n	8001b0e <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	2205      	movs	r2, #5
 8001ad6:	4252      	negs	r2, r2
 8001ad8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2202      	movs	r2, #2
 8001ade:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	699a      	ldr	r2, [r3, #24]
 8001ae6:	23c0      	movs	r3, #192	@ 0xc0
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	4013      	ands	r3, r2
 8001aec:	d004      	beq.n	8001af8 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	0018      	movs	r0, r3
 8001af2:	f000 f8bd 	bl	8001c70 <HAL_TIM_IC_CaptureCallback>
 8001af6:	e007      	b.n	8001b08 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	0018      	movs	r0, r3
 8001afc:	f000 f8b0 	bl	8001c60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	0018      	movs	r0, r3
 8001b04:	f000 f8bc 	bl	8001c80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001b0e:	68bb      	ldr	r3, [r7, #8]
 8001b10:	2208      	movs	r2, #8
 8001b12:	4013      	ands	r3, r2
 8001b14:	d021      	beq.n	8001b5a <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	2208      	movs	r2, #8
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	d01d      	beq.n	8001b5a <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	2209      	movs	r2, #9
 8001b24:	4252      	negs	r2, r2
 8001b26:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2204      	movs	r2, #4
 8001b2c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	69db      	ldr	r3, [r3, #28]
 8001b34:	2203      	movs	r2, #3
 8001b36:	4013      	ands	r3, r2
 8001b38:	d004      	beq.n	8001b44 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	0018      	movs	r0, r3
 8001b3e:	f000 f897 	bl	8001c70 <HAL_TIM_IC_CaptureCallback>
 8001b42:	e007      	b.n	8001b54 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	0018      	movs	r0, r3
 8001b48:	f000 f88a 	bl	8001c60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	0018      	movs	r0, r3
 8001b50:	f000 f896 	bl	8001c80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2200      	movs	r2, #0
 8001b58:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	2210      	movs	r2, #16
 8001b5e:	4013      	ands	r3, r2
 8001b60:	d022      	beq.n	8001ba8 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	2210      	movs	r2, #16
 8001b66:	4013      	ands	r3, r2
 8001b68:	d01e      	beq.n	8001ba8 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	2211      	movs	r2, #17
 8001b70:	4252      	negs	r2, r2
 8001b72:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2208      	movs	r2, #8
 8001b78:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	69da      	ldr	r2, [r3, #28]
 8001b80:	23c0      	movs	r3, #192	@ 0xc0
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	4013      	ands	r3, r2
 8001b86:	d004      	beq.n	8001b92 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	0018      	movs	r0, r3
 8001b8c:	f000 f870 	bl	8001c70 <HAL_TIM_IC_CaptureCallback>
 8001b90:	e007      	b.n	8001ba2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	0018      	movs	r0, r3
 8001b96:	f000 f863 	bl	8001c60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	0018      	movs	r0, r3
 8001b9e:	f000 f86f 	bl	8001c80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	2201      	movs	r2, #1
 8001bac:	4013      	ands	r3, r2
 8001bae:	d00c      	beq.n	8001bca <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	d008      	beq.n	8001bca <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	2202      	movs	r2, #2
 8001bbe:	4252      	negs	r2, r2
 8001bc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	0018      	movs	r0, r3
 8001bc6:	f7fe fe81 	bl	80008cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	2280      	movs	r2, #128	@ 0x80
 8001bce:	4013      	ands	r3, r2
 8001bd0:	d00c      	beq.n	8001bec <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	2280      	movs	r2, #128	@ 0x80
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	d008      	beq.n	8001bec <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	2281      	movs	r2, #129	@ 0x81
 8001be0:	4252      	negs	r2, r2
 8001be2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	0018      	movs	r0, r3
 8001be8:	f000 f8ce 	bl	8001d88 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8001bec:	68ba      	ldr	r2, [r7, #8]
 8001bee:	2380      	movs	r3, #128	@ 0x80
 8001bf0:	005b      	lsls	r3, r3, #1
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	d00b      	beq.n	8001c0e <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	2280      	movs	r2, #128	@ 0x80
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	d007      	beq.n	8001c0e <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a16      	ldr	r2, [pc, #88]	@ (8001c5c <HAL_TIM_IRQHandler+0x200>)
 8001c04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	0018      	movs	r0, r3
 8001c0a:	f000 f8c5 	bl	8001d98 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	2240      	movs	r2, #64	@ 0x40
 8001c12:	4013      	ands	r3, r2
 8001c14:	d00c      	beq.n	8001c30 <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	2240      	movs	r2, #64	@ 0x40
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	d008      	beq.n	8001c30 <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	2241      	movs	r2, #65	@ 0x41
 8001c24:	4252      	negs	r2, r2
 8001c26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	0018      	movs	r0, r3
 8001c2c:	f000 f830 	bl	8001c90 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	2220      	movs	r2, #32
 8001c34:	4013      	ands	r3, r2
 8001c36:	d00c      	beq.n	8001c52 <HAL_TIM_IRQHandler+0x1f6>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	2220      	movs	r2, #32
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	d008      	beq.n	8001c52 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	2221      	movs	r2, #33	@ 0x21
 8001c46:	4252      	negs	r2, r2
 8001c48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	0018      	movs	r0, r3
 8001c4e:	f000 f893 	bl	8001d78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001c52:	46c0      	nop			@ (mov r8, r8)
 8001c54:	46bd      	mov	sp, r7
 8001c56:	b004      	add	sp, #16
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	46c0      	nop			@ (mov r8, r8)
 8001c5c:	fffffeff 	.word	0xfffffeff

08001c60 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001c68:	46c0      	nop			@ (mov r8, r8)
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	b002      	add	sp, #8
 8001c6e:	bd80      	pop	{r7, pc}

08001c70 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001c78:	46c0      	nop			@ (mov r8, r8)
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	b002      	add	sp, #8
 8001c7e:	bd80      	pop	{r7, pc}

08001c80 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001c88:	46c0      	nop			@ (mov r8, r8)
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	b002      	add	sp, #8
 8001c8e:	bd80      	pop	{r7, pc}

08001c90 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001c98:	46c0      	nop			@ (mov r8, r8)
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	b002      	add	sp, #8
 8001c9e:	bd80      	pop	{r7, pc}

08001ca0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b084      	sub	sp, #16
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	4a2b      	ldr	r2, [pc, #172]	@ (8001d60 <TIM_Base_SetConfig+0xc0>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d003      	beq.n	8001cc0 <TIM_Base_SetConfig+0x20>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	4a2a      	ldr	r2, [pc, #168]	@ (8001d64 <TIM_Base_SetConfig+0xc4>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d108      	bne.n	8001cd2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	2270      	movs	r2, #112	@ 0x70
 8001cc4:	4393      	bics	r3, r2
 8001cc6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	68fa      	ldr	r2, [r7, #12]
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	4a22      	ldr	r2, [pc, #136]	@ (8001d60 <TIM_Base_SetConfig+0xc0>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d00f      	beq.n	8001cfa <TIM_Base_SetConfig+0x5a>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	4a21      	ldr	r2, [pc, #132]	@ (8001d64 <TIM_Base_SetConfig+0xc4>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d00b      	beq.n	8001cfa <TIM_Base_SetConfig+0x5a>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4a20      	ldr	r2, [pc, #128]	@ (8001d68 <TIM_Base_SetConfig+0xc8>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d007      	beq.n	8001cfa <TIM_Base_SetConfig+0x5a>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4a1f      	ldr	r2, [pc, #124]	@ (8001d6c <TIM_Base_SetConfig+0xcc>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d003      	beq.n	8001cfa <TIM_Base_SetConfig+0x5a>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4a1e      	ldr	r2, [pc, #120]	@ (8001d70 <TIM_Base_SetConfig+0xd0>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d108      	bne.n	8001d0c <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	4a1d      	ldr	r2, [pc, #116]	@ (8001d74 <TIM_Base_SetConfig+0xd4>)
 8001cfe:	4013      	ands	r3, r2
 8001d00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	68db      	ldr	r3, [r3, #12]
 8001d06:	68fa      	ldr	r2, [r7, #12]
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	2280      	movs	r2, #128	@ 0x80
 8001d10:	4393      	bics	r3, r2
 8001d12:	001a      	movs	r2, r3
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	695b      	ldr	r3, [r3, #20]
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	68fa      	ldr	r2, [r7, #12]
 8001d20:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	689a      	ldr	r2, [r3, #8]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4a0a      	ldr	r2, [pc, #40]	@ (8001d60 <TIM_Base_SetConfig+0xc0>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d007      	beq.n	8001d4a <TIM_Base_SetConfig+0xaa>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4a0b      	ldr	r2, [pc, #44]	@ (8001d6c <TIM_Base_SetConfig+0xcc>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d003      	beq.n	8001d4a <TIM_Base_SetConfig+0xaa>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4a0a      	ldr	r2, [pc, #40]	@ (8001d70 <TIM_Base_SetConfig+0xd0>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d103      	bne.n	8001d52 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	691a      	ldr	r2, [r3, #16]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2201      	movs	r2, #1
 8001d56:	615a      	str	r2, [r3, #20]
}
 8001d58:	46c0      	nop			@ (mov r8, r8)
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	b004      	add	sp, #16
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	40012c00 	.word	0x40012c00
 8001d64:	40000400 	.word	0x40000400
 8001d68:	40002000 	.word	0x40002000
 8001d6c:	40014400 	.word	0x40014400
 8001d70:	40014800 	.word	0x40014800
 8001d74:	fffffcff 	.word	0xfffffcff

08001d78 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001d80:	46c0      	nop			@ (mov r8, r8)
 8001d82:	46bd      	mov	sp, r7
 8001d84:	b002      	add	sp, #8
 8001d86:	bd80      	pop	{r7, pc}

08001d88 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001d90:	46c0      	nop			@ (mov r8, r8)
 8001d92:	46bd      	mov	sp, r7
 8001d94:	b002      	add	sp, #8
 8001d96:	bd80      	pop	{r7, pc}

08001d98 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8001da0:	46c0      	nop			@ (mov r8, r8)
 8001da2:	46bd      	mov	sp, r7
 8001da4:	b002      	add	sp, #8
 8001da6:	bd80      	pop	{r7, pc}

08001da8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d101      	bne.n	8001dba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e046      	b.n	8001e48 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2288      	movs	r2, #136	@ 0x88
 8001dbe:	589b      	ldr	r3, [r3, r2]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d107      	bne.n	8001dd4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2284      	movs	r2, #132	@ 0x84
 8001dc8:	2100      	movs	r1, #0
 8001dca:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	0018      	movs	r0, r3
 8001dd0:	f7fe fdb8 	bl	8000944 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2288      	movs	r2, #136	@ 0x88
 8001dd8:	2124      	movs	r1, #36	@ 0x24
 8001dda:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	2101      	movs	r1, #1
 8001de8:	438a      	bics	r2, r1
 8001dea:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d003      	beq.n	8001dfc <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	0018      	movs	r0, r3
 8001df8:	f000 fa4e 	bl	8002298 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	0018      	movs	r0, r3
 8001e00:	f000 f8cc 	bl	8001f9c <UART_SetConfig>
 8001e04:	0003      	movs	r3, r0
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d101      	bne.n	8001e0e <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e01c      	b.n	8001e48 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	685a      	ldr	r2, [r3, #4]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	490d      	ldr	r1, [pc, #52]	@ (8001e50 <HAL_UART_Init+0xa8>)
 8001e1a:	400a      	ands	r2, r1
 8001e1c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	689a      	ldr	r2, [r3, #8]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	212a      	movs	r1, #42	@ 0x2a
 8001e2a:	438a      	bics	r2, r1
 8001e2c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	2101      	movs	r1, #1
 8001e3a:	430a      	orrs	r2, r1
 8001e3c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	0018      	movs	r0, r3
 8001e42:	f000 fadd 	bl	8002400 <UART_CheckIdleState>
 8001e46:	0003      	movs	r3, r0
}
 8001e48:	0018      	movs	r0, r3
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	b002      	add	sp, #8
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	ffffb7ff 	.word	0xffffb7ff

08001e54 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b08a      	sub	sp, #40	@ 0x28
 8001e58:	af02      	add	r7, sp, #8
 8001e5a:	60f8      	str	r0, [r7, #12]
 8001e5c:	60b9      	str	r1, [r7, #8]
 8001e5e:	603b      	str	r3, [r7, #0]
 8001e60:	1dbb      	adds	r3, r7, #6
 8001e62:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	2288      	movs	r2, #136	@ 0x88
 8001e68:	589b      	ldr	r3, [r3, r2]
 8001e6a:	2b20      	cmp	r3, #32
 8001e6c:	d000      	beq.n	8001e70 <HAL_UART_Transmit+0x1c>
 8001e6e:	e090      	b.n	8001f92 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d003      	beq.n	8001e7e <HAL_UART_Transmit+0x2a>
 8001e76:	1dbb      	adds	r3, r7, #6
 8001e78:	881b      	ldrh	r3, [r3, #0]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d101      	bne.n	8001e82 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e088      	b.n	8001f94 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	689a      	ldr	r2, [r3, #8]
 8001e86:	2380      	movs	r3, #128	@ 0x80
 8001e88:	015b      	lsls	r3, r3, #5
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	d109      	bne.n	8001ea2 <HAL_UART_Transmit+0x4e>
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	691b      	ldr	r3, [r3, #16]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d105      	bne.n	8001ea2 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	2201      	movs	r2, #1
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	d001      	beq.n	8001ea2 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e078      	b.n	8001f94 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	2290      	movs	r2, #144	@ 0x90
 8001ea6:	2100      	movs	r1, #0
 8001ea8:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	2288      	movs	r2, #136	@ 0x88
 8001eae:	2121      	movs	r1, #33	@ 0x21
 8001eb0:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001eb2:	f7fe ff07 	bl	8000cc4 <HAL_GetTick>
 8001eb6:	0003      	movs	r3, r0
 8001eb8:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	1dba      	adds	r2, r7, #6
 8001ebe:	2154      	movs	r1, #84	@ 0x54
 8001ec0:	8812      	ldrh	r2, [r2, #0]
 8001ec2:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	1dba      	adds	r2, r7, #6
 8001ec8:	2156      	movs	r1, #86	@ 0x56
 8001eca:	8812      	ldrh	r2, [r2, #0]
 8001ecc:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	689a      	ldr	r2, [r3, #8]
 8001ed2:	2380      	movs	r3, #128	@ 0x80
 8001ed4:	015b      	lsls	r3, r3, #5
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	d108      	bne.n	8001eec <HAL_UART_Transmit+0x98>
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	691b      	ldr	r3, [r3, #16]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d104      	bne.n	8001eec <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	61bb      	str	r3, [r7, #24]
 8001eea:	e003      	b.n	8001ef4 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001ef4:	e030      	b.n	8001f58 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ef6:	697a      	ldr	r2, [r7, #20]
 8001ef8:	68f8      	ldr	r0, [r7, #12]
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	9300      	str	r3, [sp, #0]
 8001efe:	0013      	movs	r3, r2
 8001f00:	2200      	movs	r2, #0
 8001f02:	2180      	movs	r1, #128	@ 0x80
 8001f04:	f000 fb26 	bl	8002554 <UART_WaitOnFlagUntilTimeout>
 8001f08:	1e03      	subs	r3, r0, #0
 8001f0a:	d005      	beq.n	8001f18 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	2288      	movs	r2, #136	@ 0x88
 8001f10:	2120      	movs	r1, #32
 8001f12:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8001f14:	2303      	movs	r3, #3
 8001f16:	e03d      	b.n	8001f94 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d10b      	bne.n	8001f36 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001f1e:	69bb      	ldr	r3, [r7, #24]
 8001f20:	881b      	ldrh	r3, [r3, #0]
 8001f22:	001a      	movs	r2, r3
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	05d2      	lsls	r2, r2, #23
 8001f2a:	0dd2      	lsrs	r2, r2, #23
 8001f2c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8001f2e:	69bb      	ldr	r3, [r7, #24]
 8001f30:	3302      	adds	r3, #2
 8001f32:	61bb      	str	r3, [r7, #24]
 8001f34:	e007      	b.n	8001f46 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	781a      	ldrb	r2, [r3, #0]
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8001f40:	69fb      	ldr	r3, [r7, #28]
 8001f42:	3301      	adds	r3, #1
 8001f44:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2256      	movs	r2, #86	@ 0x56
 8001f4a:	5a9b      	ldrh	r3, [r3, r2]
 8001f4c:	b29b      	uxth	r3, r3
 8001f4e:	3b01      	subs	r3, #1
 8001f50:	b299      	uxth	r1, r3
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	2256      	movs	r2, #86	@ 0x56
 8001f56:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	2256      	movs	r2, #86	@ 0x56
 8001f5c:	5a9b      	ldrh	r3, [r3, r2]
 8001f5e:	b29b      	uxth	r3, r3
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d1c8      	bne.n	8001ef6 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001f64:	697a      	ldr	r2, [r7, #20]
 8001f66:	68f8      	ldr	r0, [r7, #12]
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	9300      	str	r3, [sp, #0]
 8001f6c:	0013      	movs	r3, r2
 8001f6e:	2200      	movs	r2, #0
 8001f70:	2140      	movs	r1, #64	@ 0x40
 8001f72:	f000 faef 	bl	8002554 <UART_WaitOnFlagUntilTimeout>
 8001f76:	1e03      	subs	r3, r0, #0
 8001f78:	d005      	beq.n	8001f86 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	2288      	movs	r2, #136	@ 0x88
 8001f7e:	2120      	movs	r1, #32
 8001f80:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8001f82:	2303      	movs	r3, #3
 8001f84:	e006      	b.n	8001f94 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	2288      	movs	r2, #136	@ 0x88
 8001f8a:	2120      	movs	r1, #32
 8001f8c:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	e000      	b.n	8001f94 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8001f92:	2302      	movs	r3, #2
  }
}
 8001f94:	0018      	movs	r0, r3
 8001f96:	46bd      	mov	sp, r7
 8001f98:	b008      	add	sp, #32
 8001f9a:	bd80      	pop	{r7, pc}

08001f9c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b088      	sub	sp, #32
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001fa4:	231e      	movs	r3, #30
 8001fa6:	18fb      	adds	r3, r7, r3
 8001fa8:	2200      	movs	r2, #0
 8001faa:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	689a      	ldr	r2, [r3, #8]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	691b      	ldr	r3, [r3, #16]
 8001fb4:	431a      	orrs	r2, r3
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	695b      	ldr	r3, [r3, #20]
 8001fba:	431a      	orrs	r2, r3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	69db      	ldr	r3, [r3, #28]
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4aab      	ldr	r2, [pc, #684]	@ (8002278 <UART_SetConfig+0x2dc>)
 8001fcc:	4013      	ands	r3, r2
 8001fce:	0019      	movs	r1, r3
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	697a      	ldr	r2, [r7, #20]
 8001fd6:	430a      	orrs	r2, r1
 8001fd8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	4aa6      	ldr	r2, [pc, #664]	@ (800227c <UART_SetConfig+0x2e0>)
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	0019      	movs	r1, r3
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	68da      	ldr	r2, [r3, #12]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	430a      	orrs	r2, r1
 8001ff0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	699b      	ldr	r3, [r3, #24]
 8001ff6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6a1b      	ldr	r3, [r3, #32]
 8001ffc:	697a      	ldr	r2, [r7, #20]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	4a9d      	ldr	r2, [pc, #628]	@ (8002280 <UART_SetConfig+0x2e4>)
 800200a:	4013      	ands	r3, r2
 800200c:	0019      	movs	r1, r3
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	697a      	ldr	r2, [r7, #20]
 8002014:	430a      	orrs	r2, r1
 8002016:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800201e:	220f      	movs	r2, #15
 8002020:	4393      	bics	r3, r2
 8002022:	0019      	movs	r1, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	430a      	orrs	r2, r1
 800202e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a93      	ldr	r2, [pc, #588]	@ (8002284 <UART_SetConfig+0x2e8>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d127      	bne.n	800208a <UART_SetConfig+0xee>
 800203a:	4b93      	ldr	r3, [pc, #588]	@ (8002288 <UART_SetConfig+0x2ec>)
 800203c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800203e:	2203      	movs	r2, #3
 8002040:	4013      	ands	r3, r2
 8002042:	2b03      	cmp	r3, #3
 8002044:	d017      	beq.n	8002076 <UART_SetConfig+0xda>
 8002046:	d81b      	bhi.n	8002080 <UART_SetConfig+0xe4>
 8002048:	2b02      	cmp	r3, #2
 800204a:	d00a      	beq.n	8002062 <UART_SetConfig+0xc6>
 800204c:	d818      	bhi.n	8002080 <UART_SetConfig+0xe4>
 800204e:	2b00      	cmp	r3, #0
 8002050:	d002      	beq.n	8002058 <UART_SetConfig+0xbc>
 8002052:	2b01      	cmp	r3, #1
 8002054:	d00a      	beq.n	800206c <UART_SetConfig+0xd0>
 8002056:	e013      	b.n	8002080 <UART_SetConfig+0xe4>
 8002058:	231f      	movs	r3, #31
 800205a:	18fb      	adds	r3, r7, r3
 800205c:	2200      	movs	r2, #0
 800205e:	701a      	strb	r2, [r3, #0]
 8002060:	e021      	b.n	80020a6 <UART_SetConfig+0x10a>
 8002062:	231f      	movs	r3, #31
 8002064:	18fb      	adds	r3, r7, r3
 8002066:	2202      	movs	r2, #2
 8002068:	701a      	strb	r2, [r3, #0]
 800206a:	e01c      	b.n	80020a6 <UART_SetConfig+0x10a>
 800206c:	231f      	movs	r3, #31
 800206e:	18fb      	adds	r3, r7, r3
 8002070:	2204      	movs	r2, #4
 8002072:	701a      	strb	r2, [r3, #0]
 8002074:	e017      	b.n	80020a6 <UART_SetConfig+0x10a>
 8002076:	231f      	movs	r3, #31
 8002078:	18fb      	adds	r3, r7, r3
 800207a:	2208      	movs	r2, #8
 800207c:	701a      	strb	r2, [r3, #0]
 800207e:	e012      	b.n	80020a6 <UART_SetConfig+0x10a>
 8002080:	231f      	movs	r3, #31
 8002082:	18fb      	adds	r3, r7, r3
 8002084:	2210      	movs	r2, #16
 8002086:	701a      	strb	r2, [r3, #0]
 8002088:	e00d      	b.n	80020a6 <UART_SetConfig+0x10a>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a7f      	ldr	r2, [pc, #508]	@ (800228c <UART_SetConfig+0x2f0>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d104      	bne.n	800209e <UART_SetConfig+0x102>
 8002094:	231f      	movs	r3, #31
 8002096:	18fb      	adds	r3, r7, r3
 8002098:	2200      	movs	r2, #0
 800209a:	701a      	strb	r2, [r3, #0]
 800209c:	e003      	b.n	80020a6 <UART_SetConfig+0x10a>
 800209e:	231f      	movs	r3, #31
 80020a0:	18fb      	adds	r3, r7, r3
 80020a2:	2210      	movs	r2, #16
 80020a4:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	69da      	ldr	r2, [r3, #28]
 80020aa:	2380      	movs	r3, #128	@ 0x80
 80020ac:	021b      	lsls	r3, r3, #8
 80020ae:	429a      	cmp	r2, r3
 80020b0:	d000      	beq.n	80020b4 <UART_SetConfig+0x118>
 80020b2:	e06f      	b.n	8002194 <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 80020b4:	231f      	movs	r3, #31
 80020b6:	18fb      	adds	r3, r7, r3
 80020b8:	781b      	ldrb	r3, [r3, #0]
 80020ba:	2b08      	cmp	r3, #8
 80020bc:	d01f      	beq.n	80020fe <UART_SetConfig+0x162>
 80020be:	dc22      	bgt.n	8002106 <UART_SetConfig+0x16a>
 80020c0:	2b04      	cmp	r3, #4
 80020c2:	d017      	beq.n	80020f4 <UART_SetConfig+0x158>
 80020c4:	dc1f      	bgt.n	8002106 <UART_SetConfig+0x16a>
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d002      	beq.n	80020d0 <UART_SetConfig+0x134>
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d005      	beq.n	80020da <UART_SetConfig+0x13e>
 80020ce:	e01a      	b.n	8002106 <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80020d0:	f7ff fbd4 	bl	800187c <HAL_RCC_GetPCLK1Freq>
 80020d4:	0003      	movs	r3, r0
 80020d6:	61bb      	str	r3, [r7, #24]
        break;
 80020d8:	e01c      	b.n	8002114 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 80020da:	4b6b      	ldr	r3, [pc, #428]	@ (8002288 <UART_SetConfig+0x2ec>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	095b      	lsrs	r3, r3, #5
 80020e0:	2207      	movs	r2, #7
 80020e2:	4013      	ands	r3, r2
 80020e4:	3301      	adds	r3, #1
 80020e6:	0019      	movs	r1, r3
 80020e8:	4869      	ldr	r0, [pc, #420]	@ (8002290 <UART_SetConfig+0x2f4>)
 80020ea:	f7fe f941 	bl	8000370 <__udivsi3>
 80020ee:	0003      	movs	r3, r0
 80020f0:	61bb      	str	r3, [r7, #24]
        break;
 80020f2:	e00f      	b.n	8002114 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80020f4:	f7ff fb76 	bl	80017e4 <HAL_RCC_GetSysClockFreq>
 80020f8:	0003      	movs	r3, r0
 80020fa:	61bb      	str	r3, [r7, #24]
        break;
 80020fc:	e00a      	b.n	8002114 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80020fe:	2380      	movs	r3, #128	@ 0x80
 8002100:	021b      	lsls	r3, r3, #8
 8002102:	61bb      	str	r3, [r7, #24]
        break;
 8002104:	e006      	b.n	8002114 <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 8002106:	2300      	movs	r3, #0
 8002108:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800210a:	231e      	movs	r3, #30
 800210c:	18fb      	adds	r3, r7, r3
 800210e:	2201      	movs	r2, #1
 8002110:	701a      	strb	r2, [r3, #0]
        break;
 8002112:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002114:	69bb      	ldr	r3, [r7, #24]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d100      	bne.n	800211c <UART_SetConfig+0x180>
 800211a:	e097      	b.n	800224c <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002120:	4b5c      	ldr	r3, [pc, #368]	@ (8002294 <UART_SetConfig+0x2f8>)
 8002122:	0052      	lsls	r2, r2, #1
 8002124:	5ad3      	ldrh	r3, [r2, r3]
 8002126:	0019      	movs	r1, r3
 8002128:	69b8      	ldr	r0, [r7, #24]
 800212a:	f7fe f921 	bl	8000370 <__udivsi3>
 800212e:	0003      	movs	r3, r0
 8002130:	005a      	lsls	r2, r3, #1
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	085b      	lsrs	r3, r3, #1
 8002138:	18d2      	adds	r2, r2, r3
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	0019      	movs	r1, r3
 8002140:	0010      	movs	r0, r2
 8002142:	f7fe f915 	bl	8000370 <__udivsi3>
 8002146:	0003      	movs	r3, r0
 8002148:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	2b0f      	cmp	r3, #15
 800214e:	d91c      	bls.n	800218a <UART_SetConfig+0x1ee>
 8002150:	693a      	ldr	r2, [r7, #16]
 8002152:	2380      	movs	r3, #128	@ 0x80
 8002154:	025b      	lsls	r3, r3, #9
 8002156:	429a      	cmp	r2, r3
 8002158:	d217      	bcs.n	800218a <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	b29a      	uxth	r2, r3
 800215e:	200e      	movs	r0, #14
 8002160:	183b      	adds	r3, r7, r0
 8002162:	210f      	movs	r1, #15
 8002164:	438a      	bics	r2, r1
 8002166:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	085b      	lsrs	r3, r3, #1
 800216c:	b29b      	uxth	r3, r3
 800216e:	2207      	movs	r2, #7
 8002170:	4013      	ands	r3, r2
 8002172:	b299      	uxth	r1, r3
 8002174:	183b      	adds	r3, r7, r0
 8002176:	183a      	adds	r2, r7, r0
 8002178:	8812      	ldrh	r2, [r2, #0]
 800217a:	430a      	orrs	r2, r1
 800217c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	183a      	adds	r2, r7, r0
 8002184:	8812      	ldrh	r2, [r2, #0]
 8002186:	60da      	str	r2, [r3, #12]
 8002188:	e060      	b.n	800224c <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 800218a:	231e      	movs	r3, #30
 800218c:	18fb      	adds	r3, r7, r3
 800218e:	2201      	movs	r2, #1
 8002190:	701a      	strb	r2, [r3, #0]
 8002192:	e05b      	b.n	800224c <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002194:	231f      	movs	r3, #31
 8002196:	18fb      	adds	r3, r7, r3
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	2b08      	cmp	r3, #8
 800219c:	d01f      	beq.n	80021de <UART_SetConfig+0x242>
 800219e:	dc22      	bgt.n	80021e6 <UART_SetConfig+0x24a>
 80021a0:	2b04      	cmp	r3, #4
 80021a2:	d017      	beq.n	80021d4 <UART_SetConfig+0x238>
 80021a4:	dc1f      	bgt.n	80021e6 <UART_SetConfig+0x24a>
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d002      	beq.n	80021b0 <UART_SetConfig+0x214>
 80021aa:	2b02      	cmp	r3, #2
 80021ac:	d005      	beq.n	80021ba <UART_SetConfig+0x21e>
 80021ae:	e01a      	b.n	80021e6 <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80021b0:	f7ff fb64 	bl	800187c <HAL_RCC_GetPCLK1Freq>
 80021b4:	0003      	movs	r3, r0
 80021b6:	61bb      	str	r3, [r7, #24]
        break;
 80021b8:	e01c      	b.n	80021f4 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 80021ba:	4b33      	ldr	r3, [pc, #204]	@ (8002288 <UART_SetConfig+0x2ec>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	095b      	lsrs	r3, r3, #5
 80021c0:	2207      	movs	r2, #7
 80021c2:	4013      	ands	r3, r2
 80021c4:	3301      	adds	r3, #1
 80021c6:	0019      	movs	r1, r3
 80021c8:	4831      	ldr	r0, [pc, #196]	@ (8002290 <UART_SetConfig+0x2f4>)
 80021ca:	f7fe f8d1 	bl	8000370 <__udivsi3>
 80021ce:	0003      	movs	r3, r0
 80021d0:	61bb      	str	r3, [r7, #24]
        break;
 80021d2:	e00f      	b.n	80021f4 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80021d4:	f7ff fb06 	bl	80017e4 <HAL_RCC_GetSysClockFreq>
 80021d8:	0003      	movs	r3, r0
 80021da:	61bb      	str	r3, [r7, #24]
        break;
 80021dc:	e00a      	b.n	80021f4 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80021de:	2380      	movs	r3, #128	@ 0x80
 80021e0:	021b      	lsls	r3, r3, #8
 80021e2:	61bb      	str	r3, [r7, #24]
        break;
 80021e4:	e006      	b.n	80021f4 <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 80021e6:	2300      	movs	r3, #0
 80021e8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80021ea:	231e      	movs	r3, #30
 80021ec:	18fb      	adds	r3, r7, r3
 80021ee:	2201      	movs	r2, #1
 80021f0:	701a      	strb	r2, [r3, #0]
        break;
 80021f2:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80021f4:	69bb      	ldr	r3, [r7, #24]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d028      	beq.n	800224c <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80021fe:	4b25      	ldr	r3, [pc, #148]	@ (8002294 <UART_SetConfig+0x2f8>)
 8002200:	0052      	lsls	r2, r2, #1
 8002202:	5ad3      	ldrh	r3, [r2, r3]
 8002204:	0019      	movs	r1, r3
 8002206:	69b8      	ldr	r0, [r7, #24]
 8002208:	f7fe f8b2 	bl	8000370 <__udivsi3>
 800220c:	0003      	movs	r3, r0
 800220e:	001a      	movs	r2, r3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	085b      	lsrs	r3, r3, #1
 8002216:	18d2      	adds	r2, r2, r3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	0019      	movs	r1, r3
 800221e:	0010      	movs	r0, r2
 8002220:	f7fe f8a6 	bl	8000370 <__udivsi3>
 8002224:	0003      	movs	r3, r0
 8002226:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	2b0f      	cmp	r3, #15
 800222c:	d90a      	bls.n	8002244 <UART_SetConfig+0x2a8>
 800222e:	693a      	ldr	r2, [r7, #16]
 8002230:	2380      	movs	r3, #128	@ 0x80
 8002232:	025b      	lsls	r3, r3, #9
 8002234:	429a      	cmp	r2, r3
 8002236:	d205      	bcs.n	8002244 <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	b29a      	uxth	r2, r3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	60da      	str	r2, [r3, #12]
 8002242:	e003      	b.n	800224c <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8002244:	231e      	movs	r3, #30
 8002246:	18fb      	adds	r3, r7, r3
 8002248:	2201      	movs	r2, #1
 800224a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	226a      	movs	r2, #106	@ 0x6a
 8002250:	2101      	movs	r1, #1
 8002252:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2268      	movs	r2, #104	@ 0x68
 8002258:	2101      	movs	r1, #1
 800225a:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2200      	movs	r2, #0
 8002260:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2200      	movs	r2, #0
 8002266:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8002268:	231e      	movs	r3, #30
 800226a:	18fb      	adds	r3, r7, r3
 800226c:	781b      	ldrb	r3, [r3, #0]
}
 800226e:	0018      	movs	r0, r3
 8002270:	46bd      	mov	sp, r7
 8002272:	b008      	add	sp, #32
 8002274:	bd80      	pop	{r7, pc}
 8002276:	46c0      	nop			@ (mov r8, r8)
 8002278:	cfff69f3 	.word	0xcfff69f3
 800227c:	ffffcfff 	.word	0xffffcfff
 8002280:	11fff4ff 	.word	0x11fff4ff
 8002284:	40013800 	.word	0x40013800
 8002288:	40021000 	.word	0x40021000
 800228c:	40004400 	.word	0x40004400
 8002290:	02dc6c00 	.word	0x02dc6c00
 8002294:	08005164 	.word	0x08005164

08002298 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022a4:	2208      	movs	r2, #8
 80022a6:	4013      	ands	r3, r2
 80022a8:	d00b      	beq.n	80022c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	4a4a      	ldr	r2, [pc, #296]	@ (80023dc <UART_AdvFeatureConfig+0x144>)
 80022b2:	4013      	ands	r3, r2
 80022b4:	0019      	movs	r1, r3
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	430a      	orrs	r2, r1
 80022c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022c6:	2201      	movs	r2, #1
 80022c8:	4013      	ands	r3, r2
 80022ca:	d00b      	beq.n	80022e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	4a43      	ldr	r2, [pc, #268]	@ (80023e0 <UART_AdvFeatureConfig+0x148>)
 80022d4:	4013      	ands	r3, r2
 80022d6:	0019      	movs	r1, r3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	430a      	orrs	r2, r1
 80022e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022e8:	2202      	movs	r2, #2
 80022ea:	4013      	ands	r3, r2
 80022ec:	d00b      	beq.n	8002306 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	4a3b      	ldr	r2, [pc, #236]	@ (80023e4 <UART_AdvFeatureConfig+0x14c>)
 80022f6:	4013      	ands	r3, r2
 80022f8:	0019      	movs	r1, r3
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	430a      	orrs	r2, r1
 8002304:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800230a:	2204      	movs	r2, #4
 800230c:	4013      	ands	r3, r2
 800230e:	d00b      	beq.n	8002328 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	4a34      	ldr	r2, [pc, #208]	@ (80023e8 <UART_AdvFeatureConfig+0x150>)
 8002318:	4013      	ands	r3, r2
 800231a:	0019      	movs	r1, r3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	430a      	orrs	r2, r1
 8002326:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800232c:	2210      	movs	r2, #16
 800232e:	4013      	ands	r3, r2
 8002330:	d00b      	beq.n	800234a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	4a2c      	ldr	r2, [pc, #176]	@ (80023ec <UART_AdvFeatureConfig+0x154>)
 800233a:	4013      	ands	r3, r2
 800233c:	0019      	movs	r1, r3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	430a      	orrs	r2, r1
 8002348:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800234e:	2220      	movs	r2, #32
 8002350:	4013      	ands	r3, r2
 8002352:	d00b      	beq.n	800236c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	4a25      	ldr	r2, [pc, #148]	@ (80023f0 <UART_AdvFeatureConfig+0x158>)
 800235c:	4013      	ands	r3, r2
 800235e:	0019      	movs	r1, r3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	430a      	orrs	r2, r1
 800236a:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002370:	2240      	movs	r2, #64	@ 0x40
 8002372:	4013      	ands	r3, r2
 8002374:	d01d      	beq.n	80023b2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	4a1d      	ldr	r2, [pc, #116]	@ (80023f4 <UART_AdvFeatureConfig+0x15c>)
 800237e:	4013      	ands	r3, r2
 8002380:	0019      	movs	r1, r3
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	430a      	orrs	r2, r1
 800238c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002392:	2380      	movs	r3, #128	@ 0x80
 8002394:	035b      	lsls	r3, r3, #13
 8002396:	429a      	cmp	r2, r3
 8002398:	d10b      	bne.n	80023b2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	4a15      	ldr	r2, [pc, #84]	@ (80023f8 <UART_AdvFeatureConfig+0x160>)
 80023a2:	4013      	ands	r3, r2
 80023a4:	0019      	movs	r1, r3
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	430a      	orrs	r2, r1
 80023b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023b6:	2280      	movs	r2, #128	@ 0x80
 80023b8:	4013      	ands	r3, r2
 80023ba:	d00b      	beq.n	80023d4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	4a0e      	ldr	r2, [pc, #56]	@ (80023fc <UART_AdvFeatureConfig+0x164>)
 80023c4:	4013      	ands	r3, r2
 80023c6:	0019      	movs	r1, r3
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	430a      	orrs	r2, r1
 80023d2:	605a      	str	r2, [r3, #4]
  }
}
 80023d4:	46c0      	nop			@ (mov r8, r8)
 80023d6:	46bd      	mov	sp, r7
 80023d8:	b002      	add	sp, #8
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	ffff7fff 	.word	0xffff7fff
 80023e0:	fffdffff 	.word	0xfffdffff
 80023e4:	fffeffff 	.word	0xfffeffff
 80023e8:	fffbffff 	.word	0xfffbffff
 80023ec:	ffffefff 	.word	0xffffefff
 80023f0:	ffffdfff 	.word	0xffffdfff
 80023f4:	ffefffff 	.word	0xffefffff
 80023f8:	ff9fffff 	.word	0xff9fffff
 80023fc:	fff7ffff 	.word	0xfff7ffff

08002400 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b092      	sub	sp, #72	@ 0x48
 8002404:	af02      	add	r7, sp, #8
 8002406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2290      	movs	r2, #144	@ 0x90
 800240c:	2100      	movs	r1, #0
 800240e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002410:	f7fe fc58 	bl	8000cc4 <HAL_GetTick>
 8002414:	0003      	movs	r3, r0
 8002416:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	2208      	movs	r2, #8
 8002420:	4013      	ands	r3, r2
 8002422:	2b08      	cmp	r3, #8
 8002424:	d12d      	bne.n	8002482 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002426:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002428:	2280      	movs	r2, #128	@ 0x80
 800242a:	0391      	lsls	r1, r2, #14
 800242c:	6878      	ldr	r0, [r7, #4]
 800242e:	4a47      	ldr	r2, [pc, #284]	@ (800254c <UART_CheckIdleState+0x14c>)
 8002430:	9200      	str	r2, [sp, #0]
 8002432:	2200      	movs	r2, #0
 8002434:	f000 f88e 	bl	8002554 <UART_WaitOnFlagUntilTimeout>
 8002438:	1e03      	subs	r3, r0, #0
 800243a:	d022      	beq.n	8002482 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800243c:	f3ef 8310 	mrs	r3, PRIMASK
 8002440:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8002442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8002444:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002446:	2301      	movs	r3, #1
 8002448:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800244a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800244c:	f383 8810 	msr	PRIMASK, r3
}
 8002450:	46c0      	nop			@ (mov r8, r8)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	2180      	movs	r1, #128	@ 0x80
 800245e:	438a      	bics	r2, r1
 8002460:	601a      	str	r2, [r3, #0]
 8002462:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002464:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002466:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002468:	f383 8810 	msr	PRIMASK, r3
}
 800246c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2288      	movs	r2, #136	@ 0x88
 8002472:	2120      	movs	r1, #32
 8002474:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2284      	movs	r2, #132	@ 0x84
 800247a:	2100      	movs	r1, #0
 800247c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800247e:	2303      	movs	r3, #3
 8002480:	e060      	b.n	8002544 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	2204      	movs	r2, #4
 800248a:	4013      	ands	r3, r2
 800248c:	2b04      	cmp	r3, #4
 800248e:	d146      	bne.n	800251e <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002490:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002492:	2280      	movs	r2, #128	@ 0x80
 8002494:	03d1      	lsls	r1, r2, #15
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	4a2c      	ldr	r2, [pc, #176]	@ (800254c <UART_CheckIdleState+0x14c>)
 800249a:	9200      	str	r2, [sp, #0]
 800249c:	2200      	movs	r2, #0
 800249e:	f000 f859 	bl	8002554 <UART_WaitOnFlagUntilTimeout>
 80024a2:	1e03      	subs	r3, r0, #0
 80024a4:	d03b      	beq.n	800251e <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80024a6:	f3ef 8310 	mrs	r3, PRIMASK
 80024aa:	60fb      	str	r3, [r7, #12]
  return(result);
 80024ac:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80024ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80024b0:	2301      	movs	r3, #1
 80024b2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	f383 8810 	msr	PRIMASK, r3
}
 80024ba:	46c0      	nop			@ (mov r8, r8)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4922      	ldr	r1, [pc, #136]	@ (8002550 <UART_CheckIdleState+0x150>)
 80024c8:	400a      	ands	r2, r1
 80024ca:	601a      	str	r2, [r3, #0]
 80024cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024ce:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	f383 8810 	msr	PRIMASK, r3
}
 80024d6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80024d8:	f3ef 8310 	mrs	r3, PRIMASK
 80024dc:	61bb      	str	r3, [r7, #24]
  return(result);
 80024de:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80024e2:	2301      	movs	r3, #1
 80024e4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	f383 8810 	msr	PRIMASK, r3
}
 80024ec:	46c0      	nop			@ (mov r8, r8)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	689a      	ldr	r2, [r3, #8]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	2101      	movs	r1, #1
 80024fa:	438a      	bics	r2, r1
 80024fc:	609a      	str	r2, [r3, #8]
 80024fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002500:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002502:	6a3b      	ldr	r3, [r7, #32]
 8002504:	f383 8810 	msr	PRIMASK, r3
}
 8002508:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	228c      	movs	r2, #140	@ 0x8c
 800250e:	2120      	movs	r1, #32
 8002510:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2284      	movs	r2, #132	@ 0x84
 8002516:	2100      	movs	r1, #0
 8002518:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800251a:	2303      	movs	r3, #3
 800251c:	e012      	b.n	8002544 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2288      	movs	r2, #136	@ 0x88
 8002522:	2120      	movs	r1, #32
 8002524:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	228c      	movs	r2, #140	@ 0x8c
 800252a:	2120      	movs	r1, #32
 800252c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2200      	movs	r2, #0
 8002532:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2200      	movs	r2, #0
 8002538:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2284      	movs	r2, #132	@ 0x84
 800253e:	2100      	movs	r1, #0
 8002540:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002542:	2300      	movs	r3, #0
}
 8002544:	0018      	movs	r0, r3
 8002546:	46bd      	mov	sp, r7
 8002548:	b010      	add	sp, #64	@ 0x40
 800254a:	bd80      	pop	{r7, pc}
 800254c:	01ffffff 	.word	0x01ffffff
 8002550:	fffffedf 	.word	0xfffffedf

08002554 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b084      	sub	sp, #16
 8002558:	af00      	add	r7, sp, #0
 800255a:	60f8      	str	r0, [r7, #12]
 800255c:	60b9      	str	r1, [r7, #8]
 800255e:	603b      	str	r3, [r7, #0]
 8002560:	1dfb      	adds	r3, r7, #7
 8002562:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002564:	e04b      	b.n	80025fe <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002566:	69bb      	ldr	r3, [r7, #24]
 8002568:	3301      	adds	r3, #1
 800256a:	d048      	beq.n	80025fe <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800256c:	f7fe fbaa 	bl	8000cc4 <HAL_GetTick>
 8002570:	0002      	movs	r2, r0
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	69ba      	ldr	r2, [r7, #24]
 8002578:	429a      	cmp	r2, r3
 800257a:	d302      	bcc.n	8002582 <UART_WaitOnFlagUntilTimeout+0x2e>
 800257c:	69bb      	ldr	r3, [r7, #24]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d101      	bne.n	8002586 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002582:	2303      	movs	r3, #3
 8002584:	e04b      	b.n	800261e <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	2204      	movs	r2, #4
 800258e:	4013      	ands	r3, r2
 8002590:	d035      	beq.n	80025fe <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	69db      	ldr	r3, [r3, #28]
 8002598:	2208      	movs	r2, #8
 800259a:	4013      	ands	r3, r2
 800259c:	2b08      	cmp	r3, #8
 800259e:	d111      	bne.n	80025c4 <UART_WaitOnFlagUntilTimeout+0x70>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	2208      	movs	r2, #8
 80025a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	0018      	movs	r0, r3
 80025ac:	f000 f83c 	bl	8002628 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2290      	movs	r2, #144	@ 0x90
 80025b4:	2108      	movs	r1, #8
 80025b6:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2284      	movs	r2, #132	@ 0x84
 80025bc:	2100      	movs	r1, #0
 80025be:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e02c      	b.n	800261e <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	69da      	ldr	r2, [r3, #28]
 80025ca:	2380      	movs	r3, #128	@ 0x80
 80025cc:	011b      	lsls	r3, r3, #4
 80025ce:	401a      	ands	r2, r3
 80025d0:	2380      	movs	r3, #128	@ 0x80
 80025d2:	011b      	lsls	r3, r3, #4
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d112      	bne.n	80025fe <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	2280      	movs	r2, #128	@ 0x80
 80025de:	0112      	lsls	r2, r2, #4
 80025e0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	0018      	movs	r0, r3
 80025e6:	f000 f81f 	bl	8002628 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2290      	movs	r2, #144	@ 0x90
 80025ee:	2120      	movs	r1, #32
 80025f0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2284      	movs	r2, #132	@ 0x84
 80025f6:	2100      	movs	r1, #0
 80025f8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	e00f      	b.n	800261e <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	69db      	ldr	r3, [r3, #28]
 8002604:	68ba      	ldr	r2, [r7, #8]
 8002606:	4013      	ands	r3, r2
 8002608:	68ba      	ldr	r2, [r7, #8]
 800260a:	1ad3      	subs	r3, r2, r3
 800260c:	425a      	negs	r2, r3
 800260e:	4153      	adcs	r3, r2
 8002610:	b2db      	uxtb	r3, r3
 8002612:	001a      	movs	r2, r3
 8002614:	1dfb      	adds	r3, r7, #7
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	429a      	cmp	r2, r3
 800261a:	d0a4      	beq.n	8002566 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800261c:	2300      	movs	r3, #0
}
 800261e:	0018      	movs	r0, r3
 8002620:	46bd      	mov	sp, r7
 8002622:	b004      	add	sp, #16
 8002624:	bd80      	pop	{r7, pc}
	...

08002628 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b08e      	sub	sp, #56	@ 0x38
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002630:	f3ef 8310 	mrs	r3, PRIMASK
 8002634:	617b      	str	r3, [r7, #20]
  return(result);
 8002636:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002638:	637b      	str	r3, [r7, #52]	@ 0x34
 800263a:	2301      	movs	r3, #1
 800263c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800263e:	69bb      	ldr	r3, [r7, #24]
 8002640:	f383 8810 	msr	PRIMASK, r3
}
 8002644:	46c0      	nop			@ (mov r8, r8)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4926      	ldr	r1, [pc, #152]	@ (80026ec <UART_EndRxTransfer+0xc4>)
 8002652:	400a      	ands	r2, r1
 8002654:	601a      	str	r2, [r3, #0]
 8002656:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002658:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	f383 8810 	msr	PRIMASK, r3
}
 8002660:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002662:	f3ef 8310 	mrs	r3, PRIMASK
 8002666:	623b      	str	r3, [r7, #32]
  return(result);
 8002668:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800266a:	633b      	str	r3, [r7, #48]	@ 0x30
 800266c:	2301      	movs	r3, #1
 800266e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002672:	f383 8810 	msr	PRIMASK, r3
}
 8002676:	46c0      	nop			@ (mov r8, r8)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	689a      	ldr	r2, [r3, #8]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	491b      	ldr	r1, [pc, #108]	@ (80026f0 <UART_EndRxTransfer+0xc8>)
 8002684:	400a      	ands	r2, r1
 8002686:	609a      	str	r2, [r3, #8]
 8002688:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800268a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800268c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800268e:	f383 8810 	msr	PRIMASK, r3
}
 8002692:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002698:	2b01      	cmp	r3, #1
 800269a:	d118      	bne.n	80026ce <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800269c:	f3ef 8310 	mrs	r3, PRIMASK
 80026a0:	60bb      	str	r3, [r7, #8]
  return(result);
 80026a2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80026a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80026a6:	2301      	movs	r3, #1
 80026a8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	f383 8810 	msr	PRIMASK, r3
}
 80026b0:	46c0      	nop			@ (mov r8, r8)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2110      	movs	r1, #16
 80026be:	438a      	bics	r2, r1
 80026c0:	601a      	str	r2, [r3, #0]
 80026c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026c4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	f383 8810 	msr	PRIMASK, r3
}
 80026cc:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	228c      	movs	r2, #140	@ 0x8c
 80026d2:	2120      	movs	r1, #32
 80026d4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2200      	movs	r2, #0
 80026da:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2200      	movs	r2, #0
 80026e0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80026e2:	46c0      	nop			@ (mov r8, r8)
 80026e4:	46bd      	mov	sp, r7
 80026e6:	b00e      	add	sp, #56	@ 0x38
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	46c0      	nop			@ (mov r8, r8)
 80026ec:	fffffedf 	.word	0xfffffedf
 80026f0:	effffffe 	.word	0xeffffffe

080026f4 <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b092      	sub	sp, #72	@ 0x48
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	60f8      	str	r0, [r7, #12]
 80026fc:	60b9      	str	r1, [r7, #8]
 80026fe:	607a      	str	r2, [r7, #4]
 8002700:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	647b      	str	r3, [r7, #68]	@ 0x44
 8002706:	233f      	movs	r3, #63	@ 0x3f
 8002708:	18fb      	adds	r3, r7, r3
 800270a:	2200      	movs	r2, #0
 800270c:	701a      	strb	r2, [r3, #0]
 800270e:	2334      	movs	r3, #52	@ 0x34
 8002710:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002712:	2300      	movs	r3, #0
 8002714:	643b      	str	r3, [r7, #64]	@ 0x40
 8002716:	e009      	b.n	800272c <_tx_byte_pool_create+0x38>
 8002718:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800271a:	1c5a      	adds	r2, r3, #1
 800271c:	647a      	str	r2, [r7, #68]	@ 0x44
 800271e:	223f      	movs	r2, #63	@ 0x3f
 8002720:	18ba      	adds	r2, r7, r2
 8002722:	7812      	ldrb	r2, [r2, #0]
 8002724:	701a      	strb	r2, [r3, #0]
 8002726:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002728:	3301      	adds	r3, #1
 800272a:	643b      	str	r3, [r7, #64]	@ 0x40
 800272c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800272e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002730:	429a      	cmp	r2, r3
 8002732:	d3f1      	bcc.n	8002718 <_tx_byte_pool_create+0x24>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	2203      	movs	r2, #3
 8002738:	4393      	bics	r3, r2
 800273a:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	68ba      	ldr	r2, [r7, #8]
 8002740:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	687a      	ldr	r2, [r7, #4]
 8002746:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	683a      	ldr	r2, [r7, #0]
 800274c:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	687a      	ldr	r2, [r7, #4]
 8002752:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	687a      	ldr	r2, [r7, #4]
 8002758:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	3b08      	subs	r3, #8
 800275e:	001a      	movs	r2, r3
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2202      	movs	r2, #2
 8002768:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	637b      	str	r3, [r7, #52]	@ 0x34
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 800276e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	18d3      	adds	r3, r2, r3
 8002774:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 8002776:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002778:	3b04      	subs	r3, #4
 800277a:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	633b      	str	r3, [r7, #48]	@ 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 8002780:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002782:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *block_indirect_ptr =  temp_ptr;
 8002784:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002786:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002788:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 800278a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800278c:	3b04      	subs	r3, #4
 800278e:	637b      	str	r3, [r7, #52]	@ 0x34
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 8002790:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002792:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8002794:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	633b      	str	r3, [r7, #48]	@ 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 800279e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *block_indirect_ptr =  block_ptr;
 80027a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027a4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80027a6:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	637b      	str	r3, [r7, #52]	@ 0x34
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 80027ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027ae:	3304      	adds	r3, #4
 80027b0:	637b      	str	r3, [r7, #52]	@ 0x34
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 80027b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027b4:	62bb      	str	r3, [r7, #40]	@ 0x28
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 80027b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027b8:	4a1e      	ldr	r2, [pc, #120]	@ (8002834 <_tx_byte_pool_create+0x140>)
 80027ba:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2200      	movs	r2, #0
 80027c0:	621a      	str	r2, [r3, #32]
__attribute__( ( always_inline ) ) static inline unsigned int __disable_interrupts(void)
{

unsigned int  primask_value;

    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80027c2:	f3ef 8310 	mrs	r3, PRIMASK
 80027c6:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80027c8:	b672      	cpsid	i
    return(primask_value);
 80027ca:	69bb      	ldr	r3, [r7, #24]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 80027cc:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	4a19      	ldr	r2, [pc, #100]	@ (8002838 <_tx_byte_pool_create+0x144>)
 80027d2:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 80027d4:	4b19      	ldr	r3, [pc, #100]	@ (800283c <_tx_byte_pool_create+0x148>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d109      	bne.n	80027f0 <_tx_byte_pool_create+0xfc>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 80027dc:	4b18      	ldr	r3, [pc, #96]	@ (8002840 <_tx_byte_pool_create+0x14c>)
 80027de:	68fa      	ldr	r2, [r7, #12]
 80027e0:	601a      	str	r2, [r3, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	68fa      	ldr	r2, [r7, #12]
 80027e6:	62da      	str	r2, [r3, #44]	@ 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	68fa      	ldr	r2, [r7, #12]
 80027ec:	631a      	str	r2, [r3, #48]	@ 0x30
 80027ee:	e011      	b.n	8002814 <_tx_byte_pool_create+0x120>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 80027f0:	4b13      	ldr	r3, [pc, #76]	@ (8002840 <_tx_byte_pool_create+0x14c>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	623b      	str	r3, [r7, #32]
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 80027f6:	6a3b      	ldr	r3, [r7, #32]
 80027f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027fa:	61fb      	str	r3, [r7, #28]

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 80027fc:	6a3b      	ldr	r3, [r7, #32]
 80027fe:	68fa      	ldr	r2, [r7, #12]
 8002800:	631a      	str	r2, [r3, #48]	@ 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	68fa      	ldr	r2, [r7, #12]
 8002806:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	69fa      	ldr	r2, [r7, #28]
 800280c:	631a      	str	r2, [r3, #48]	@ 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	6a3a      	ldr	r2, [r7, #32]
 8002812:	62da      	str	r2, [r3, #44]	@ 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 8002814:	4b09      	ldr	r3, [pc, #36]	@ (800283c <_tx_byte_pool_create+0x148>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	1c5a      	adds	r2, r3, #1
 800281a:	4b08      	ldr	r3, [pc, #32]	@ (800283c <_tx_byte_pool_create+0x148>)
 800281c:	601a      	str	r2, [r3, #0]
 800281e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002820:	617b      	str	r3, [r7, #20]
}

__attribute__( ( always_inline ) ) static inline void __restore_interrupts(unsigned int primask_value)
{

    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	f383 8810 	msr	PRIMASK, r3
}
 8002828:	46c0      	nop			@ (mov r8, r8)

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800282a:	2300      	movs	r3, #0
}
 800282c:	0018      	movs	r0, r3
 800282e:	46bd      	mov	sp, r7
 8002830:	b012      	add	sp, #72	@ 0x48
 8002832:	bd80      	pop	{r7, pc}
 8002834:	ffffeeee 	.word	0xffffeeee
 8002838:	42595445 	.word	0x42595445
 800283c:	20000e70 	.word	0x20000e70
 8002840:	20000e6c 	.word	0x20000e6c

08002844 <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	af00      	add	r7, sp, #0

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 8002848:	f000 fd8e 	bl	8003368 <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 800284c:	f001 fa1a 	bl	8003c84 <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 8002850:	4b13      	ldr	r3, [pc, #76]	@ (80028a0 <_tx_initialize_high_level+0x5c>)
 8002852:	2200      	movs	r2, #0
 8002854:	601a      	str	r2, [r3, #0]
 8002856:	4b13      	ldr	r3, [pc, #76]	@ (80028a4 <_tx_initialize_high_level+0x60>)
 8002858:	2200      	movs	r2, #0
 800285a:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 800285c:	4b12      	ldr	r3, [pc, #72]	@ (80028a8 <_tx_initialize_high_level+0x64>)
 800285e:	2200      	movs	r2, #0
 8002860:	601a      	str	r2, [r3, #0]
 8002862:	4b12      	ldr	r3, [pc, #72]	@ (80028ac <_tx_initialize_high_level+0x68>)
 8002864:	2200      	movs	r2, #0
 8002866:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 8002868:	4b11      	ldr	r3, [pc, #68]	@ (80028b0 <_tx_initialize_high_level+0x6c>)
 800286a:	2200      	movs	r2, #0
 800286c:	601a      	str	r2, [r3, #0]
 800286e:	4b11      	ldr	r3, [pc, #68]	@ (80028b4 <_tx_initialize_high_level+0x70>)
 8002870:	2200      	movs	r2, #0
 8002872:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 8002874:	4b10      	ldr	r3, [pc, #64]	@ (80028b8 <_tx_initialize_high_level+0x74>)
 8002876:	2200      	movs	r2, #0
 8002878:	601a      	str	r2, [r3, #0]
 800287a:	4b10      	ldr	r3, [pc, #64]	@ (80028bc <_tx_initialize_high_level+0x78>)
 800287c:	2200      	movs	r2, #0
 800287e:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 8002880:	4b0f      	ldr	r3, [pc, #60]	@ (80028c0 <_tx_initialize_high_level+0x7c>)
 8002882:	2200      	movs	r2, #0
 8002884:	601a      	str	r2, [r3, #0]
 8002886:	4b0f      	ldr	r3, [pc, #60]	@ (80028c4 <_tx_initialize_high_level+0x80>)
 8002888:	2200      	movs	r2, #0
 800288a:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 800288c:	4b0e      	ldr	r3, [pc, #56]	@ (80028c8 <_tx_initialize_high_level+0x84>)
 800288e:	2200      	movs	r2, #0
 8002890:	601a      	str	r2, [r3, #0]
 8002892:	4b0e      	ldr	r3, [pc, #56]	@ (80028cc <_tx_initialize_high_level+0x88>)
 8002894:	2200      	movs	r2, #0
 8002896:	601a      	str	r2, [r3, #0]
#endif
}
 8002898:	46c0      	nop			@ (mov r8, r8)
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
 800289e:	46c0      	nop			@ (mov r8, r8)
 80028a0:	20000e44 	.word	0x20000e44
 80028a4:	20000e48 	.word	0x20000e48
 80028a8:	20000e4c 	.word	0x20000e4c
 80028ac:	20000e50 	.word	0x20000e50
 80028b0:	20000e54 	.word	0x20000e54
 80028b4:	20000e58 	.word	0x20000e58
 80028b8:	20000e64 	.word	0x20000e64
 80028bc:	20000e68 	.word	0x20000e68
 80028c0:	20000e6c 	.word	0x20000e6c
 80028c4:	20000e70 	.word	0x20000e70
 80028c8:	20000e5c 	.word	0x20000e5c
 80028cc:	20000e60 	.word	0x20000e60

080028d0 <_tx_initialize_kernel_enter>:
/*                                            added EPK initialization,   */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 80028d4:	4b10      	ldr	r3, [pc, #64]	@ (8002918 <_tx_initialize_kernel_enter+0x48>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a10      	ldr	r2, [pc, #64]	@ (800291c <_tx_initialize_kernel_enter+0x4c>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d00b      	beq.n	80028f6 <_tx_initialize_kernel_enter+0x26>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate
           initialization is in progress.  Note that this variable is
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 80028de:	4b0e      	ldr	r3, [pc, #56]	@ (8002918 <_tx_initialize_kernel_enter+0x48>)
 80028e0:	4a0f      	ldr	r2, [pc, #60]	@ (8002920 <_tx_initialize_kernel_enter+0x50>)
 80028e2:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 80028e4:	f7fd fc14 	bl	8000110 <_tx_initialize_low_level>

        /* Invoke the high-level initialization to exercise all of the
           ThreadX components and the application's initialization
           function.  */
        _tx_initialize_high_level();
 80028e8:	f7ff ffac 	bl	8002844 <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 80028ec:	4b0d      	ldr	r3, [pc, #52]	@ (8002924 <_tx_initialize_kernel_enter+0x54>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	1c5a      	adds	r2, r3, #1
 80028f2:	4b0c      	ldr	r3, [pc, #48]	@ (8002924 <_tx_initialize_kernel_enter+0x54>)
 80028f4:	601a      	str	r2, [r3, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate
       initialization is in progress.  Note that this variable is
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 80028f6:	4b08      	ldr	r3, [pc, #32]	@ (8002918 <_tx_initialize_kernel_enter+0x48>)
 80028f8:	4a09      	ldr	r2, [pc, #36]	@ (8002920 <_tx_initialize_kernel_enter+0x50>)
 80028fa:	601a      	str	r2, [r3, #0]

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 80028fc:	4b0a      	ldr	r3, [pc, #40]	@ (8002928 <_tx_initialize_kernel_enter+0x58>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	0018      	movs	r0, r3
 8002902:	f7fd fdc1 	bl	8000488 <tx_application_define>

    /* Set the system state in preparation for entering the thread
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 8002906:	4b04      	ldr	r3, [pc, #16]	@ (8002918 <_tx_initialize_kernel_enter+0x48>)
 8002908:	2200      	movs	r2, #0
 800290a:	601a      	str	r2, [r3, #0]
    /* Initialize Execution Profile Kit.  */
    _tx_execution_initialize();
#endif

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 800290c:	f7fd fc48 	bl	80001a0 <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 8002910:	46c0      	nop			@ (mov r8, r8)
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	46c0      	nop			@ (mov r8, r8)
 8002918:	2000000c 	.word	0x2000000c
 800291c:	f0f0f0f1 	.word	0xf0f0f0f1
 8002920:	f0f0f0f0 	.word	0xf0f0f0f0
 8002924:	20000f14 	.word	0x20000f14
 8002928:	20000e74 	.word	0x20000e74

0800292c <_tx_queue_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_queue_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b08c      	sub	sp, #48	@ 0x30
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
 8002934:	6039      	str	r1, [r7, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8002936:	f3ef 8310 	mrs	r3, PRIMASK
 800293a:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800293c:	b672      	cpsid	i
    return(primask_value);
 800293e:	69bb      	ldr	r3, [r7, #24]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the queue.  */
    TX_DISABLE
 8002940:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_queue_cleanup))
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002946:	4b37      	ldr	r3, [pc, #220]	@ (8002a24 <_tx_queue_cleanup+0xf8>)
 8002948:	429a      	cmp	r2, r3
 800294a:	d160      	bne.n	8002a0e <_tx_queue_cleanup+0xe2>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	22ac      	movs	r2, #172	@ 0xac
 8002950:	589b      	ldr	r3, [r3, r2]
 8002952:	683a      	ldr	r2, [r7, #0]
 8002954:	429a      	cmp	r2, r3
 8002956:	d15a      	bne.n	8002a0e <_tx_queue_cleanup+0xe2>
        {

            /* Setup pointer to queue control block.  */
            queue_ptr =  TX_VOID_TO_QUEUE_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800295c:	62bb      	str	r3, [r7, #40]	@ 0x28

            /* Check for NULL queue pointer.  */
            if (queue_ptr != TX_NULL)
 800295e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002960:	2b00      	cmp	r3, #0
 8002962:	d054      	beq.n	8002a0e <_tx_queue_cleanup+0xe2>
            {

                /* Is the queue ID valid?  */
                if (queue_ptr -> tx_queue_id == TX_QUEUE_ID)
 8002964:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a2f      	ldr	r2, [pc, #188]	@ (8002a28 <_tx_queue_cleanup+0xfc>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d14f      	bne.n	8002a0e <_tx_queue_cleanup+0xe2>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (queue_ptr -> tx_queue_suspended_count != TX_NO_SUSPENSIONS)
 800296e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002970:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002972:	2b00      	cmp	r3, #0
 8002974:	d04b      	beq.n	8002a0e <_tx_queue_cleanup+0xe2>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2200      	movs	r2, #0
 800297a:	669a      	str	r2, [r3, #104]	@ 0x68

                        /* Decrement the suspended count.  */
                        queue_ptr -> tx_queue_suspended_count--;
 800297c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800297e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002980:	1e5a      	subs	r2, r3, #1
 8002982:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002984:	62da      	str	r2, [r3, #44]	@ 0x2c

                        /* Pickup the suspended count.  */
                        suspended_count =  queue_ptr -> tx_queue_suspended_count;
 8002986:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002988:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800298a:	627b      	str	r3, [r7, #36]	@ 0x24

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 800298c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800298e:	2b00      	cmp	r3, #0
 8002990:	d103      	bne.n	800299a <_tx_queue_cleanup+0x6e>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 8002992:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002994:	2200      	movs	r2, #0
 8002996:	629a      	str	r2, [r3, #40]	@ 0x28
 8002998:	e013      	b.n	80029c2 <_tx_queue_cleanup+0x96>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800299e:	623b      	str	r3, [r7, #32]
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029a4:	61fb      	str	r3, [r7, #28]
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 80029a6:	6a3b      	ldr	r3, [r7, #32]
 80029a8:	69fa      	ldr	r2, [r7, #28]
 80029aa:	675a      	str	r2, [r3, #116]	@ 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 80029ac:	69fb      	ldr	r3, [r7, #28]
 80029ae:	6a3a      	ldr	r2, [r7, #32]
 80029b0:	671a      	str	r2, [r3, #112]	@ 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (queue_ptr -> tx_queue_suspension_list == thread_ptr)
 80029b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029b6:	687a      	ldr	r2, [r7, #4]
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d102      	bne.n	80029c2 <_tx_queue_cleanup+0x96>
                            {

                                /* Update the list head pointer.  */
                                queue_ptr -> tx_queue_suspension_list =         next_thread;
 80029bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029be:	6a3a      	ldr	r2, [r7, #32]
 80029c0:	629a      	str	r2, [r3, #40]	@ 0x28
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_QUEUE_SUSP)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029c6:	2b05      	cmp	r3, #5
 80029c8:	d121      	bne.n	8002a0e <_tx_queue_cleanup+0xe2>
                            /* Increment the number of timeouts on this queue.  */
                            queue_ptr -> tx_queue_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            if (queue_ptr -> tx_queue_enqueued != TX_NO_MESSAGES)
 80029ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029cc:	691b      	ldr	r3, [r3, #16]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d004      	beq.n	80029dc <_tx_queue_cleanup+0xb0>
                            {

                                /* Queue full timeout!  */
                                thread_ptr -> tx_thread_suspend_status =  TX_QUEUE_FULL;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2284      	movs	r2, #132	@ 0x84
 80029d6:	210b      	movs	r1, #11
 80029d8:	5099      	str	r1, [r3, r2]
 80029da:	e003      	b.n	80029e4 <_tx_queue_cleanup+0xb8>
                            }
                            else
                            {

                                /* Queue empty timeout!  */
                                thread_ptr -> tx_thread_suspend_status =  TX_QUEUE_EMPTY;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2284      	movs	r2, #132	@ 0x84
 80029e0:	210a      	movs	r1, #10
 80029e2:	5099      	str	r1, [r3, r2]
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 80029e4:	4b11      	ldr	r3, [pc, #68]	@ (8002a2c <_tx_queue_cleanup+0x100>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	1c5a      	adds	r2, r3, #1
 80029ea:	4b10      	ldr	r3, [pc, #64]	@ (8002a2c <_tx_queue_cleanup+0x100>)
 80029ec:	601a      	str	r2, [r3, #0]
 80029ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029f0:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	f383 8810 	msr	PRIMASK, r3
}
 80029f8:	46c0      	nop			@ (mov r8, r8)

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	0018      	movs	r0, r3
 80029fe:	f000 fe0f 	bl	8003620 <_tx_thread_system_resume>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8002a02:	f3ef 8310 	mrs	r3, PRIMASK
 8002a06:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8002a08:	b672      	cpsid	i
    return(primask_value);
 8002a0a:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 8002a0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002a0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a10:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	f383 8810 	msr	PRIMASK, r3
}
 8002a18:	46c0      	nop			@ (mov r8, r8)
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8002a1a:	46c0      	nop			@ (mov r8, r8)
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	b00c      	add	sp, #48	@ 0x30
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	46c0      	nop			@ (mov r8, r8)
 8002a24:	0800292d 	.word	0x0800292d
 8002a28:	51554555 	.word	0x51554555
 8002a2c:	20000f14 	.word	0x20000f14

08002a30 <_tx_queue_create>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_create(TX_QUEUE *queue_ptr, CHAR *name_ptr, UINT message_size,
                        VOID *queue_start, ULONG queue_size)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b090      	sub	sp, #64	@ 0x40
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	60f8      	str	r0, [r7, #12]
 8002a38:	60b9      	str	r1, [r7, #8]
 8002a3a:	607a      	str	r2, [r7, #4]
 8002a3c:	603b      	str	r3, [r7, #0]
TX_QUEUE        *next_queue;
TX_QUEUE        *previous_queue;


    /* Initialize queue control block to all zeros.  */
    TX_MEMSET(queue_ptr, 0, (sizeof(TX_QUEUE)));
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002a42:	2337      	movs	r3, #55	@ 0x37
 8002a44:	18fb      	adds	r3, r7, r3
 8002a46:	2200      	movs	r2, #0
 8002a48:	701a      	strb	r2, [r3, #0]
 8002a4a:	2338      	movs	r3, #56	@ 0x38
 8002a4c:	633b      	str	r3, [r7, #48]	@ 0x30
 8002a4e:	2300      	movs	r3, #0
 8002a50:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002a52:	e009      	b.n	8002a68 <_tx_queue_create+0x38>
 8002a54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a56:	1c5a      	adds	r2, r3, #1
 8002a58:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002a5a:	2237      	movs	r2, #55	@ 0x37
 8002a5c:	18ba      	adds	r2, r7, r2
 8002a5e:	7812      	ldrb	r2, [r2, #0]
 8002a60:	701a      	strb	r2, [r3, #0]
 8002a62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a64:	3301      	adds	r3, #1
 8002a66:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002a68:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002a6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d3f1      	bcc.n	8002a54 <_tx_queue_create+0x24>

    /* Setup the basic queue fields.  */
    queue_ptr -> tx_queue_name =             name_ptr;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	68ba      	ldr	r2, [r7, #8]
 8002a74:	605a      	str	r2, [r3, #4]

    /* Save the message size in the control block.  */
    queue_ptr -> tx_queue_message_size =  message_size;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	687a      	ldr	r2, [r7, #4]
 8002a7a:	609a      	str	r2, [r3, #8]

    /* Determine how many messages will fit in the queue area and the number
       of ULONGs used.  */
    capacity =    (UINT) (queue_size / ((ULONG) (((ULONG) message_size) * (sizeof(ULONG)))));
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	0019      	movs	r1, r3
 8002a82:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8002a84:	f7fd fc74 	bl	8000370 <__udivsi3>
 8002a88:	0003      	movs	r3, r0
 8002a8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    used_words =  capacity * message_size;
 8002a8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a8e:	687a      	ldr	r2, [r7, #4]
 8002a90:	4353      	muls	r3, r2
 8002a92:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Save the starting address and calculate the ending address of
       the queue.  Note that the ending address is really one past the
       end!  */
    queue_ptr -> tx_queue_start =  TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	683a      	ldr	r2, [r7, #0]
 8002a98:	619a      	str	r2, [r3, #24]
    queue_ptr -> tx_queue_end =    TX_ULONG_POINTER_ADD(queue_ptr -> tx_queue_start, used_words);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	699a      	ldr	r2, [r3, #24]
 8002a9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002aa0:	009b      	lsls	r3, r3, #2
 8002aa2:	18d2      	adds	r2, r2, r3
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	61da      	str	r2, [r3, #28]

    /* Set the read and write pointers to the beginning of the queue
       area.  */
    queue_ptr -> tx_queue_read =   TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	683a      	ldr	r2, [r7, #0]
 8002aac:	621a      	str	r2, [r3, #32]
    queue_ptr -> tx_queue_write =  TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	683a      	ldr	r2, [r7, #0]
 8002ab2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Setup the number of enqueued messages and the number of message
       slots available in the queue.  */
    queue_ptr -> tx_queue_available_storage =  (UINT) capacity;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002ab8:	615a      	str	r2, [r3, #20]
    queue_ptr -> tx_queue_capacity =           (UINT) capacity;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002abe:	60da      	str	r2, [r3, #12]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8002ac0:	f3ef 8310 	mrs	r3, PRIMASK
 8002ac4:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8002ac6:	b672      	cpsid	i
    return(primask_value);
 8002ac8:	69bb      	ldr	r3, [r7, #24]

    /* Disable interrupts to put the queue on the created list.  */
    TX_DISABLE
 8002aca:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Setup the queue ID to make it valid.  */
    queue_ptr -> tx_queue_id =  TX_QUEUE_ID;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	4a19      	ldr	r2, [pc, #100]	@ (8002b34 <_tx_queue_create+0x104>)
 8002ad0:	601a      	str	r2, [r3, #0]

    /* Place the queue on the list of created queues.  First,
       check for an empty list.  */
    if (_tx_queue_created_count == TX_EMPTY)
 8002ad2:	4b19      	ldr	r3, [pc, #100]	@ (8002b38 <_tx_queue_create+0x108>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d109      	bne.n	8002aee <_tx_queue_create+0xbe>
    {

        /* The created queue list is empty.  Add queue to empty list.  */
        _tx_queue_created_ptr =                   queue_ptr;
 8002ada:	4b18      	ldr	r3, [pc, #96]	@ (8002b3c <_tx_queue_create+0x10c>)
 8002adc:	68fa      	ldr	r2, [r7, #12]
 8002ade:	601a      	str	r2, [r3, #0]
        queue_ptr -> tx_queue_created_next =      queue_ptr;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	68fa      	ldr	r2, [r7, #12]
 8002ae4:	631a      	str	r2, [r3, #48]	@ 0x30
        queue_ptr -> tx_queue_created_previous =  queue_ptr;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	68fa      	ldr	r2, [r7, #12]
 8002aea:	635a      	str	r2, [r3, #52]	@ 0x34
 8002aec:	e011      	b.n	8002b12 <_tx_queue_create+0xe2>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_queue =      _tx_queue_created_ptr;
 8002aee:	4b13      	ldr	r3, [pc, #76]	@ (8002b3c <_tx_queue_create+0x10c>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	623b      	str	r3, [r7, #32]
        previous_queue =  next_queue -> tx_queue_created_previous;
 8002af4:	6a3b      	ldr	r3, [r7, #32]
 8002af6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002af8:	61fb      	str	r3, [r7, #28]

        /* Place the new queue in the list.  */
        next_queue -> tx_queue_created_previous =  queue_ptr;
 8002afa:	6a3b      	ldr	r3, [r7, #32]
 8002afc:	68fa      	ldr	r2, [r7, #12]
 8002afe:	635a      	str	r2, [r3, #52]	@ 0x34
        previous_queue -> tx_queue_created_next =  queue_ptr;
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	68fa      	ldr	r2, [r7, #12]
 8002b04:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Setup this queues's created links.  */
        queue_ptr -> tx_queue_created_previous =  previous_queue;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	69fa      	ldr	r2, [r7, #28]
 8002b0a:	635a      	str	r2, [r3, #52]	@ 0x34
        queue_ptr -> tx_queue_created_next =      next_queue;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	6a3a      	ldr	r2, [r7, #32]
 8002b10:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Increment the created queue count.  */
    _tx_queue_created_count++;
 8002b12:	4b09      	ldr	r3, [pc, #36]	@ (8002b38 <_tx_queue_create+0x108>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	1c5a      	adds	r2, r3, #1
 8002b18:	4b07      	ldr	r3, [pc, #28]	@ (8002b38 <_tx_queue_create+0x108>)
 8002b1a:	601a      	str	r2, [r3, #0]
 8002b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b1e:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	f383 8810 	msr	PRIMASK, r3
}
 8002b26:	46c0      	nop			@ (mov r8, r8)

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8002b28:	2300      	movs	r3, #0
}
 8002b2a:	0018      	movs	r0, r3
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	b010      	add	sp, #64	@ 0x40
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	46c0      	nop			@ (mov r8, r8)
 8002b34:	51554555 	.word	0x51554555
 8002b38:	20000e50 	.word	0x20000e50
 8002b3c:	20000e4c 	.word	0x20000e4c

08002b40 <_tx_queue_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_receive(TX_QUEUE *queue_ptr, VOID *destination_ptr, ULONG wait_option)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b094      	sub	sp, #80	@ 0x50
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	60f8      	str	r0, [r7, #12]
 8002b48:	60b9      	str	r1, [r7, #8]
 8002b4a:	607a      	str	r2, [r7, #4]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	643b      	str	r3, [r7, #64]	@ 0x40
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8002b50:	f3ef 8310 	mrs	r3, PRIMASK
 8002b54:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile (" CPSID i" : : : "memory" );
 8002b56:	b672      	cpsid	i
    return(primask_value);
 8002b58:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    /* Disable interrupts to receive message from queue.  */
    TX_DISABLE
 8002b5a:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* Log this kernel call.  */
    TX_EL_QUEUE_RECEIVE_INSERT

    /* Pickup the thread suspension count.  */
    suspended_count =  queue_ptr -> tx_queue_suspended_count;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b60:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* Determine if there is anything in the queue.  */
    if (queue_ptr -> tx_queue_enqueued != TX_NO_MESSAGES)
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	691b      	ldr	r3, [r3, #16]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d100      	bne.n	8002b6c <_tx_queue_receive+0x2c>
 8002b6a:	e137      	b.n	8002ddc <_tx_queue_receive+0x29c>
    {

        /* Determine if there are any suspensions.  */
        if (suspended_count == TX_NO_SUSPENSIONS)
 8002b6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d13c      	bne.n	8002bec <_tx_queue_receive+0xac>
        {

            /* There is a message waiting in the queue and there are no suspensi.  */

            /* Setup source and destination pointers.  */
            source =       queue_ptr -> tx_queue_read;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	6a1b      	ldr	r3, [r3, #32]
 8002b76:	64fb      	str	r3, [r7, #76]	@ 0x4c
            destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(destination_ptr);
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	64bb      	str	r3, [r7, #72]	@ 0x48
            size =         queue_ptr -> tx_queue_message_size;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	647b      	str	r3, [r7, #68]	@ 0x44

            /* Copy message. Note that the source and destination pointers are
               incremented by the macro.  */
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 8002b82:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002b84:	1d13      	adds	r3, r2, #4
 8002b86:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002b88:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002b8a:	1d19      	adds	r1, r3, #4
 8002b8c:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002b8e:	6812      	ldr	r2, [r2, #0]
 8002b90:	601a      	str	r2, [r3, #0]
 8002b92:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d90e      	bls.n	8002bb6 <_tx_queue_receive+0x76>
 8002b98:	e007      	b.n	8002baa <_tx_queue_receive+0x6a>
 8002b9a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002b9c:	1d13      	adds	r3, r2, #4
 8002b9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002ba0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002ba2:	1d19      	adds	r1, r3, #4
 8002ba4:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002ba6:	6812      	ldr	r2, [r2, #0]
 8002ba8:	601a      	str	r2, [r3, #0]
 8002baa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002bac:	3b01      	subs	r3, #1
 8002bae:	647b      	str	r3, [r7, #68]	@ 0x44
 8002bb0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d1f1      	bne.n	8002b9a <_tx_queue_receive+0x5a>

            /* Determine if we are at the end.  */
            if (source == queue_ptr -> tx_queue_end)
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	69db      	ldr	r3, [r3, #28]
 8002bba:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d102      	bne.n	8002bc6 <_tx_queue_receive+0x86>
            {

                /* Yes, wrap around to the beginning.  */
                source =  queue_ptr -> tx_queue_start;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	699b      	ldr	r3, [r3, #24]
 8002bc4:	64fb      	str	r3, [r7, #76]	@ 0x4c
            }

            /* Setup the queue read pointer.   */
            queue_ptr -> tx_queue_read =  source;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002bca:	621a      	str	r2, [r3, #32]

            /* Increase the amount of available storage.  */
            queue_ptr -> tx_queue_available_storage++;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	695b      	ldr	r3, [r3, #20]
 8002bd0:	1c5a      	adds	r2, r3, #1
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	615a      	str	r2, [r3, #20]

            /* Decrease the enqueued count.  */
            queue_ptr -> tx_queue_enqueued--;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	691b      	ldr	r3, [r3, #16]
 8002bda:	1e5a      	subs	r2, r3, #1
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	611a      	str	r2, [r3, #16]
 8002be0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002be2:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8002be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002be6:	f383 8810 	msr	PRIMASK, r3
}
 8002bea:	e166      	b.n	8002eba <_tx_queue_receive+0x37a>
        {

            /* At this point we know the queue is full.  */

            /* Pickup thread suspension list head pointer.  */
            thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bf0:	637b      	str	r3, [r7, #52]	@ 0x34

            /* Now determine if there is a queue front suspension active.   */

            /* Is the front suspension flag set?  */
            if (thread_ptr -> tx_thread_suspend_option == TX_TRUE)
 8002bf2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bf4:	2280      	movs	r2, #128	@ 0x80
 8002bf6:	589b      	ldr	r3, [r3, r2]
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d154      	bne.n	8002ca6 <_tx_queue_receive+0x166>
                /* Yes, a queue front suspension is present.  */

                /* Return the message associated with this suspension.  */

                /* Setup source and destination pointers.  */
                source =       TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 8002bfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bfe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002c00:	64fb      	str	r3, [r7, #76]	@ 0x4c
                destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(destination_ptr);
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	64bb      	str	r3, [r7, #72]	@ 0x48
                size =         queue_ptr -> tx_queue_message_size;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	647b      	str	r3, [r7, #68]	@ 0x44

                /* Copy message. Note that the source and destination pointers are
                   incremented by the macro.  */
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 8002c0c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002c0e:	1d13      	adds	r3, r2, #4
 8002c10:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002c12:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002c14:	1d19      	adds	r1, r3, #4
 8002c16:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002c18:	6812      	ldr	r2, [r2, #0]
 8002c1a:	601a      	str	r2, [r3, #0]
 8002c1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d90e      	bls.n	8002c40 <_tx_queue_receive+0x100>
 8002c22:	e007      	b.n	8002c34 <_tx_queue_receive+0xf4>
 8002c24:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002c26:	1d13      	adds	r3, r2, #4
 8002c28:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002c2a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002c2c:	1d19      	adds	r1, r3, #4
 8002c2e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002c30:	6812      	ldr	r2, [r2, #0]
 8002c32:	601a      	str	r2, [r3, #0]
 8002c34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c36:	3b01      	subs	r3, #1
 8002c38:	647b      	str	r3, [r7, #68]	@ 0x44
 8002c3a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d1f1      	bne.n	8002c24 <_tx_queue_receive+0xe4>

                /* Message is now in the caller's destination. See if this is the only suspended thread
                   on the list.  */
                suspended_count--;
 8002c40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c42:	3b01      	subs	r3, #1
 8002c44:	63bb      	str	r3, [r7, #56]	@ 0x38
                if (suspended_count == TX_NO_SUSPENSIONS)
 8002c46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d103      	bne.n	8002c54 <_tx_queue_receive+0x114>
                {

                    /* Yes, the only suspended thread.  */

                    /* Update the head pointer.  */
                    queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	629a      	str	r2, [r3, #40]	@ 0x28
 8002c52:	e00e      	b.n	8002c72 <_tx_queue_receive+0x132>
                {

                    /* At least one more thread is on the same expiration list.  */

                    /* Update the list head pointer.  */
                    next_thread =                            thread_ptr -> tx_thread_suspended_next;
 8002c54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c58:	633b      	str	r3, [r7, #48]	@ 0x30
                    queue_ptr -> tx_queue_suspension_list =  next_thread;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002c5e:	629a      	str	r2, [r3, #40]	@ 0x28

                    /* Update the links of the adjacent threads.  */
                    previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 8002c60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c62:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c64:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    next_thread -> tx_thread_suspended_previous =  previous_thread;
 8002c66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c68:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c6a:	675a      	str	r2, [r3, #116]	@ 0x74
                    previous_thread -> tx_thread_suspended_next =  next_thread;
 8002c6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002c70:	671a      	str	r2, [r3, #112]	@ 0x70
                }

                /* Decrement the suspension count.  */
                queue_ptr -> tx_queue_suspended_count =  suspended_count;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002c76:	62da      	str	r2, [r3, #44]	@ 0x2c

                /* Prepare for resumption of the first thread.  */

                /* Clear cleanup routine to avoid timeout.  */
                thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8002c78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	669a      	str	r2, [r3, #104]	@ 0x68

                /* Put return status into the thread control block.  */
                thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8002c7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c80:	2284      	movs	r2, #132	@ 0x84
 8002c82:	2100      	movs	r1, #0
 8002c84:	5099      	str	r1, [r3, r2]
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 8002c86:	4b8f      	ldr	r3, [pc, #572]	@ (8002ec4 <_tx_queue_receive+0x384>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	1c5a      	adds	r2, r3, #1
 8002c8c:	4b8d      	ldr	r3, [pc, #564]	@ (8002ec4 <_tx_queue_receive+0x384>)
 8002c8e:	601a      	str	r2, [r3, #0]
 8002c90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c92:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8002c94:	6a3b      	ldr	r3, [r7, #32]
 8002c96:	f383 8810 	msr	PRIMASK, r3
}
 8002c9a:	46c0      	nop			@ (mov r8, r8)

                /* Restore interrupts.  */
                TX_RESTORE

                /* Resume thread.  */
                _tx_thread_system_resume(thread_ptr);
 8002c9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c9e:	0018      	movs	r0, r3
 8002ca0:	f000 fcbe 	bl	8003620 <_tx_thread_system_resume>
 8002ca4:	e109      	b.n	8002eba <_tx_queue_receive+0x37a>
                /* At this point, we know that the queue is full and there
                   are one or more threads suspended trying to send another
                   message to this queue.  */

                /* Setup source and destination pointers.  */
                source =       queue_ptr -> tx_queue_read;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	6a1b      	ldr	r3, [r3, #32]
 8002caa:	64fb      	str	r3, [r7, #76]	@ 0x4c
                destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(destination_ptr);
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	64bb      	str	r3, [r7, #72]	@ 0x48
                size =         queue_ptr -> tx_queue_message_size;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	647b      	str	r3, [r7, #68]	@ 0x44

                /* Copy message. Note that the source and destination pointers are
                   incremented by the macro.  */
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 8002cb6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002cb8:	1d13      	adds	r3, r2, #4
 8002cba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002cbc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002cbe:	1d19      	adds	r1, r3, #4
 8002cc0:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002cc2:	6812      	ldr	r2, [r2, #0]
 8002cc4:	601a      	str	r2, [r3, #0]
 8002cc6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d90e      	bls.n	8002cea <_tx_queue_receive+0x1aa>
 8002ccc:	e007      	b.n	8002cde <_tx_queue_receive+0x19e>
 8002cce:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002cd0:	1d13      	adds	r3, r2, #4
 8002cd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002cd4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002cd6:	1d19      	adds	r1, r3, #4
 8002cd8:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002cda:	6812      	ldr	r2, [r2, #0]
 8002cdc:	601a      	str	r2, [r3, #0]
 8002cde:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ce0:	3b01      	subs	r3, #1
 8002ce2:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ce4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d1f1      	bne.n	8002cce <_tx_queue_receive+0x18e>

                /* Determine if we are at the end.  */
                if (source == queue_ptr -> tx_queue_end)
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	69db      	ldr	r3, [r3, #28]
 8002cee:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d102      	bne.n	8002cfa <_tx_queue_receive+0x1ba>
                {

                    /* Yes, wrap around to the beginning.  */
                    source =  queue_ptr -> tx_queue_start;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	699b      	ldr	r3, [r3, #24]
 8002cf8:	64fb      	str	r3, [r7, #76]	@ 0x4c
                }

                /* Setup the queue read pointer.   */
                queue_ptr -> tx_queue_read =  source;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002cfe:	621a      	str	r2, [r3, #32]

                /* Disable preemption.  */
                _tx_thread_preempt_disable++;
 8002d00:	4b70      	ldr	r3, [pc, #448]	@ (8002ec4 <_tx_queue_receive+0x384>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	1c5a      	adds	r2, r3, #1
 8002d06:	4b6f      	ldr	r3, [pc, #444]	@ (8002ec4 <_tx_queue_receive+0x384>)
 8002d08:	601a      	str	r2, [r3, #0]
                /* Disable interrupts again.  */
                TX_DISABLE
#endif

                /* Decrement the preemption disable variable.  */
                _tx_thread_preempt_disable--;
 8002d0a:	4b6e      	ldr	r3, [pc, #440]	@ (8002ec4 <_tx_queue_receive+0x384>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	1e5a      	subs	r2, r3, #1
 8002d10:	4b6c      	ldr	r3, [pc, #432]	@ (8002ec4 <_tx_queue_receive+0x384>)
 8002d12:	601a      	str	r2, [r3, #0]

                /* Setup source and destination pointers.  */
                source =       TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 8002d14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d16:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002d18:	64fb      	str	r3, [r7, #76]	@ 0x4c
                destination =  queue_ptr -> tx_queue_write;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d1e:	64bb      	str	r3, [r7, #72]	@ 0x48
                size =         queue_ptr -> tx_queue_message_size;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	647b      	str	r3, [r7, #68]	@ 0x44

                /* Copy message. Note that the source and destination pointers are
                   incremented by the macro.  */
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 8002d26:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002d28:	1d13      	adds	r3, r2, #4
 8002d2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002d2c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002d2e:	1d19      	adds	r1, r3, #4
 8002d30:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002d32:	6812      	ldr	r2, [r2, #0]
 8002d34:	601a      	str	r2, [r3, #0]
 8002d36:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d90e      	bls.n	8002d5a <_tx_queue_receive+0x21a>
 8002d3c:	e007      	b.n	8002d4e <_tx_queue_receive+0x20e>
 8002d3e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002d40:	1d13      	adds	r3, r2, #4
 8002d42:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002d44:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002d46:	1d19      	adds	r1, r3, #4
 8002d48:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002d4a:	6812      	ldr	r2, [r2, #0]
 8002d4c:	601a      	str	r2, [r3, #0]
 8002d4e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d50:	3b01      	subs	r3, #1
 8002d52:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d1f1      	bne.n	8002d3e <_tx_queue_receive+0x1fe>

                /* Determine if we are at the end.  */
                if (destination == queue_ptr -> tx_queue_end)
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	69db      	ldr	r3, [r3, #28]
 8002d5e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d102      	bne.n	8002d6a <_tx_queue_receive+0x22a>
                {

                    /* Yes, wrap around to the beginning.  */
                    destination =  queue_ptr -> tx_queue_start;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	699b      	ldr	r3, [r3, #24]
 8002d68:	64bb      	str	r3, [r7, #72]	@ 0x48
                }

                /* Adjust the write pointer.  */
                queue_ptr -> tx_queue_write =  destination;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002d6e:	625a      	str	r2, [r3, #36]	@ 0x24

                /* Pickup thread pointer.  */
                thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d74:	637b      	str	r3, [r7, #52]	@ 0x34

                /* Message is now in the queue.  See if this is the only suspended thread
                   on the list.  */
                suspended_count--;
 8002d76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d78:	3b01      	subs	r3, #1
 8002d7a:	63bb      	str	r3, [r7, #56]	@ 0x38
                if (suspended_count == TX_NO_SUSPENSIONS)
 8002d7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d103      	bne.n	8002d8a <_tx_queue_receive+0x24a>
                {

                  /* Yes, the only suspended thread.  */

                    /* Update the head pointer.  */
                    queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2200      	movs	r2, #0
 8002d86:	629a      	str	r2, [r3, #40]	@ 0x28
 8002d88:	e00e      	b.n	8002da8 <_tx_queue_receive+0x268>
                {

                    /* At least one more thread is on the same expiration list.  */

                    /* Update the list head pointer.  */
                    next_thread =                            thread_ptr -> tx_thread_suspended_next;
 8002d8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d8e:	633b      	str	r3, [r7, #48]	@ 0x30
                    queue_ptr -> tx_queue_suspension_list =  next_thread;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002d94:	629a      	str	r2, [r3, #40]	@ 0x28

                    /* Update the links of the adjacent threads.  */
                    previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8002d96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    next_thread -> tx_thread_suspended_previous =   previous_thread;
 8002d9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d9e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002da0:	675a      	str	r2, [r3, #116]	@ 0x74
                    previous_thread -> tx_thread_suspended_next =   next_thread;
 8002da2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002da4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002da6:	671a      	str	r2, [r3, #112]	@ 0x70
                }

                /* Decrement the suspension count.  */
                queue_ptr -> tx_queue_suspended_count =  suspended_count;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002dac:	62da      	str	r2, [r3, #44]	@ 0x2c

                /* Prepare for resumption of the first thread.  */

                /* Clear cleanup routine to avoid timeout.  */
                thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8002dae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002db0:	2200      	movs	r2, #0
 8002db2:	669a      	str	r2, [r3, #104]	@ 0x68

                /* Put return status into the thread control block.  */
                thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8002db4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002db6:	2284      	movs	r2, #132	@ 0x84
 8002db8:	2100      	movs	r1, #0
 8002dba:	5099      	str	r1, [r3, r2]
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 8002dbc:	4b41      	ldr	r3, [pc, #260]	@ (8002ec4 <_tx_queue_receive+0x384>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	1c5a      	adds	r2, r3, #1
 8002dc2:	4b40      	ldr	r3, [pc, #256]	@ (8002ec4 <_tx_queue_receive+0x384>)
 8002dc4:	601a      	str	r2, [r3, #0]
 8002dc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002dc8:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	f383 8810 	msr	PRIMASK, r3
}
 8002dd0:	46c0      	nop			@ (mov r8, r8)

                /* Restore interrupts.  */
                TX_RESTORE

                /* Resume thread.  */
                _tx_thread_system_resume(thread_ptr);
 8002dd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002dd4:	0018      	movs	r0, r3
 8002dd6:	f000 fc23 	bl	8003620 <_tx_thread_system_resume>
 8002dda:	e06e      	b.n	8002eba <_tx_queue_receive+0x37a>
            }
        }
    }

    /* Determine if the request specifies suspension.  */
    else if (wait_option != TX_NO_WAIT)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d063      	beq.n	8002eaa <_tx_queue_receive+0x36a>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 8002de2:	4b38      	ldr	r3, [pc, #224]	@ (8002ec4 <_tx_queue_receive+0x384>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d008      	beq.n	8002dfc <_tx_queue_receive+0x2bc>
 8002dea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002dec:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8002dee:	69bb      	ldr	r3, [r7, #24]
 8002df0:	f383 8810 	msr	PRIMASK, r3
}
 8002df4:	46c0      	nop			@ (mov r8, r8)

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_QUEUE_EMPTY;
 8002df6:	230a      	movs	r3, #10
 8002df8:	643b      	str	r3, [r7, #64]	@ 0x40
 8002dfa:	e05e      	b.n	8002eba <_tx_queue_receive+0x37a>
            /* Increment the number of empty suspensions on this queue.  */
            queue_ptr -> tx_queue_performance_empty_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8002dfc:	4b32      	ldr	r3, [pc, #200]	@ (8002ec8 <_tx_queue_receive+0x388>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	637b      	str	r3, [r7, #52]	@ 0x34

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_queue_cleanup);
 8002e02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e04:	4a31      	ldr	r2, [pc, #196]	@ (8002ecc <_tx_queue_receive+0x38c>)
 8002e06:	669a      	str	r2, [r3, #104]	@ 0x68

            /* Setup cleanup information, i.e. this queue control
               block and the source pointer.  */
            thread_ptr -> tx_thread_suspend_control_block =    (VOID *) queue_ptr;
 8002e08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e0a:	68fa      	ldr	r2, [r7, #12]
 8002e0c:	66da      	str	r2, [r3, #108]	@ 0x6c
            thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) destination_ptr;
 8002e0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e10:	68ba      	ldr	r2, [r7, #8]
 8002e12:	67da      	str	r2, [r3, #124]	@ 0x7c
            thread_ptr -> tx_thread_suspend_option =           TX_FALSE;
 8002e14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e16:	2280      	movs	r2, #128	@ 0x80
 8002e18:	2100      	movs	r1, #0
 8002e1a:	5099      	str	r1, [r3, r2]

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 8002e1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e1e:	22ac      	movs	r2, #172	@ 0xac
 8002e20:	589b      	ldr	r3, [r3, r2]
 8002e22:	1c5a      	adds	r2, r3, #1
 8002e24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e26:	21ac      	movs	r1, #172	@ 0xac
 8002e28:	505a      	str	r2, [r3, r1]
#endif

            /* Setup suspension list.  */
            if (suspended_count == TX_NO_SUSPENSIONS)
 8002e2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d109      	bne.n	8002e44 <_tx_queue_receive+0x304>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                queue_ptr -> tx_queue_suspension_list =         thread_ptr;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002e34:	629a      	str	r2, [r3, #40]	@ 0x28
                thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 8002e36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e38:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002e3a:	671a      	str	r2, [r3, #112]	@ 0x70
                thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 8002e3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e3e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002e40:	675a      	str	r2, [r3, #116]	@ 0x74
 8002e42:	e011      	b.n	8002e68 <_tx_queue_receive+0x328>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   queue_ptr -> tx_queue_suspension_list;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e48:	633b      	str	r3, [r7, #48]	@ 0x30
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 8002e4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e4e:	671a      	str	r2, [r3, #112]	@ 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8002e50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e54:	62fb      	str	r3, [r7, #44]	@ 0x2c
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8002e56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e58:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002e5a:	675a      	str	r2, [r3, #116]	@ 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8002e5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e5e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002e60:	671a      	str	r2, [r3, #112]	@ 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8002e62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e64:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002e66:	675a      	str	r2, [r3, #116]	@ 0x74
            }

            /* Increment the suspended thread count.  */
            queue_ptr -> tx_queue_suspended_count =  suspended_count + ((UINT) 1);
 8002e68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e6a:	1c5a      	adds	r2, r3, #1
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	62da      	str	r2, [r3, #44]	@ 0x2c

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_QUEUE_SUSP;
 8002e70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e72:	2205      	movs	r2, #5
 8002e74:	631a      	str	r2, [r3, #48]	@ 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8002e76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e78:	2201      	movs	r2, #1
 8002e7a:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8002e7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8002e82:	4b10      	ldr	r3, [pc, #64]	@ (8002ec4 <_tx_queue_receive+0x384>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	1c5a      	adds	r2, r3, #1
 8002e88:	4b0e      	ldr	r3, [pc, #56]	@ (8002ec4 <_tx_queue_receive+0x384>)
 8002e8a:	601a      	str	r2, [r3, #0]
 8002e8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e8e:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	f383 8810 	msr	PRIMASK, r3
}
 8002e96:	46c0      	nop			@ (mov r8, r8)

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 8002e98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e9a:	0018      	movs	r0, r3
 8002e9c:	f000 fcc0 	bl	8003820 <_tx_thread_system_suspend>
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 8002ea0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ea2:	2284      	movs	r2, #132	@ 0x84
 8002ea4:	589b      	ldr	r3, [r3, r2]
 8002ea6:	643b      	str	r3, [r7, #64]	@ 0x40
 8002ea8:	e007      	b.n	8002eba <_tx_queue_receive+0x37a>
 8002eaa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002eac:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	f383 8810 	msr	PRIMASK, r3
}
 8002eb4:	46c0      	nop			@ (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Immediate return, return error completion.  */
        status =  TX_QUEUE_EMPTY;
 8002eb6:	230a      	movs	r3, #10
 8002eb8:	643b      	str	r3, [r7, #64]	@ 0x40
    }

    /* Return completion status.  */
    return(status);
 8002eba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
}
 8002ebc:	0018      	movs	r0, r3
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	b014      	add	sp, #80	@ 0x50
 8002ec2:	bd80      	pop	{r7, pc}
 8002ec4:	20000f14 	.word	0x20000f14
 8002ec8:	20000e7c 	.word	0x20000e7c
 8002ecc:	0800292d 	.word	0x0800292d

08002ed0 <_tx_queue_send>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_send(TX_QUEUE *queue_ptr, VOID *source_ptr, ULONG wait_option)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b094      	sub	sp, #80	@ 0x50
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	60f8      	str	r0, [r7, #12]
 8002ed8:	60b9      	str	r1, [r7, #8]
 8002eda:	607a      	str	r2, [r7, #4]
VOID            (*queue_send_notify)(struct TX_QUEUE_STRUCT *notify_queue_ptr);
#endif


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 8002edc:	2300      	movs	r3, #0
 8002ede:	643b      	str	r3, [r7, #64]	@ 0x40
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8002ee0:	f3ef 8310 	mrs	r3, PRIMASK
 8002ee4:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile (" CPSID i" : : : "memory" );
 8002ee6:	b672      	cpsid	i
    return(primask_value);
 8002ee8:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    /* Disable interrupts to place message in the queue.  */
    TX_DISABLE
 8002eea:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* Log this kernel call.  */
    TX_EL_QUEUE_SEND_INSERT

    /* Pickup the thread suspension count.  */
    suspended_count =  queue_ptr -> tx_queue_suspended_count;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ef0:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* Determine if there is room in the queue.  */
    if (queue_ptr -> tx_queue_available_storage != TX_NO_MESSAGES)
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	695b      	ldr	r3, [r3, #20]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d100      	bne.n	8002efc <_tx_queue_send+0x2c>
 8002efa:	e09b      	b.n	8003034 <_tx_queue_send+0x164>
    {

        /* There is room for the message in the queue.  */

        /* Determine if there are suspended on this queue.  */
        if (suspended_count == TX_NO_SUSPENSIONS)
 8002efc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d13c      	bne.n	8002f7c <_tx_queue_send+0xac>
        {

            /* No suspended threads, simply place the message in the queue.  */

            /* Reduce the amount of available storage.  */
            queue_ptr -> tx_queue_available_storage--;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	695b      	ldr	r3, [r3, #20]
 8002f06:	1e5a      	subs	r2, r3, #1
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	615a      	str	r2, [r3, #20]

            /* Increase the enqueued count.  */
            queue_ptr -> tx_queue_enqueued++;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	691b      	ldr	r3, [r3, #16]
 8002f10:	1c5a      	adds	r2, r3, #1
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	611a      	str	r2, [r3, #16]

            /* Setup source and destination pointers.  */
            source =       TX_VOID_TO_ULONG_POINTER_CONVERT(source_ptr);
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	64fb      	str	r3, [r7, #76]	@ 0x4c
            destination =  queue_ptr -> tx_queue_write;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f1e:	64bb      	str	r3, [r7, #72]	@ 0x48
            size =         queue_ptr -> tx_queue_message_size;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	647b      	str	r3, [r7, #68]	@ 0x44

            /* Copy message. Note that the source and destination pointers are
               incremented by the macro.  */
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 8002f26:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002f28:	1d13      	adds	r3, r2, #4
 8002f2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002f2c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002f2e:	1d19      	adds	r1, r3, #4
 8002f30:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002f32:	6812      	ldr	r2, [r2, #0]
 8002f34:	601a      	str	r2, [r3, #0]
 8002f36:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d90e      	bls.n	8002f5a <_tx_queue_send+0x8a>
 8002f3c:	e007      	b.n	8002f4e <_tx_queue_send+0x7e>
 8002f3e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002f40:	1d13      	adds	r3, r2, #4
 8002f42:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002f44:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002f46:	1d19      	adds	r1, r3, #4
 8002f48:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002f4a:	6812      	ldr	r2, [r2, #0]
 8002f4c:	601a      	str	r2, [r3, #0]
 8002f4e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f50:	3b01      	subs	r3, #1
 8002f52:	647b      	str	r3, [r7, #68]	@ 0x44
 8002f54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d1f1      	bne.n	8002f3e <_tx_queue_send+0x6e>

            /* Determine if we are at the end.  */
            if (destination == queue_ptr -> tx_queue_end)
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	69db      	ldr	r3, [r3, #28]
 8002f5e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d102      	bne.n	8002f6a <_tx_queue_send+0x9a>
            {

                /* Yes, wrap around to the beginning.  */
                destination =  queue_ptr -> tx_queue_start;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	699b      	ldr	r3, [r3, #24]
 8002f68:	64bb      	str	r3, [r7, #72]	@ 0x48
            }

            /* Adjust the write pointer.  */
            queue_ptr -> tx_queue_write =  destination;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002f6e:	625a      	str	r2, [r3, #36]	@ 0x24
 8002f70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f72:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8002f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f76:	f383 8810 	msr	PRIMASK, r3
}
 8002f7a:	e0ca      	b.n	8003112 <_tx_queue_send+0x242>
            /* There is a thread suspended on an empty queue. Simply
               copy the message to the suspended thread's destination
               pointer.  */

            /* Pickup the head of the suspension list.  */
            thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f80:	637b      	str	r3, [r7, #52]	@ 0x34

            /* See if this is the only suspended thread on the list.  */
            suspended_count--;
 8002f82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f84:	3b01      	subs	r3, #1
 8002f86:	63bb      	str	r3, [r7, #56]	@ 0x38
            if (suspended_count == TX_NO_SUSPENSIONS)
 8002f88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d103      	bne.n	8002f96 <_tx_queue_send+0xc6>
            {

                /* Yes, the only suspended thread.  */

                /* Update the head pointer.  */
                queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2200      	movs	r2, #0
 8002f92:	629a      	str	r2, [r3, #40]	@ 0x28
 8002f94:	e012      	b.n	8002fbc <_tx_queue_send+0xec>
            {

                /* At least one more thread is on the same expiration list.  */

                /* Update the list head pointer.  */
                queue_ptr -> tx_queue_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 8002f96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f98:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	629a      	str	r2, [r3, #40]	@ 0x28

                /* Update the links of the adjacent threads.  */
                next_thread =                            thread_ptr -> tx_thread_suspended_next;
 8002f9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fa0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fa2:	633b      	str	r3, [r7, #48]	@ 0x30
                queue_ptr -> tx_queue_suspension_list =  next_thread;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002fa8:	629a      	str	r2, [r3, #40]	@ 0x28

                /* Update the links of the adjacent threads.  */
                previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8002faa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fae:	62fb      	str	r3, [r7, #44]	@ 0x2c
                next_thread -> tx_thread_suspended_previous =   previous_thread;
 8002fb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fb2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002fb4:	675a      	str	r2, [r3, #116]	@ 0x74
                previous_thread -> tx_thread_suspended_next =   next_thread;
 8002fb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fb8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002fba:	671a      	str	r2, [r3, #112]	@ 0x70
            }

            /* Decrement the suspension count.  */
            queue_ptr -> tx_queue_suspended_count =  suspended_count;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002fc0:	62da      	str	r2, [r3, #44]	@ 0x2c

            /* Prepare for resumption of the thread.  */

            /* Clear cleanup routine to avoid timeout.  */
            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8002fc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	669a      	str	r2, [r3, #104]	@ 0x68

            /* Setup source and destination pointers.  */
            source =       TX_VOID_TO_ULONG_POINTER_CONVERT(source_ptr);
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	64fb      	str	r3, [r7, #76]	@ 0x4c
            destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 8002fcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fce:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002fd0:	64bb      	str	r3, [r7, #72]	@ 0x48
            size =         queue_ptr -> tx_queue_message_size;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	647b      	str	r3, [r7, #68]	@ 0x44

            /* Copy message. Note that the source and destination pointers are
               incremented by the macro.  */
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 8002fd8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002fda:	1d13      	adds	r3, r2, #4
 8002fdc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002fde:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002fe0:	1d19      	adds	r1, r3, #4
 8002fe2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002fe4:	6812      	ldr	r2, [r2, #0]
 8002fe6:	601a      	str	r2, [r3, #0]
 8002fe8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d90e      	bls.n	800300c <_tx_queue_send+0x13c>
 8002fee:	e007      	b.n	8003000 <_tx_queue_send+0x130>
 8002ff0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002ff2:	1d13      	adds	r3, r2, #4
 8002ff4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002ff6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002ff8:	1d19      	adds	r1, r3, #4
 8002ffa:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002ffc:	6812      	ldr	r2, [r2, #0]
 8002ffe:	601a      	str	r2, [r3, #0]
 8003000:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003002:	3b01      	subs	r3, #1
 8003004:	647b      	str	r3, [r7, #68]	@ 0x44
 8003006:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003008:	2b00      	cmp	r3, #0
 800300a:	d1f1      	bne.n	8002ff0 <_tx_queue_send+0x120>

            /* Put return status into the thread control block.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800300c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800300e:	2284      	movs	r2, #132	@ 0x84
 8003010:	2100      	movs	r1, #0
 8003012:	5099      	str	r1, [r3, r2]
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8003014:	4b41      	ldr	r3, [pc, #260]	@ (800311c <_tx_queue_send+0x24c>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	1c5a      	adds	r2, r3, #1
 800301a:	4b40      	ldr	r3, [pc, #256]	@ (800311c <_tx_queue_send+0x24c>)
 800301c:	601a      	str	r2, [r3, #0]
 800301e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003020:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8003022:	6a3b      	ldr	r3, [r7, #32]
 8003024:	f383 8810 	msr	PRIMASK, r3
}
 8003028:	46c0      	nop			@ (mov r8, r8)

            /* Restore interrupts.  */
            TX_RESTORE

            /* Resume thread.  */
            _tx_thread_system_resume(thread_ptr);
 800302a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800302c:	0018      	movs	r0, r3
 800302e:	f000 faf7 	bl	8003620 <_tx_thread_system_resume>
 8003032:	e06e      	b.n	8003112 <_tx_queue_send+0x242>
#endif
        }
    }

    /* At this point, the queue is full. Determine if suspension is requested.  */
    else if (wait_option != TX_NO_WAIT)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d063      	beq.n	8003102 <_tx_queue_send+0x232>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 800303a:	4b38      	ldr	r3, [pc, #224]	@ (800311c <_tx_queue_send+0x24c>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d008      	beq.n	8003054 <_tx_queue_send+0x184>
 8003042:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003044:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	f383 8810 	msr	PRIMASK, r3
}
 800304c:	46c0      	nop			@ (mov r8, r8)

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_QUEUE_FULL;
 800304e:	230b      	movs	r3, #11
 8003050:	643b      	str	r3, [r7, #64]	@ 0x40
 8003052:	e05e      	b.n	8003112 <_tx_queue_send+0x242>
            /* Increment the number of full suspensions on this queue.  */
            queue_ptr -> tx_queue_performance_full_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8003054:	4b32      	ldr	r3, [pc, #200]	@ (8003120 <_tx_queue_send+0x250>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	637b      	str	r3, [r7, #52]	@ 0x34

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_queue_cleanup);
 800305a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800305c:	4a31      	ldr	r2, [pc, #196]	@ (8003124 <_tx_queue_send+0x254>)
 800305e:	669a      	str	r2, [r3, #104]	@ 0x68

            /* Setup cleanup information, i.e. this queue control
               block and the source pointer.  */
            thread_ptr -> tx_thread_suspend_control_block =    (VOID *) queue_ptr;
 8003060:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003062:	68fa      	ldr	r2, [r7, #12]
 8003064:	66da      	str	r2, [r3, #108]	@ 0x6c
            thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) source_ptr;
 8003066:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003068:	68ba      	ldr	r2, [r7, #8]
 800306a:	67da      	str	r2, [r3, #124]	@ 0x7c
            thread_ptr -> tx_thread_suspend_option =           TX_FALSE;
 800306c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800306e:	2280      	movs	r2, #128	@ 0x80
 8003070:	2100      	movs	r1, #0
 8003072:	5099      	str	r1, [r3, r2]

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 8003074:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003076:	22ac      	movs	r2, #172	@ 0xac
 8003078:	589b      	ldr	r3, [r3, r2]
 800307a:	1c5a      	adds	r2, r3, #1
 800307c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800307e:	21ac      	movs	r1, #172	@ 0xac
 8003080:	505a      	str	r2, [r3, r1]
#endif

            /* Setup suspension list.  */
            if (suspended_count == TX_NO_SUSPENSIONS)
 8003082:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003084:	2b00      	cmp	r3, #0
 8003086:	d109      	bne.n	800309c <_tx_queue_send+0x1cc>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                queue_ptr -> tx_queue_suspension_list =         thread_ptr;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800308c:	629a      	str	r2, [r3, #40]	@ 0x28
                thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 800308e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003090:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003092:	671a      	str	r2, [r3, #112]	@ 0x70
                thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 8003094:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003096:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003098:	675a      	str	r2, [r3, #116]	@ 0x74
 800309a:	e011      	b.n	80030c0 <_tx_queue_send+0x1f0>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   queue_ptr -> tx_queue_suspension_list;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030a0:	633b      	str	r3, [r7, #48]	@ 0x30
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 80030a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80030a6:	671a      	str	r2, [r3, #112]	@ 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 80030a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 80030ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80030b2:	675a      	str	r2, [r3, #116]	@ 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 80030b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030b6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80030b8:	671a      	str	r2, [r3, #112]	@ 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 80030ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030bc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80030be:	675a      	str	r2, [r3, #116]	@ 0x74
            }

            /* Increment the suspended thread count.  */
            queue_ptr -> tx_queue_suspended_count =  suspended_count + ((UINT) 1);
 80030c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030c2:	1c5a      	adds	r2, r3, #1
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	62da      	str	r2, [r3, #44]	@ 0x2c

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_QUEUE_SUSP;
 80030c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030ca:	2205      	movs	r2, #5
 80030cc:	631a      	str	r2, [r3, #48]	@ 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80030ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030d0:	2201      	movs	r2, #1
 80030d2:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 80030d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 80030da:	4b10      	ldr	r3, [pc, #64]	@ (800311c <_tx_queue_send+0x24c>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	1c5a      	adds	r2, r3, #1
 80030e0:	4b0e      	ldr	r3, [pc, #56]	@ (800311c <_tx_queue_send+0x24c>)
 80030e2:	601a      	str	r2, [r3, #0]
 80030e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80030e6:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80030e8:	69bb      	ldr	r3, [r7, #24]
 80030ea:	f383 8810 	msr	PRIMASK, r3
}
 80030ee:	46c0      	nop			@ (mov r8, r8)

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 80030f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030f2:	0018      	movs	r0, r3
 80030f4:	f000 fb94 	bl	8003820 <_tx_thread_system_suspend>
                }
            }
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 80030f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030fa:	2284      	movs	r2, #132	@ 0x84
 80030fc:	589b      	ldr	r3, [r3, r2]
 80030fe:	643b      	str	r3, [r7, #64]	@ 0x40
 8003100:	e007      	b.n	8003112 <_tx_queue_send+0x242>
 8003102:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003104:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	f383 8810 	msr	PRIMASK, r3
}
 800310c:	46c0      	nop			@ (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return error completion.  */
        status =  TX_QUEUE_FULL;
 800310e:	230b      	movs	r3, #11
 8003110:	643b      	str	r3, [r7, #64]	@ 0x40
    }

    /* Return completion status.  */
    return(status);
 8003112:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
}
 8003114:	0018      	movs	r0, r3
 8003116:	46bd      	mov	sp, r7
 8003118:	b014      	add	sp, #80	@ 0x50
 800311a:	bd80      	pop	{r7, pc}
 800311c:	20000f14 	.word	0x20000f14
 8003120:	20000e7c 	.word	0x20000e7c
 8003124:	0800292d 	.word	0x0800292d

08003128 <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b098      	sub	sp, #96	@ 0x60
 800312c:	af00      	add	r7, sp, #0
 800312e:	60f8      	str	r0, [r7, #12]
 8003130:	60b9      	str	r1, [r7, #8]
 8003132:	607a      	str	r2, [r7, #4]
 8003134:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 8003136:	2300      	movs	r3, #0
 8003138:	65bb      	str	r3, [r7, #88]	@ 0x58
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 800313a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800313c:	657b      	str	r3, [r7, #84]	@ 0x54
 800313e:	2347      	movs	r3, #71	@ 0x47
 8003140:	18fb      	adds	r3, r7, r3
 8003142:	22ef      	movs	r2, #239	@ 0xef
 8003144:	701a      	strb	r2, [r3, #0]
 8003146:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003148:	643b      	str	r3, [r7, #64]	@ 0x40
 800314a:	2300      	movs	r3, #0
 800314c:	653b      	str	r3, [r7, #80]	@ 0x50
 800314e:	e009      	b.n	8003164 <_tx_thread_create+0x3c>
 8003150:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003152:	1c5a      	adds	r2, r3, #1
 8003154:	657a      	str	r2, [r7, #84]	@ 0x54
 8003156:	2247      	movs	r2, #71	@ 0x47
 8003158:	18ba      	adds	r2, r7, r2
 800315a:	7812      	ldrb	r2, [r2, #0]
 800315c:	701a      	strb	r2, [r3, #0]
 800315e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003160:	3301      	adds	r3, #1
 8003162:	653b      	str	r3, [r7, #80]	@ 0x50
 8003164:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003166:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003168:	429a      	cmp	r2, r3
 800316a:	d3f1      	bcc.n	8003150 <_tx_thread_create+0x28>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003170:	233f      	movs	r3, #63	@ 0x3f
 8003172:	18fb      	adds	r3, r7, r3
 8003174:	2200      	movs	r2, #0
 8003176:	701a      	strb	r2, [r3, #0]
 8003178:	23b0      	movs	r3, #176	@ 0xb0
 800317a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800317c:	2300      	movs	r3, #0
 800317e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003180:	e009      	b.n	8003196 <_tx_thread_create+0x6e>
 8003182:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003184:	1c5a      	adds	r2, r3, #1
 8003186:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003188:	223f      	movs	r2, #63	@ 0x3f
 800318a:	18ba      	adds	r2, r7, r2
 800318c:	7812      	ldrb	r2, [r2, #0]
 800318e:	701a      	strb	r2, [r3, #0]
 8003190:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003192:	3301      	adds	r3, #1
 8003194:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003196:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003198:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800319a:	429a      	cmp	r2, r3
 800319c:	d3f1      	bcc.n	8003182 <_tx_thread_create+0x5a>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	68ba      	ldr	r2, [r7, #8]
 80031a2:	629a      	str	r2, [r3, #40]	@ 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	645a      	str	r2, [r3, #68]	@ 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	683a      	ldr	r2, [r7, #0]
 80031ae:	649a      	str	r2, [r3, #72]	@ 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80031b4:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80031ba:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80031c0:	62da      	str	r2, [r3, #44]	@ 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2194      	movs	r1, #148	@ 0x94
 80031c6:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80031c8:	505a      	str	r2, [r3, r1]
    thread_ptr -> tx_thread_time_slice =        time_slice;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80031ce:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80031d4:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	229c      	movs	r2, #156	@ 0x9c
 80031da:	2120      	movs	r1, #32
 80031dc:	5099      	str	r1, [r3, r2]

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 80031de:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80031e0:	637b      	str	r3, [r7, #52]	@ 0x34
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 80031e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80031e4:	3b01      	subs	r3, #1
 80031e6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80031e8:	18d3      	adds	r3, r2, r3
 80031ea:	637b      	str	r3, [r7, #52]	@ 0x34
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80031f0:	611a      	str	r2, [r3, #16]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
#else

    /* Preemption-threshold is disabled, determine if preemption-threshold was required.  */
    if (priority != preempt_threshold)
 80031f2:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80031f4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d007      	beq.n	800320a <_tx_thread_create+0xe2>
    {

        /* Preemption-threshold specified. Since specific preemption-threshold is not supported,
           disable all preemption.  */
        thread_ptr -> tx_thread_preempt_threshold =       ((UINT) 0);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2200      	movs	r2, #0
 80031fe:	63da      	str	r2, [r3, #60]	@ 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  ((UINT) 0);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2298      	movs	r2, #152	@ 0x98
 8003204:	2100      	movs	r1, #0
 8003206:	5099      	str	r1, [r3, r2]
 8003208:	e006      	b.n	8003218 <_tx_thread_create+0xf0>
    }
    else
    {

        /* Preemption-threshold is not specified, just setup with the priority.  */
        thread_ptr -> tx_thread_preempt_threshold =       priority;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800320e:	63da      	str	r2, [r3, #60]	@ 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2198      	movs	r1, #152	@ 0x98
 8003214:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8003216:	505a      	str	r2, [r3, r1]
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2203      	movs	r2, #3
 800321c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	4a48      	ldr	r2, [pc, #288]	@ (8003344 <_tx_thread_create+0x21c>)
 8003222:	655a      	str	r2, [r3, #84]	@ 0x54
 8003224:	68fa      	ldr	r2, [r7, #12]
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	659a      	str	r2, [r3, #88]	@ 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 800322a:	4a47      	ldr	r2, [pc, #284]	@ (8003348 <_tx_thread_create+0x220>)
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	0011      	movs	r1, r2
 8003230:	0018      	movs	r0, r3
 8003232:	f7fd f815 	bl	8000260 <_tx_thread_stack_build>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8003236:	f3ef 8310 	mrs	r3, PRIMASK
 800323a:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile (" CPSID i" : : : "memory" );
 800323c:	b672      	cpsid	i
    return(primask_value);
 800323e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 8003240:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	4a41      	ldr	r2, [pc, #260]	@ (800334c <_tx_thread_create+0x224>)
 8003246:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 8003248:	4b41      	ldr	r3, [pc, #260]	@ (8003350 <_tx_thread_create+0x228>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d10b      	bne.n	8003268 <_tx_thread_create+0x140>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 8003250:	4b40      	ldr	r3, [pc, #256]	@ (8003354 <_tx_thread_create+0x22c>)
 8003252:	68fa      	ldr	r2, [r7, #12]
 8003254:	601a      	str	r2, [r3, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2188      	movs	r1, #136	@ 0x88
 800325a:	68fa      	ldr	r2, [r7, #12]
 800325c:	505a      	str	r2, [r3, r1]
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	218c      	movs	r1, #140	@ 0x8c
 8003262:	68fa      	ldr	r2, [r7, #12]
 8003264:	505a      	str	r2, [r3, r1]
 8003266:	e016      	b.n	8003296 <_tx_thread_create+0x16e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 8003268:	4b3a      	ldr	r3, [pc, #232]	@ (8003354 <_tx_thread_create+0x22c>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        previous_thread =  next_thread -> tx_thread_created_previous;
 800326e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003270:	228c      	movs	r2, #140	@ 0x8c
 8003272:	589b      	ldr	r3, [r3, r2]
 8003274:	62bb      	str	r3, [r7, #40]	@ 0x28

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 8003276:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003278:	218c      	movs	r1, #140	@ 0x8c
 800327a:	68fa      	ldr	r2, [r7, #12]
 800327c:	505a      	str	r2, [r3, r1]
        previous_thread -> tx_thread_created_next =  thread_ptr;
 800327e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003280:	2188      	movs	r1, #136	@ 0x88
 8003282:	68fa      	ldr	r2, [r7, #12]
 8003284:	505a      	str	r2, [r3, r1]

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	218c      	movs	r1, #140	@ 0x8c
 800328a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800328c:	505a      	str	r2, [r3, r1]
        thread_ptr -> tx_thread_created_next =      next_thread;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2188      	movs	r1, #136	@ 0x88
 8003292:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003294:	505a      	str	r2, [r3, r1]
    }

    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 8003296:	4b2e      	ldr	r3, [pc, #184]	@ (8003350 <_tx_thread_create+0x228>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	1c5a      	adds	r2, r3, #1
 800329c:	4b2c      	ldr	r3, [pc, #176]	@ (8003350 <_tx_thread_create+0x228>)
 800329e:	601a      	str	r2, [r3, #0]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 80032a0:	4b2d      	ldr	r3, [pc, #180]	@ (8003358 <_tx_thread_create+0x230>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	1c5a      	adds	r2, r3, #1
 80032a6:	4b2c      	ldr	r3, [pc, #176]	@ (8003358 <_tx_thread_create+0x230>)
 80032a8:	601a      	str	r2, [r3, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 80032aa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d12a      	bne.n	8003306 <_tx_thread_create+0x1de>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80032b0:	f3ef 8305 	mrs	r3, IPSR
 80032b4:	623b      	str	r3, [r7, #32]
    return(ipsr_value);
 80032b6:	6a3a      	ldr	r2, [r7, #32]
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 80032b8:	4b28      	ldr	r3, [pc, #160]	@ (800335c <_tx_thread_create+0x234>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4313      	orrs	r3, r2
 80032be:	4a28      	ldr	r2, [pc, #160]	@ (8003360 <_tx_thread_create+0x238>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d90d      	bls.n	80032e0 <_tx_thread_create+0x1b8>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 80032c4:	4b27      	ldr	r3, [pc, #156]	@ (8003364 <_tx_thread_create+0x23c>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	65fb      	str	r3, [r7, #92]	@ 0x5c

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 80032ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d009      	beq.n	80032e4 <_tx_thread_create+0x1bc>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 80032d0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80032d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032d4:	65bb      	str	r3, [r7, #88]	@ 0x58

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 80032d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80032d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80032dc:	63da      	str	r2, [r3, #60]	@ 0x3c
 80032de:	e001      	b.n	80032e4 <_tx_thread_create+0x1bc>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 80032e0:	2300      	movs	r3, #0
 80032e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80032e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032e6:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80032e8:	69fb      	ldr	r3, [r7, #28]
 80032ea:	f383 8810 	msr	PRIMASK, r3
}
 80032ee:	46c0      	nop			@ (mov r8, r8)

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	0018      	movs	r0, r3
 80032f4:	f000 f994 	bl	8003620 <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 80032f8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d01c      	beq.n	8003338 <_tx_thread_create+0x210>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 80032fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003300:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003302:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003304:	e018      	b.n	8003338 <_tx_thread_create+0x210>
 8003306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003308:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	f383 8810 	msr	PRIMASK, r3
}
 8003310:	46c0      	nop			@ (mov r8, r8)
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8003312:	f3ef 8310 	mrs	r3, PRIMASK
 8003316:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8003318:	b672      	cpsid	i
    return(primask_value);
 800331a:	697b      	ldr	r3, [r7, #20]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 800331c:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 800331e:	4b0e      	ldr	r3, [pc, #56]	@ (8003358 <_tx_thread_create+0x230>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	1e5a      	subs	r2, r3, #1
 8003324:	4b0c      	ldr	r3, [pc, #48]	@ (8003358 <_tx_thread_create+0x230>)
 8003326:	601a      	str	r2, [r3, #0]
 8003328:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800332a:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800332c:	69bb      	ldr	r3, [r7, #24]
 800332e:	f383 8810 	msr	PRIMASK, r3
}
 8003332:	46c0      	nop			@ (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8003334:	f000 f93c 	bl	80035b0 <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 8003338:	2300      	movs	r3, #0
}
 800333a:	0018      	movs	r0, r3
 800333c:	46bd      	mov	sp, r7
 800333e:	b018      	add	sp, #96	@ 0x60
 8003340:	bd80      	pop	{r7, pc}
 8003342:	46c0      	nop			@ (mov r8, r8)
 8003344:	08003bcd 	.word	0x08003bcd
 8003348:	08003439 	.word	0x08003439
 800334c:	54485244 	.word	0x54485244
 8003350:	20000e88 	.word	0x20000e88
 8003354:	20000e84 	.word	0x20000e84
 8003358:	20000f14 	.word	0x20000f14
 800335c:	2000000c 	.word	0x2000000c
 8003360:	f0f0f0ef 	.word	0xf0f0f0ef
 8003364:	20000e80 	.word	0x20000e80

08003368 <_tx_thread_initialize>:
/*                                            stack check error handling, */
/*                                            resulting in version 6.1.9  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b088      	sub	sp, #32
 800336c:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 800336e:	4b28      	ldr	r3, [pc, #160]	@ (8003410 <_tx_thread_initialize+0xa8>)
 8003370:	2200      	movs	r2, #0
 8003372:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 8003374:	4b27      	ldr	r3, [pc, #156]	@ (8003414 <_tx_thread_initialize+0xac>)
 8003376:	2200      	movs	r2, #0
 8003378:	601a      	str	r2, [r3, #0]

    /* Initialize the priority information.  */
    TX_MEMSET(&_tx_thread_priority_maps[0], 0, (sizeof(_tx_thread_priority_maps)));
 800337a:	4b27      	ldr	r3, [pc, #156]	@ (8003418 <_tx_thread_initialize+0xb0>)
 800337c:	61fb      	str	r3, [r7, #28]
 800337e:	230f      	movs	r3, #15
 8003380:	18fb      	adds	r3, r7, r3
 8003382:	2200      	movs	r2, #0
 8003384:	701a      	strb	r2, [r3, #0]
 8003386:	2304      	movs	r3, #4
 8003388:	60bb      	str	r3, [r7, #8]
 800338a:	2300      	movs	r3, #0
 800338c:	61bb      	str	r3, [r7, #24]
 800338e:	e009      	b.n	80033a4 <_tx_thread_initialize+0x3c>
 8003390:	69fb      	ldr	r3, [r7, #28]
 8003392:	1c5a      	adds	r2, r3, #1
 8003394:	61fa      	str	r2, [r7, #28]
 8003396:	220f      	movs	r2, #15
 8003398:	18ba      	adds	r2, r7, r2
 800339a:	7812      	ldrb	r2, [r2, #0]
 800339c:	701a      	strb	r2, [r3, #0]
 800339e:	69bb      	ldr	r3, [r7, #24]
 80033a0:	3301      	adds	r3, #1
 80033a2:	61bb      	str	r3, [r7, #24]
 80033a4:	69ba      	ldr	r2, [r7, #24]
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d3f1      	bcc.n	8003390 <_tx_thread_initialize+0x28>
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 80033ac:	4b1b      	ldr	r3, [pc, #108]	@ (800341c <_tx_thread_initialize+0xb4>)
 80033ae:	2220      	movs	r2, #32
 80033b0:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 80033b2:	4b1b      	ldr	r3, [pc, #108]	@ (8003420 <_tx_thread_initialize+0xb8>)
 80033b4:	617b      	str	r3, [r7, #20]
 80033b6:	1dfb      	adds	r3, r7, #7
 80033b8:	2200      	movs	r2, #0
 80033ba:	701a      	strb	r2, [r3, #0]
 80033bc:	2380      	movs	r3, #128	@ 0x80
 80033be:	603b      	str	r3, [r7, #0]
 80033c0:	2300      	movs	r3, #0
 80033c2:	613b      	str	r3, [r7, #16]
 80033c4:	e008      	b.n	80033d8 <_tx_thread_initialize+0x70>
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	1c5a      	adds	r2, r3, #1
 80033ca:	617a      	str	r2, [r7, #20]
 80033cc:	1dfa      	adds	r2, r7, #7
 80033ce:	7812      	ldrb	r2, [r2, #0]
 80033d0:	701a      	strb	r2, [r3, #0]
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	3301      	adds	r3, #1
 80033d6:	613b      	str	r3, [r7, #16]
 80033d8:	693a      	ldr	r2, [r7, #16]
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	429a      	cmp	r2, r3
 80033de:	d3f2      	bcc.n	80033c6 <_tx_thread_initialize+0x5e>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 80033e0:	4b10      	ldr	r3, [pc, #64]	@ (8003424 <_tx_thread_initialize+0xbc>)
 80033e2:	2200      	movs	r2, #0
 80033e4:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 80033e6:	4b10      	ldr	r3, [pc, #64]	@ (8003428 <_tx_thread_initialize+0xc0>)
 80033e8:	2200      	movs	r2, #0
 80033ea:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 80033ec:	4b0f      	ldr	r3, [pc, #60]	@ (800342c <_tx_thread_initialize+0xc4>)
 80033ee:	2200      	movs	r2, #0
 80033f0:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 80033f2:	4b0f      	ldr	r3, [pc, #60]	@ (8003430 <_tx_thread_initialize+0xc8>)
 80033f4:	2200      	movs	r2, #0
 80033f6:	601a      	str	r2, [r3, #0]
#endif
#ifdef TX_DISABLE_REDUNDANT_CLEARING
                            | (((ULONG) 1) << 18)
#endif
#ifdef TX_DISABLE_NOTIFY_CALLBACKS
                            | (((ULONG) 1) << 17)
 80033f8:	4b0e      	ldr	r3, [pc, #56]	@ (8003434 <_tx_thread_initialize+0xcc>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	2285      	movs	r2, #133	@ 0x85
 80033fe:	0452      	lsls	r2, r2, #17
 8003400:	431a      	orrs	r2, r3
    _tx_build_options =  _tx_build_options 
 8003402:	4b0c      	ldr	r3, [pc, #48]	@ (8003434 <_tx_thread_initialize+0xcc>)
 8003404:	601a      	str	r2, [r3, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 8003406:	46c0      	nop			@ (mov r8, r8)
 8003408:	46bd      	mov	sp, r7
 800340a:	b008      	add	sp, #32
 800340c:	bd80      	pop	{r7, pc}
 800340e:	46c0      	nop			@ (mov r8, r8)
 8003410:	20000e7c 	.word	0x20000e7c
 8003414:	20000e80 	.word	0x20000e80
 8003418:	20000e8c 	.word	0x20000e8c
 800341c:	20000e90 	.word	0x20000e90
 8003420:	20000e94 	.word	0x20000e94
 8003424:	20000e84 	.word	0x20000e84
 8003428:	20000e88 	.word	0x20000e88
 800342c:	20000f14 	.word	0x20000f14
 8003430:	20000f18 	.word	0x20000f18
 8003434:	20000f1c 	.word	0x20000f1c

08003438 <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b084      	sub	sp, #16
 800343c:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800343e:	4b1a      	ldr	r3, [pc, #104]	@ (80034a8 <_tx_thread_shell_entry+0x70>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	60fb      	str	r3, [r7, #12]
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800344c:	0018      	movs	r0, r3
 800344e:	4790      	blx	r2

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 8003450:	4b16      	ldr	r3, [pc, #88]	@ (80034ac <_tx_thread_shell_entry+0x74>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d004      	beq.n	8003462 <_tx_thread_shell_entry+0x2a>
    {

        /* Yes, call the mutex release function via a function pointer that
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 8003458:	4b14      	ldr	r3, [pc, #80]	@ (80034ac <_tx_thread_shell_entry+0x74>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	68fa      	ldr	r2, [r7, #12]
 800345e:	0010      	movs	r0, r2
 8003460:	4798      	blx	r3
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8003462:	f3ef 8310 	mrs	r3, PRIMASK
 8003466:	603b      	str	r3, [r7, #0]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8003468:	b672      	cpsid	i
    return(primask_value);
 800346a:	683b      	ldr	r3, [r7, #0]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 800346c:	60bb      	str	r3, [r7, #8]
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2201      	movs	r2, #1
 8003472:	631a      	str	r2, [r3, #48]	@ 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2201      	movs	r2, #1
 8003478:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2200      	movs	r2, #0
 800347e:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8003480:	4b0b      	ldr	r3, [pc, #44]	@ (80034b0 <_tx_thread_shell_entry+0x78>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	1c5a      	adds	r2, r3, #1
 8003486:	4b0a      	ldr	r3, [pc, #40]	@ (80034b0 <_tx_thread_shell_entry+0x78>)
 8003488:	601a      	str	r2, [r3, #0]
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	607b      	str	r3, [r7, #4]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	f383 8810 	msr	PRIMASK, r3
}
 8003494:	46c0      	nop			@ (mov r8, r8)
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	0018      	movs	r0, r3
 800349a:	f000 f9c1 	bl	8003820 <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 800349e:	46c0      	nop			@ (mov r8, r8)
 80034a0:	46bd      	mov	sp, r7
 80034a2:	b004      	add	sp, #16
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	46c0      	nop			@ (mov r8, r8)
 80034a8:	20000e7c 	.word	0x20000e7c
 80034ac:	20000f18 	.word	0x20000f18
 80034b0:	20000f14 	.word	0x20000f14

080034b4 <_tx_thread_sleep>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_sleep(ULONG timer_ticks)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b08e      	sub	sp, #56	@ 0x38
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80034bc:	f3ef 8310 	mrs	r3, PRIMASK
 80034c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile (" CPSID i" : : : "memory" );
 80034c2:	b672      	cpsid	i
    return(primask_value);
 80034c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
UINT            status;
TX_THREAD       *thread_ptr;


    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 80034c6:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 80034c8:	4b35      	ldr	r3, [pc, #212]	@ (80035a0 <_tx_thread_sleep+0xec>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Determine if this is a legal request.  */

    /* Is there a current thread?  */
    if (thread_ptr == TX_NULL)
 80034ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d108      	bne.n	80034e6 <_tx_thread_sleep+0x32>
 80034d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034d6:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80034d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034da:	f383 8810 	msr	PRIMASK, r3
}
 80034de:	46c0      	nop			@ (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 80034e0:	2313      	movs	r3, #19
 80034e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80034e4:	e056      	b.n	8003594 <_tx_thread_sleep+0xe0>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80034e6:	f3ef 8305 	mrs	r3, IPSR
 80034ea:	623b      	str	r3, [r7, #32]
    return(ipsr_value);
 80034ec:	6a3a      	ldr	r2, [r7, #32]
    }

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80034ee:	4b2d      	ldr	r3, [pc, #180]	@ (80035a4 <_tx_thread_sleep+0xf0>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4313      	orrs	r3, r2
 80034f4:	d008      	beq.n	8003508 <_tx_thread_sleep+0x54>
 80034f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034f8:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80034fa:	69fb      	ldr	r3, [r7, #28]
 80034fc:	f383 8810 	msr	PRIMASK, r3
}
 8003500:	46c0      	nop			@ (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 8003502:	2313      	movs	r3, #19
 8003504:	637b      	str	r3, [r7, #52]	@ 0x34
 8003506:	e045      	b.n	8003594 <_tx_thread_sleep+0xe0>
    }

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Is the caller the system timer thread?  */
    else if (thread_ptr == &_tx_timer_thread)
 8003508:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800350a:	4b27      	ldr	r3, [pc, #156]	@ (80035a8 <_tx_thread_sleep+0xf4>)
 800350c:	429a      	cmp	r2, r3
 800350e:	d108      	bne.n	8003522 <_tx_thread_sleep+0x6e>
 8003510:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003512:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	f383 8810 	msr	PRIMASK, r3
}
 800351a:	46c0      	nop			@ (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 800351c:	2313      	movs	r3, #19
 800351e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003520:	e038      	b.n	8003594 <_tx_thread_sleep+0xe0>
    }
#endif

    /* Determine if the requested number of ticks is zero.  */
    else if (timer_ticks == ((ULONG) 0))
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d108      	bne.n	800353a <_tx_thread_sleep+0x86>
 8003528:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800352a:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	f383 8810 	msr	PRIMASK, r3
}
 8003532:	46c0      	nop			@ (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Just return with a successful status.  */
        status =  TX_SUCCESS;
 8003534:	2300      	movs	r3, #0
 8003536:	637b      	str	r3, [r7, #52]	@ 0x34
 8003538:	e02c      	b.n	8003594 <_tx_thread_sleep+0xe0>
    }
    else
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 800353a:	4b1c      	ldr	r3, [pc, #112]	@ (80035ac <_tx_thread_sleep+0xf8>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d008      	beq.n	8003554 <_tx_thread_sleep+0xa0>
 8003542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003544:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	f383 8810 	msr	PRIMASK, r3
}
 800354c:	46c0      	nop			@ (mov r8, r8)

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_CALLER_ERROR;
 800354e:	2313      	movs	r3, #19
 8003550:	637b      	str	r3, [r7, #52]	@ 0x34
 8003552:	e01f      	b.n	8003594 <_tx_thread_sleep+0xe0>
            TX_EL_THREAD_SLEEP_INSERT

            /* Suspend the current thread.  */

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SLEEP;
 8003554:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003556:	2204      	movs	r2, #4
 8003558:	631a      	str	r2, [r3, #48]	@ 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag. */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800355a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800355c:	2201      	movs	r2, #1
 800355e:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Initialize the status to successful.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8003560:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003562:	2284      	movs	r2, #132	@ 0x84
 8003564:	2100      	movs	r1, #0
 8003566:	5099      	str	r1, [r3, r2]

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  timer_ticks;
 8003568:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800356e:	4b0f      	ldr	r3, [pc, #60]	@ (80035ac <_tx_thread_sleep+0xf8>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	1c5a      	adds	r2, r3, #1
 8003574:	4b0d      	ldr	r3, [pc, #52]	@ (80035ac <_tx_thread_sleep+0xf8>)
 8003576:	601a      	str	r2, [r3, #0]
 8003578:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800357a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f383 8810 	msr	PRIMASK, r3
}
 8003582:	46c0      	nop			@ (mov r8, r8)

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 8003584:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003586:	0018      	movs	r0, r3
 8003588:	f000 f94a 	bl	8003820 <_tx_thread_system_suspend>
#endif

            /* Return status to the caller.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 800358c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800358e:	2284      	movs	r2, #132	@ 0x84
 8003590:	589b      	ldr	r3, [r3, r2]
 8003592:	637b      	str	r3, [r7, #52]	@ 0x34
        }
    }

    /* Return completion status.  */
    return(status);
 8003594:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8003596:	0018      	movs	r0, r3
 8003598:	46bd      	mov	sp, r7
 800359a:	b00e      	add	sp, #56	@ 0x38
 800359c:	bd80      	pop	{r7, pc}
 800359e:	46c0      	nop			@ (mov r8, r8)
 80035a0:	20000e7c 	.word	0x20000e7c
 80035a4:	2000000c 	.word	0x2000000c
 80035a8:	20000fc4 	.word	0x20000fc4
 80035ac:	20000f14 	.word	0x20000f14

080035b0 <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b088      	sub	sp, #32
 80035b4:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 80035b6:	4b16      	ldr	r3, [pc, #88]	@ (8003610 <_tx_thread_system_preempt_check+0x60>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 80035bc:	69fb      	ldr	r3, [r7, #28]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d121      	bne.n	8003606 <_tx_thread_system_preempt_check+0x56>
    {

        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 80035c2:	4b14      	ldr	r3, [pc, #80]	@ (8003614 <_tx_thread_system_preempt_check+0x64>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 80035c8:	4b13      	ldr	r3, [pc, #76]	@ (8003618 <_tx_thread_system_preempt_check+0x68>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 80035ce:	69ba      	ldr	r2, [r7, #24]
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d017      	beq.n	8003606 <_tx_thread_system_preempt_check+0x56>
__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
unsigned int interrupt_save;

    /* Set PendSV to invoke ThreadX scheduler.  */
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 80035d6:	4b11      	ldr	r3, [pc, #68]	@ (800361c <_tx_thread_system_preempt_check+0x6c>)
 80035d8:	2280      	movs	r2, #128	@ 0x80
 80035da:	0552      	lsls	r2, r2, #21
 80035dc:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80035de:	f3ef 8305 	mrs	r3, IPSR
 80035e2:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 80035e4:	693b      	ldr	r3, [r7, #16]
    if (__get_ipsr_value() == 0)
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d10c      	bne.n	8003604 <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80035ea:	f3ef 8310 	mrs	r3, PRIMASK
 80035ee:	60fb      	str	r3, [r7, #12]
    return(primask_value);
 80035f0:	68fb      	ldr	r3, [r7, #12]
    {
        interrupt_save = __get_primask_value();
 80035f2:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" CPSIE  i": : : "memory" );
 80035f4:	b662      	cpsie	i
}
 80035f6:	46c0      	nop			@ (mov r8, r8)
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	607b      	str	r3, [r7, #4]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	f383 8810 	msr	PRIMASK, r3
}
 8003602:	46c0      	nop			@ (mov r8, r8)
        __enable_interrupts();
        __restore_interrupts(interrupt_save);
    }   
}
 8003604:	46c0      	nop			@ (mov r8, r8)

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 8003606:	46c0      	nop			@ (mov r8, r8)
 8003608:	46bd      	mov	sp, r7
 800360a:	b008      	add	sp, #32
 800360c:	bd80      	pop	{r7, pc}
 800360e:	46c0      	nop			@ (mov r8, r8)
 8003610:	20000f14 	.word	0x20000f14
 8003614:	20000e7c 	.word	0x20000e7c
 8003618:	20000e80 	.word	0x20000e80
 800361c:	e000ed04 	.word	0xe000ed04

08003620 <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b096      	sub	sp, #88	@ 0x58
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8003628:	f3ef 8310 	mrs	r3, PRIMASK
 800362c:	637b      	str	r3, [r7, #52]	@ 0x34
    __asm__ volatile (" CPSID i" : : : "memory" );
 800362e:	b672      	cpsid	i
    return(primask_value);
 8003630:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 8003632:	657b      	str	r3, [r7, #84]	@ 0x54

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003638:	2b00      	cmp	r3, #0
 800363a:	d005      	beq.n	8003648 <_tx_thread_system_resume+0x28>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	334c      	adds	r3, #76	@ 0x4c
 8003640:	0018      	movs	r0, r3
 8003642:	f000 fc1f 	bl	8003e84 <_tx_timer_system_deactivate>
 8003646:	e002      	b.n	800364e <_tx_thread_system_resume+0x2e>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2200      	movs	r2, #0
 800364c:	64da      	str	r2, [r3, #76]	@ 0x4c
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 800364e:	4b6d      	ldr	r3, [pc, #436]	@ (8003804 <_tx_thread_system_resume+0x1e4>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	1e5a      	subs	r2, r3, #1
 8003654:	4b6b      	ldr	r3, [pc, #428]	@ (8003804 <_tx_thread_system_resume+0x1e4>)
 8003656:	601a      	str	r2, [r3, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800365c:	2b00      	cmp	r3, #0
 800365e:	d000      	beq.n	8003662 <_tx_thread_system_resume+0x42>
 8003660:	e084      	b.n	800376c <_tx_thread_system_resume+0x14c>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003666:	2b00      	cmp	r3, #0
 8003668:	d100      	bne.n	800366c <_tx_thread_system_resume+0x4c>
 800366a:	e098      	b.n	800379e <_tx_thread_system_resume+0x17e>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003670:	2b00      	cmp	r3, #0
 8003672:	d000      	beq.n	8003676 <_tx_thread_system_resume+0x56>
 8003674:	e073      	b.n	800375e <_tx_thread_system_resume+0x13e>
                /* Resume the thread!  */

                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2200      	movs	r2, #0
 800367a:	631a      	str	r2, [r3, #48]	@ 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003680:	653b      	str	r3, [r7, #80]	@ 0x50
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 8003682:	4b61      	ldr	r3, [pc, #388]	@ (8003808 <_tx_thread_system_resume+0x1e8>)
 8003684:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003686:	0092      	lsls	r2, r2, #2
 8003688:	58d3      	ldr	r3, [r2, r3]
 800368a:	64fb      	str	r3, [r7, #76]	@ 0x4c
                if (head_ptr == TX_NULL)
 800368c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800368e:	2b00      	cmp	r3, #0
 8003690:	d155      	bne.n	800373e <_tx_thread_system_resume+0x11e>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 8003692:	4b5d      	ldr	r3, [pc, #372]	@ (8003808 <_tx_thread_system_resume+0x1e8>)
 8003694:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003696:	0092      	lsls	r2, r2, #2
 8003698:	6879      	ldr	r1, [r7, #4]
 800369a:	50d1      	str	r1, [r2, r3]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	687a      	ldr	r2, [r7, #4]
 80036a6:	625a      	str	r2, [r3, #36]	@ 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 80036a8:	2201      	movs	r2, #1
 80036aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80036ac:	409a      	lsls	r2, r3
 80036ae:	0013      	movs	r3, r2
 80036b0:	647b      	str	r3, [r7, #68]	@ 0x44
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 80036b2:	4b56      	ldr	r3, [pc, #344]	@ (800380c <_tx_thread_system_resume+0x1ec>)
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80036b8:	431a      	orrs	r2, r3
 80036ba:	4b54      	ldr	r3, [pc, #336]	@ (800380c <_tx_thread_system_resume+0x1ec>)
 80036bc:	601a      	str	r2, [r3, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 80036be:	4b54      	ldr	r3, [pc, #336]	@ (8003810 <_tx_thread_system_resume+0x1f0>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d26a      	bcs.n	800379e <_tx_thread_system_resume+0x17e>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 80036c8:	4b51      	ldr	r3, [pc, #324]	@ (8003810 <_tx_thread_system_resume+0x1f0>)
 80036ca:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80036cc:	601a      	str	r2, [r3, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 80036ce:	4b51      	ldr	r3, [pc, #324]	@ (8003814 <_tx_thread_system_resume+0x1f4>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	643b      	str	r3, [r7, #64]	@ 0x40

                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 80036d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d103      	bne.n	80036e2 <_tx_thread_system_resume+0xc2>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 80036da:	4b4e      	ldr	r3, [pc, #312]	@ (8003814 <_tx_thread_system_resume+0x1f4>)
 80036dc:	687a      	ldr	r2, [r7, #4]
 80036de:	601a      	str	r2, [r3, #0]
 80036e0:	e05d      	b.n	800379e <_tx_thread_system_resume+0x17e>
                        {

                            /* Another thread has been scheduled for execution.  */

                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 80036e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036e6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d258      	bcs.n	800379e <_tx_thread_system_resume+0x17e>
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 80036ec:	4b49      	ldr	r3, [pc, #292]	@ (8003814 <_tx_thread_system_resume+0x1f4>)
 80036ee:	687a      	ldr	r2, [r7, #4]
 80036f0:	601a      	str	r2, [r3, #0]
 80036f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036f4:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80036f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036f8:	f383 8810 	msr	PRIMASK, r3
}
 80036fc:	46c0      	nop			@ (mov r8, r8)
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 80036fe:	4b41      	ldr	r3, [pc, #260]	@ (8003804 <_tx_thread_system_resume+0x1e4>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	63fb      	str	r3, [r7, #60]	@ 0x3c
                                if (combined_flags == ((ULONG) 0))
 8003704:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003706:	2b00      	cmp	r3, #0
 8003708:	d000      	beq.n	800370c <_tx_thread_system_resume+0xec>
 800370a:	e074      	b.n	80037f6 <_tx_thread_system_resume+0x1d6>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800370c:	4b42      	ldr	r3, [pc, #264]	@ (8003818 <_tx_thread_system_resume+0x1f8>)
 800370e:	2280      	movs	r2, #128	@ 0x80
 8003710:	0552      	lsls	r2, r2, #21
 8003712:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8003714:	f3ef 8305 	mrs	r3, IPSR
 8003718:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(ipsr_value);
 800371a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    if (__get_ipsr_value() == 0)
 800371c:	2b00      	cmp	r3, #0
 800371e:	d10c      	bne.n	800373a <_tx_thread_system_resume+0x11a>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8003720:	f3ef 8310 	mrs	r3, PRIMASK
 8003724:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(primask_value);
 8003726:	6abb      	ldr	r3, [r7, #40]	@ 0x28
        interrupt_save = __get_primask_value();
 8003728:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile (" CPSIE  i": : : "memory" );
 800372a:	b662      	cpsie	i
}
 800372c:	46c0      	nop			@ (mov r8, r8)
 800372e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003730:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8003732:	6a3b      	ldr	r3, [r7, #32]
 8003734:	f383 8810 	msr	PRIMASK, r3
}
 8003738:	46c0      	nop			@ (mov r8, r8)
}
 800373a:	46c0      	nop			@ (mov r8, r8)
                                    /* Preemption is needed - return to the system!  */
                                    _tx_thread_system_return();
                                }

                                /* Return in-line when MISRA is not enabled.  */
                                return;
 800373c:	e05b      	b.n	80037f6 <_tx_thread_system_resume+0x1d6>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 800373e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003740:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003742:	64bb      	str	r3, [r7, #72]	@ 0x48
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 8003744:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003746:	687a      	ldr	r2, [r7, #4]
 8003748:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 800374a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	625a      	str	r2, [r3, #36]	@ 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003754:	625a      	str	r2, [r3, #36]	@ 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800375a:	621a      	str	r2, [r3, #32]
 800375c:	e01f      	b.n	800379e <_tx_thread_system_resume+0x17e>
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	635a      	str	r2, [r3, #52]	@ 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2203      	movs	r2, #3
 8003768:	631a      	str	r2, [r3, #48]	@ 0x30
 800376a:	e018      	b.n	800379e <_tx_thread_system_resume+0x17e>
        /* A resumption occurred in the middle of a previous thread suspension.  */

        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003770:	2b01      	cmp	r3, #1
 8003772:	d014      	beq.n	800379e <_tx_thread_system_resume+0x17e>
        {

            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003778:	2b02      	cmp	r3, #2
 800377a:	d010      	beq.n	800379e <_tx_thread_system_resume+0x17e>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003780:	2b00      	cmp	r3, #0
 8003782:	d106      	bne.n	8003792 <_tx_thread_system_resume+0x172>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2200      	movs	r2, #0
 8003788:	639a      	str	r2, [r3, #56]	@ 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2200      	movs	r2, #0
 800378e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003790:	e005      	b.n	800379e <_tx_thread_system_resume+0x17e>
                }
                else
                {

                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2200      	movs	r2, #0
 8003796:	635a      	str	r2, [r3, #52]	@ 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2203      	movs	r2, #3
 800379c:	631a      	str	r2, [r3, #48]	@ 0x30
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 800379e:	4b1f      	ldr	r3, [pc, #124]	@ (800381c <_tx_thread_system_resume+0x1fc>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80037a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037a6:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80037a8:	69fb      	ldr	r3, [r7, #28]
 80037aa:	f383 8810 	msr	PRIMASK, r3
}
 80037ae:	46c0      	nop			@ (mov r8, r8)

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 80037b0:	4b18      	ldr	r3, [pc, #96]	@ (8003814 <_tx_thread_system_resume+0x1f4>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d020      	beq.n	80037fc <_tx_thread_system_resume+0x1dc>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 80037ba:	4b12      	ldr	r3, [pc, #72]	@ (8003804 <_tx_thread_system_resume+0x1e4>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if (combined_flags == ((ULONG) 0))
 80037c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d11a      	bne.n	80037fc <_tx_thread_system_resume+0x1dc>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 80037c6:	4b14      	ldr	r3, [pc, #80]	@ (8003818 <_tx_thread_system_resume+0x1f8>)
 80037c8:	2280      	movs	r2, #128	@ 0x80
 80037ca:	0552      	lsls	r2, r2, #21
 80037cc:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80037ce:	f3ef 8305 	mrs	r3, IPSR
 80037d2:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 80037d4:	69bb      	ldr	r3, [r7, #24]
    if (__get_ipsr_value() == 0)
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d10f      	bne.n	80037fa <_tx_thread_system_resume+0x1da>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80037da:	f3ef 8310 	mrs	r3, PRIMASK
 80037de:	617b      	str	r3, [r7, #20]
    return(primask_value);
 80037e0:	697b      	ldr	r3, [r7, #20]
        interrupt_save = __get_primask_value();
 80037e2:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" CPSIE  i": : : "memory" );
 80037e4:	b662      	cpsie	i
}
 80037e6:	46c0      	nop			@ (mov r8, r8)
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	f383 8810 	msr	PRIMASK, r3
}
 80037f2:	46c0      	nop			@ (mov r8, r8)
}
 80037f4:	e001      	b.n	80037fa <_tx_thread_system_resume+0x1da>
                                return;
 80037f6:	46c0      	nop			@ (mov r8, r8)
 80037f8:	e000      	b.n	80037fc <_tx_thread_system_resume+0x1dc>
 80037fa:	46c0      	nop			@ (mov r8, r8)

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 80037fc:	46bd      	mov	sp, r7
 80037fe:	b016      	add	sp, #88	@ 0x58
 8003800:	bd80      	pop	{r7, pc}
 8003802:	46c0      	nop			@ (mov r8, r8)
 8003804:	20000f14 	.word	0x20000f14
 8003808:	20000e94 	.word	0x20000e94
 800380c:	20000e8c 	.word	0x20000e8c
 8003810:	20000e90 	.word	0x20000e90
 8003814:	20000e80 	.word	0x20000e80
 8003818:	e000ed04 	.word	0xe000ed04
 800381c:	20000e7c 	.word	0x20000e7c

08003820 <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b09c      	sub	sp, #112	@ 0x70
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8003828:	4bb9      	ldr	r3, [pc, #740]	@ (8003b10 <_tx_thread_system_suspend+0x2f0>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	667b      	str	r3, [r7, #100]	@ 0x64
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800382e:	f3ef 8310 	mrs	r3, PRIMASK
 8003832:	647b      	str	r3, [r7, #68]	@ 0x44
    __asm__ volatile (" CPSID i" : : : "memory" );
 8003834:	b672      	cpsid	i
    return(primask_value);
 8003836:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 8003838:	663b      	str	r3, [r7, #96]	@ 0x60

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800383e:	429a      	cmp	r2, r3
 8003840:	d111      	bne.n	8003866 <_tx_thread_system_suspend+0x46>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003846:	65fb      	str	r3, [r7, #92]	@ 0x5c

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 8003848:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800384a:	2b00      	cmp	r3, #0
 800384c:	d007      	beq.n	800385e <_tx_thread_system_suspend+0x3e>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 800384e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003850:	3301      	adds	r3, #1
 8003852:	d004      	beq.n	800385e <_tx_thread_system_suspend+0x3e>
            {

                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	334c      	adds	r3, #76	@ 0x4c
 8003858:	0018      	movs	r0, r3
 800385a:	f000 fab5 	bl	8003dc8 <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	69da      	ldr	r2, [r3, #28]
 8003862:	4bac      	ldr	r3, [pc, #688]	@ (8003b14 <_tx_thread_system_suspend+0x2f4>)
 8003864:	601a      	str	r2, [r3, #0]
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 8003866:	4bac      	ldr	r3, [pc, #688]	@ (8003b18 <_tx_thread_system_suspend+0x2f8>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	1e5a      	subs	r2, r3, #1
 800386c:	4baa      	ldr	r3, [pc, #680]	@ (8003b18 <_tx_thread_system_suspend+0x2f8>)
 800386e:	601a      	str	r2, [r3, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003874:	2b01      	cmp	r3, #1
 8003876:	d000      	beq.n	800387a <_tx_thread_system_suspend+0x5a>
 8003878:	e118      	b.n	8003aac <_tx_thread_system_suspend+0x28c>
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2200      	movs	r2, #0
 800387e:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003884:	65bb      	str	r3, [r7, #88]	@ 0x58

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6a1b      	ldr	r3, [r3, #32]
 800388a:	657b      	str	r3, [r7, #84]	@ 0x54

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 800388c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	429a      	cmp	r2, r3
 8003892:	d016      	beq.n	80038c2 <_tx_thread_system_suspend+0xa2>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003898:	64bb      	str	r3, [r7, #72]	@ 0x48

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 800389a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800389c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800389e:	625a      	str	r2, [r3, #36]	@ 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 80038a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80038a2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80038a4:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 80038a6:	4b9d      	ldr	r3, [pc, #628]	@ (8003b1c <_tx_thread_system_suspend+0x2fc>)
 80038a8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80038aa:	0092      	lsls	r2, r2, #2
 80038ac:	58d3      	ldr	r3, [r2, r3]
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d000      	beq.n	80038b6 <_tx_thread_system_suspend+0x96>
 80038b4:	e0c9      	b.n	8003a4a <_tx_thread_system_suspend+0x22a>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 80038b6:	4b99      	ldr	r3, [pc, #612]	@ (8003b1c <_tx_thread_system_suspend+0x2fc>)
 80038b8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80038ba:	0092      	lsls	r2, r2, #2
 80038bc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80038be:	50d1      	str	r1, [r2, r3]
 80038c0:	e0c3      	b.n	8003a4a <_tx_thread_system_suspend+0x22a>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 80038c2:	4b96      	ldr	r3, [pc, #600]	@ (8003b1c <_tx_thread_system_suspend+0x2fc>)
 80038c4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80038c6:	0092      	lsls	r2, r2, #2
 80038c8:	2100      	movs	r1, #0
 80038ca:	50d1      	str	r1, [r2, r3]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 80038cc:	2201      	movs	r2, #1
 80038ce:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80038d0:	409a      	lsls	r2, r3
 80038d2:	0013      	movs	r3, r2
 80038d4:	66bb      	str	r3, [r7, #104]	@ 0x68
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 80038d6:	4b92      	ldr	r3, [pc, #584]	@ (8003b20 <_tx_thread_system_suspend+0x300>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80038dc:	43d2      	mvns	r2, r2
 80038de:	401a      	ands	r2, r3
 80038e0:	4b8f      	ldr	r3, [pc, #572]	@ (8003b20 <_tx_thread_system_suspend+0x300>)
 80038e2:	601a      	str	r2, [r3, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 80038e4:	2300      	movs	r3, #0
 80038e6:	653b      	str	r3, [r7, #80]	@ 0x50
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 80038e8:	4b8d      	ldr	r3, [pc, #564]	@ (8003b20 <_tx_thread_system_suspend+0x300>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	66fb      	str	r3, [r7, #108]	@ 0x6c

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 80038ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d12b      	bne.n	800394c <_tx_thread_system_suspend+0x12c>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 80038f4:	4b8b      	ldr	r3, [pc, #556]	@ (8003b24 <_tx_thread_system_suspend+0x304>)
 80038f6:	2220      	movs	r2, #32
 80038f8:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 80038fa:	4b8b      	ldr	r3, [pc, #556]	@ (8003b28 <_tx_thread_system_suspend+0x308>)
 80038fc:	2200      	movs	r2, #0
 80038fe:	601a      	str	r2, [r3, #0]
 8003900:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003902:	643b      	str	r3, [r7, #64]	@ 0x40
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8003904:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003906:	f383 8810 	msr	PRIMASK, r3
}
 800390a:	46c0      	nop			@ (mov r8, r8)
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800390c:	4b82      	ldr	r3, [pc, #520]	@ (8003b18 <_tx_thread_system_suspend+0x2f8>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	64fb      	str	r3, [r7, #76]	@ 0x4c
                if (combined_flags == ((ULONG) 0))
 8003912:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003914:	2b00      	cmp	r3, #0
 8003916:	d000      	beq.n	800391a <_tx_thread_system_suspend+0xfa>
 8003918:	e0f2      	b.n	8003b00 <_tx_thread_system_suspend+0x2e0>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800391a:	4b84      	ldr	r3, [pc, #528]	@ (8003b2c <_tx_thread_system_suspend+0x30c>)
 800391c:	2280      	movs	r2, #128	@ 0x80
 800391e:	0552      	lsls	r2, r2, #21
 8003920:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8003922:	f3ef 8305 	mrs	r3, IPSR
 8003926:	63fb      	str	r3, [r7, #60]	@ 0x3c
    return(ipsr_value);
 8003928:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
    if (__get_ipsr_value() == 0)
 800392a:	2b00      	cmp	r3, #0
 800392c:	d10c      	bne.n	8003948 <_tx_thread_system_suspend+0x128>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800392e:	f3ef 8310 	mrs	r3, PRIMASK
 8003932:	63bb      	str	r3, [r7, #56]	@ 0x38
    return(primask_value);
 8003934:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
        interrupt_save = __get_primask_value();
 8003936:	637b      	str	r3, [r7, #52]	@ 0x34
    __asm__ volatile (" CPSIE  i": : : "memory" );
 8003938:	b662      	cpsie	i
}
 800393a:	46c0      	nop			@ (mov r8, r8)
 800393c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800393e:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8003940:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003942:	f383 8810 	msr	PRIMASK, r3
}
 8003946:	46c0      	nop			@ (mov r8, r8)
}
 8003948:	46c0      	nop			@ (mov r8, r8)
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 800394a:	e0d9      	b.n	8003b00 <_tx_thread_system_suspend+0x2e0>
            {

                /* Other threads at different priority levels are ready to run.  */

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 800394c:	2300      	movs	r3, #0
 800394e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003950:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003952:	425a      	negs	r2, r3
 8003954:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003956:	4013      	ands	r3, r2
 8003958:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800395a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800395c:	2b0f      	cmp	r3, #15
 800395e:	d80e      	bhi.n	800397e <_tx_thread_system_suspend+0x15e>
 8003960:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003962:	2b03      	cmp	r3, #3
 8003964:	d905      	bls.n	8003972 <_tx_thread_system_suspend+0x152>
 8003966:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003968:	089b      	lsrs	r3, r3, #2
 800396a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800396c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800396e:	3302      	adds	r3, #2
 8003970:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003972:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003974:	085b      	lsrs	r3, r3, #1
 8003976:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003978:	18d3      	adds	r3, r2, r3
 800397a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800397c:	e060      	b.n	8003a40 <_tx_thread_system_suspend+0x220>
 800397e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003980:	2bff      	cmp	r3, #255	@ 0xff
 8003982:	d814      	bhi.n	80039ae <_tx_thread_system_suspend+0x18e>
 8003984:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003986:	091b      	lsrs	r3, r3, #4
 8003988:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800398a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800398c:	3304      	adds	r3, #4
 800398e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003990:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003992:	2b03      	cmp	r3, #3
 8003994:	d905      	bls.n	80039a2 <_tx_thread_system_suspend+0x182>
 8003996:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003998:	089b      	lsrs	r3, r3, #2
 800399a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800399c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800399e:	3302      	adds	r3, #2
 80039a0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80039a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80039a4:	085b      	lsrs	r3, r3, #1
 80039a6:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80039a8:	18d3      	adds	r3, r2, r3
 80039aa:	66bb      	str	r3, [r7, #104]	@ 0x68
 80039ac:	e048      	b.n	8003a40 <_tx_thread_system_suspend+0x220>
 80039ae:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80039b0:	2380      	movs	r3, #128	@ 0x80
 80039b2:	025b      	lsls	r3, r3, #9
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d21d      	bcs.n	80039f4 <_tx_thread_system_suspend+0x1d4>
 80039b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80039ba:	0a1b      	lsrs	r3, r3, #8
 80039bc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80039be:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80039c0:	3308      	adds	r3, #8
 80039c2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80039c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80039c6:	2b0f      	cmp	r3, #15
 80039c8:	d905      	bls.n	80039d6 <_tx_thread_system_suspend+0x1b6>
 80039ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80039cc:	091b      	lsrs	r3, r3, #4
 80039ce:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80039d0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80039d2:	3304      	adds	r3, #4
 80039d4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80039d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80039d8:	2b03      	cmp	r3, #3
 80039da:	d905      	bls.n	80039e8 <_tx_thread_system_suspend+0x1c8>
 80039dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80039de:	089b      	lsrs	r3, r3, #2
 80039e0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80039e2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80039e4:	3302      	adds	r3, #2
 80039e6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80039e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80039ea:	085b      	lsrs	r3, r3, #1
 80039ec:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80039ee:	18d3      	adds	r3, r2, r3
 80039f0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80039f2:	e025      	b.n	8003a40 <_tx_thread_system_suspend+0x220>
 80039f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80039f6:	0c1b      	lsrs	r3, r3, #16
 80039f8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80039fa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80039fc:	3310      	adds	r3, #16
 80039fe:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003a00:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003a02:	2bff      	cmp	r3, #255	@ 0xff
 8003a04:	d905      	bls.n	8003a12 <_tx_thread_system_suspend+0x1f2>
 8003a06:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003a08:	0a1b      	lsrs	r3, r3, #8
 8003a0a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003a0c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003a0e:	3308      	adds	r3, #8
 8003a10:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003a12:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003a14:	2b0f      	cmp	r3, #15
 8003a16:	d905      	bls.n	8003a24 <_tx_thread_system_suspend+0x204>
 8003a18:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003a1a:	091b      	lsrs	r3, r3, #4
 8003a1c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003a1e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003a20:	3304      	adds	r3, #4
 8003a22:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003a24:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003a26:	2b03      	cmp	r3, #3
 8003a28:	d905      	bls.n	8003a36 <_tx_thread_system_suspend+0x216>
 8003a2a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003a2c:	089b      	lsrs	r3, r3, #2
 8003a2e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003a30:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003a32:	3302      	adds	r3, #2
 8003a34:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003a36:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003a38:	085b      	lsrs	r3, r3, #1
 8003a3a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003a3c:	18d3      	adds	r3, r2, r3
 8003a3e:	66bb      	str	r3, [r7, #104]	@ 0x68

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 8003a40:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003a42:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003a44:	18d2      	adds	r2, r2, r3
 8003a46:	4b37      	ldr	r3, [pc, #220]	@ (8003b24 <_tx_thread_system_suspend+0x304>)
 8003a48:	601a      	str	r2, [r3, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 8003a4a:	4b37      	ldr	r3, [pc, #220]	@ (8003b28 <_tx_thread_system_suspend+0x308>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	687a      	ldr	r2, [r7, #4]
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d12b      	bne.n	8003aac <_tx_thread_system_suspend+0x28c>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8003a54:	4b33      	ldr	r3, [pc, #204]	@ (8003b24 <_tx_thread_system_suspend+0x304>)
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	4b30      	ldr	r3, [pc, #192]	@ (8003b1c <_tx_thread_system_suspend+0x2fc>)
 8003a5a:	0092      	lsls	r2, r2, #2
 8003a5c:	58d2      	ldr	r2, [r2, r3]
 8003a5e:	4b32      	ldr	r3, [pc, #200]	@ (8003b28 <_tx_thread_system_suspend+0x308>)
 8003a60:	601a      	str	r2, [r3, #0]
 8003a62:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003a64:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8003a66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a68:	f383 8810 	msr	PRIMASK, r3
}
 8003a6c:	46c0      	nop			@ (mov r8, r8)
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8003a6e:	4b2a      	ldr	r3, [pc, #168]	@ (8003b18 <_tx_thread_system_suspend+0x2f8>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	64fb      	str	r3, [r7, #76]	@ 0x4c
            if (combined_flags == ((ULONG) 0))
 8003a74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d144      	bne.n	8003b04 <_tx_thread_system_suspend+0x2e4>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8003a7a:	4b2c      	ldr	r3, [pc, #176]	@ (8003b2c <_tx_thread_system_suspend+0x30c>)
 8003a7c:	2280      	movs	r2, #128	@ 0x80
 8003a7e:	0552      	lsls	r2, r2, #21
 8003a80:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8003a82:	f3ef 8305 	mrs	r3, IPSR
 8003a86:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(ipsr_value);
 8003a88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    if (__get_ipsr_value() == 0)
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d10c      	bne.n	8003aa8 <_tx_thread_system_suspend+0x288>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8003a8e:	f3ef 8310 	mrs	r3, PRIMASK
 8003a92:	627b      	str	r3, [r7, #36]	@ 0x24
    return(primask_value);
 8003a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
        interrupt_save = __get_primask_value();
 8003a96:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" CPSIE  i": : : "memory" );
 8003a98:	b662      	cpsie	i
}
 8003a9a:	46c0      	nop			@ (mov r8, r8)
 8003a9c:	6a3b      	ldr	r3, [r7, #32]
 8003a9e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8003aa0:	69fb      	ldr	r3, [r7, #28]
 8003aa2:	f383 8810 	msr	PRIMASK, r3
}
 8003aa6:	46c0      	nop			@ (mov r8, r8)
}
 8003aa8:	46c0      	nop			@ (mov r8, r8)
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 8003aaa:	e02b      	b.n	8003b04 <_tx_thread_system_suspend+0x2e4>
 8003aac:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003aae:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8003ab0:	69bb      	ldr	r3, [r7, #24]
 8003ab2:	f383 8810 	msr	PRIMASK, r3
}
 8003ab6:	46c0      	nop			@ (mov r8, r8)

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 8003ab8:	4b1b      	ldr	r3, [pc, #108]	@ (8003b28 <_tx_thread_system_suspend+0x308>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	d022      	beq.n	8003b08 <_tx_thread_system_suspend+0x2e8>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8003ac2:	4b15      	ldr	r3, [pc, #84]	@ (8003b18 <_tx_thread_system_suspend+0x2f8>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	64fb      	str	r3, [r7, #76]	@ 0x4c
        if (combined_flags == ((ULONG) 0))
 8003ac8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d11c      	bne.n	8003b08 <_tx_thread_system_suspend+0x2e8>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8003ace:	4b17      	ldr	r3, [pc, #92]	@ (8003b2c <_tx_thread_system_suspend+0x30c>)
 8003ad0:	2280      	movs	r2, #128	@ 0x80
 8003ad2:	0552      	lsls	r2, r2, #21
 8003ad4:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8003ad6:	f3ef 8305 	mrs	r3, IPSR
 8003ada:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8003adc:	697b      	ldr	r3, [r7, #20]
    if (__get_ipsr_value() == 0)
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d10c      	bne.n	8003afc <_tx_thread_system_suspend+0x2dc>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8003ae2:	f3ef 8310 	mrs	r3, PRIMASK
 8003ae6:	613b      	str	r3, [r7, #16]
    return(primask_value);
 8003ae8:	693b      	ldr	r3, [r7, #16]
        interrupt_save = __get_primask_value();
 8003aea:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" CPSIE  i": : : "memory" );
 8003aec:	b662      	cpsie	i
}
 8003aee:	46c0      	nop			@ (mov r8, r8)
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	f383 8810 	msr	PRIMASK, r3
}
 8003afa:	46c0      	nop			@ (mov r8, r8)
}
 8003afc:	46c0      	nop			@ (mov r8, r8)
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 8003afe:	e003      	b.n	8003b08 <_tx_thread_system_suspend+0x2e8>
                return;
 8003b00:	46c0      	nop			@ (mov r8, r8)
 8003b02:	e002      	b.n	8003b0a <_tx_thread_system_suspend+0x2ea>
            return;
 8003b04:	46c0      	nop			@ (mov r8, r8)
 8003b06:	e000      	b.n	8003b0a <_tx_thread_system_suspend+0x2ea>
    return;
 8003b08:	46c0      	nop			@ (mov r8, r8)
}
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	b01c      	add	sp, #112	@ 0x70
 8003b0e:	bd80      	pop	{r7, pc}
 8003b10:	20000e7c 	.word	0x20000e7c
 8003b14:	20001480 	.word	0x20001480
 8003b18:	20000f14 	.word	0x20000f14
 8003b1c:	20000e94 	.word	0x20000e94
 8003b20:	20000e8c 	.word	0x20000e8c
 8003b24:	20000e90 	.word	0x20000e90
 8003b28:	20000e80 	.word	0x20000e80
 8003b2c:	e000ed04 	.word	0xe000ed04

08003b30 <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b084      	sub	sp, #16
 8003b34:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8003b36:	4b1f      	ldr	r3, [pc, #124]	@ (8003bb4 <_tx_thread_time_slice+0x84>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8003b3c:	f3ef 8310 	mrs	r3, PRIMASK
 8003b40:	607b      	str	r3, [r7, #4]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8003b42:	b672      	cpsid	i
    return(primask_value);
 8003b44:	687b      	ldr	r3, [r7, #4]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 8003b46:	60bb      	str	r3, [r7, #8]

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 8003b48:	4b1b      	ldr	r3, [pc, #108]	@ (8003bb8 <_tx_thread_time_slice+0x88>)
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d024      	beq.n	8003b9e <_tx_thread_time_slice+0x6e>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d120      	bne.n	8003b9e <_tx_thread_time_slice+0x6e>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	69da      	ldr	r2, [r3, #28]
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	699a      	ldr	r2, [r3, #24]
 8003b68:	4b14      	ldr	r3, [pc, #80]	@ (8003bbc <_tx_thread_time_slice+0x8c>)
 8003b6a:	601a      	str	r2, [r3, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	6a1b      	ldr	r3, [r3, #32]
 8003b70:	68fa      	ldr	r2, [r7, #12]
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d013      	beq.n	8003b9e <_tx_thread_time_slice+0x6e>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d10d      	bne.n	8003b9e <_tx_thread_time_slice+0x6e>

                    /* Preemption-threshold is not being used by this thread.  */

                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	6a19      	ldr	r1, [r3, #32]
 8003b8a:	4b0d      	ldr	r3, [pc, #52]	@ (8003bc0 <_tx_thread_time_slice+0x90>)
 8003b8c:	0092      	lsls	r2, r2, #2
 8003b8e:	50d1      	str	r1, [r2, r3]

                    /* Designate the highest priority thread as the one to execute.  Don't use this
                       thread's priority as an index just in case a higher priority thread is now
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8003b90:	4b0c      	ldr	r3, [pc, #48]	@ (8003bc4 <_tx_thread_time_slice+0x94>)
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	4b0a      	ldr	r3, [pc, #40]	@ (8003bc0 <_tx_thread_time_slice+0x90>)
 8003b96:	0092      	lsls	r2, r2, #2
 8003b98:	58d2      	ldr	r2, [r2, r3]
 8003b9a:	4b0b      	ldr	r3, [pc, #44]	@ (8003bc8 <_tx_thread_time_slice+0x98>)
 8003b9c:	601a      	str	r2, [r3, #0]
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	603b      	str	r3, [r7, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	f383 8810 	msr	PRIMASK, r3
}
 8003ba8:	46c0      	nop			@ (mov r8, r8)

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 8003baa:	46c0      	nop			@ (mov r8, r8)
 8003bac:	46bd      	mov	sp, r7
 8003bae:	b004      	add	sp, #16
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	46c0      	nop			@ (mov r8, r8)
 8003bb4:	20000e7c 	.word	0x20000e7c
 8003bb8:	20000f24 	.word	0x20000f24
 8003bbc:	20001480 	.word	0x20001480
 8003bc0:	20000e94 	.word	0x20000e94
 8003bc4:	20000e90 	.word	0x20000e90
 8003bc8:	20000e80 	.word	0x20000e80

08003bcc <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b08a      	sub	sp, #40	@ 0x28
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8003bd8:	f3ef 8310 	mrs	r3, PRIMASK
 8003bdc:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8003bde:	b672      	cpsid	i
    return(primask_value);
 8003be0:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts.  */
    TX_DISABLE
 8003be2:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 8003be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003be6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003be8:	2b04      	cmp	r3, #4
 8003bea:	d10f      	bne.n	8003c0c <_tx_thread_timeout+0x40>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 8003bec:	4b14      	ldr	r3, [pc, #80]	@ (8003c40 <_tx_thread_timeout+0x74>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	1c5a      	adds	r2, r3, #1
 8003bf2:	4b13      	ldr	r3, [pc, #76]	@ (8003c40 <_tx_thread_timeout+0x74>)
 8003bf4:	601a      	str	r2, [r3, #0]
 8003bf6:	6a3b      	ldr	r3, [r7, #32]
 8003bf8:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	f383 8810 	msr	PRIMASK, r3
}
 8003c00:	46c0      	nop			@ (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 8003c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c04:	0018      	movs	r0, r3
 8003c06:	f7ff fd0b 	bl	8003620 <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 8003c0a:	e014      	b.n	8003c36 <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 8003c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c0e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003c10:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 8003c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c14:	22ac      	movs	r2, #172	@ 0xac
 8003c16:	589b      	ldr	r3, [r3, r2]
 8003c18:	61bb      	str	r3, [r7, #24]
 8003c1a:	6a3b      	ldr	r3, [r7, #32]
 8003c1c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	f383 8810 	msr	PRIMASK, r3
}
 8003c24:	46c0      	nop			@ (mov r8, r8)
        if (suspend_cleanup != TX_NULL)
 8003c26:	69fb      	ldr	r3, [r7, #28]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d004      	beq.n	8003c36 <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 8003c2c:	69b9      	ldr	r1, [r7, #24]
 8003c2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c30:	69fb      	ldr	r3, [r7, #28]
 8003c32:	0010      	movs	r0, r2
 8003c34:	4798      	blx	r3
}
 8003c36:	46c0      	nop			@ (mov r8, r8)
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	b00a      	add	sp, #40	@ 0x28
 8003c3c:	bd80      	pop	{r7, pc}
 8003c3e:	46c0      	nop			@ (mov r8, r8)
 8003c40:	20000f14 	.word	0x20000f14

08003c44 <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b084      	sub	sp, #16
 8003c48:	af00      	add	r7, sp, #0
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8003c4a:	f3ef 8310 	mrs	r3, PRIMASK
 8003c4e:	607b      	str	r3, [r7, #4]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8003c50:	b672      	cpsid	i
    return(primask_value);
 8003c52:	687b      	ldr	r3, [r7, #4]

    /* Don't process in the ISR, wakeup the system timer thread to process the
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 8003c54:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 8003c56:	4b09      	ldr	r3, [pc, #36]	@ (8003c7c <_tx_timer_expiration_process+0x38>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	1c5a      	adds	r2, r3, #1
 8003c5c:	4b07      	ldr	r3, [pc, #28]	@ (8003c7c <_tx_timer_expiration_process+0x38>)
 8003c5e:	601a      	str	r2, [r3, #0]
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	f383 8810 	msr	PRIMASK, r3
}
 8003c6a:	46c0      	nop			@ (mov r8, r8)

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 8003c6c:	4b04      	ldr	r3, [pc, #16]	@ (8003c80 <_tx_timer_expiration_process+0x3c>)
 8003c6e:	0018      	movs	r0, r3
 8003c70:	f7ff fcd6 	bl	8003620 <_tx_thread_system_resume>
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8003c74:	46c0      	nop			@ (mov r8, r8)
 8003c76:	46bd      	mov	sp, r7
 8003c78:	b004      	add	sp, #16
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	20000f14 	.word	0x20000f14
 8003c80:	20000fc4 	.word	0x20000fc4

08003c84 <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 8003c84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c86:	46ce      	mov	lr, r9
 8003c88:	4647      	mov	r7, r8
 8003c8a:	b580      	push	{r7, lr}
 8003c8c:	b08d      	sub	sp, #52	@ 0x34
 8003c8e:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 8003c90:	4b39      	ldr	r3, [pc, #228]	@ (8003d78 <_tx_timer_initialize+0xf4>)
 8003c92:	2200      	movs	r2, #0
 8003c94:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 8003c96:	4b39      	ldr	r3, [pc, #228]	@ (8003d7c <_tx_timer_initialize+0xf8>)
 8003c98:	2200      	movs	r2, #0
 8003c9a:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 8003c9c:	4b38      	ldr	r3, [pc, #224]	@ (8003d80 <_tx_timer_initialize+0xfc>)
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 8003ca2:	4b38      	ldr	r3, [pc, #224]	@ (8003d84 <_tx_timer_initialize+0x100>)
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 8003ca8:	4b37      	ldr	r3, [pc, #220]	@ (8003d88 <_tx_timer_initialize+0x104>)
 8003caa:	2200      	movs	r2, #0
 8003cac:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 8003cae:	4b37      	ldr	r3, [pc, #220]	@ (8003d8c <_tx_timer_initialize+0x108>)
 8003cb0:	617b      	str	r3, [r7, #20]
 8003cb2:	230f      	movs	r3, #15
 8003cb4:	18fb      	adds	r3, r7, r3
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	701a      	strb	r2, [r3, #0]
 8003cba:	2380      	movs	r3, #128	@ 0x80
 8003cbc:	60bb      	str	r3, [r7, #8]
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	613b      	str	r3, [r7, #16]
 8003cc2:	e009      	b.n	8003cd8 <_tx_timer_initialize+0x54>
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	1c5a      	adds	r2, r3, #1
 8003cc8:	617a      	str	r2, [r7, #20]
 8003cca:	220f      	movs	r2, #15
 8003ccc:	18ba      	adds	r2, r7, r2
 8003cce:	7812      	ldrb	r2, [r2, #0]
 8003cd0:	701a      	strb	r2, [r3, #0]
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	3301      	adds	r3, #1
 8003cd6:	613b      	str	r3, [r7, #16]
 8003cd8:	693a      	ldr	r2, [r7, #16]
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d3f1      	bcc.n	8003cc4 <_tx_timer_initialize+0x40>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 8003ce0:	4b2b      	ldr	r3, [pc, #172]	@ (8003d90 <_tx_timer_initialize+0x10c>)
 8003ce2:	4a2a      	ldr	r2, [pc, #168]	@ (8003d8c <_tx_timer_initialize+0x108>)
 8003ce4:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 8003ce6:	4b2b      	ldr	r3, [pc, #172]	@ (8003d94 <_tx_timer_initialize+0x110>)
 8003ce8:	4a28      	ldr	r2, [pc, #160]	@ (8003d8c <_tx_timer_initialize+0x108>)
 8003cea:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 8003cec:	4b2a      	ldr	r3, [pc, #168]	@ (8003d98 <_tx_timer_initialize+0x114>)
 8003cee:	4a2b      	ldr	r2, [pc, #172]	@ (8003d9c <_tx_timer_initialize+0x118>)
 8003cf0:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 8003cf2:	4b29      	ldr	r3, [pc, #164]	@ (8003d98 <_tx_timer_initialize+0x114>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	1d1a      	adds	r2, r3, #4
 8003cf8:	4b27      	ldr	r3, [pc, #156]	@ (8003d98 <_tx_timer_initialize+0x114>)
 8003cfa:	601a      	str	r2, [r3, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 8003cfc:	4b28      	ldr	r3, [pc, #160]	@ (8003da0 <_tx_timer_initialize+0x11c>)
 8003cfe:	4a29      	ldr	r2, [pc, #164]	@ (8003da4 <_tx_timer_initialize+0x120>)
 8003d00:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 8003d02:	4b29      	ldr	r3, [pc, #164]	@ (8003da8 <_tx_timer_initialize+0x124>)
 8003d04:	2280      	movs	r2, #128	@ 0x80
 8003d06:	00d2      	lsls	r2, r2, #3
 8003d08:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 8003d0a:	4b28      	ldr	r3, [pc, #160]	@ (8003dac <_tx_timer_initialize+0x128>)
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {

        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread,
 8003d10:	4b23      	ldr	r3, [pc, #140]	@ (8003da0 <_tx_timer_initialize+0x11c>)
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	4b24      	ldr	r3, [pc, #144]	@ (8003da8 <_tx_timer_initialize+0x124>)
 8003d16:	6819      	ldr	r1, [r3, #0]
 8003d18:	4b24      	ldr	r3, [pc, #144]	@ (8003dac <_tx_timer_initialize+0x128>)
 8003d1a:	6818      	ldr	r0, [r3, #0]
 8003d1c:	4b23      	ldr	r3, [pc, #140]	@ (8003dac <_tx_timer_initialize+0x128>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4699      	mov	r9, r3
 8003d22:	4c23      	ldr	r4, [pc, #140]	@ (8003db0 <_tx_timer_initialize+0x12c>)
 8003d24:	46a0      	mov	r8, r4
 8003d26:	4e23      	ldr	r6, [pc, #140]	@ (8003db4 <_tx_timer_initialize+0x130>)
 8003d28:	4d23      	ldr	r5, [pc, #140]	@ (8003db8 <_tx_timer_initialize+0x134>)
 8003d2a:	4c24      	ldr	r4, [pc, #144]	@ (8003dbc <_tx_timer_initialize+0x138>)
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	469c      	mov	ip, r3
 8003d30:	4663      	mov	r3, ip
 8003d32:	9305      	str	r3, [sp, #20]
 8003d34:	2300      	movs	r3, #0
 8003d36:	469c      	mov	ip, r3
 8003d38:	4663      	mov	r3, ip
 8003d3a:	9304      	str	r3, [sp, #16]
 8003d3c:	464b      	mov	r3, r9
 8003d3e:	9303      	str	r3, [sp, #12]
 8003d40:	9002      	str	r0, [sp, #8]
 8003d42:	9101      	str	r1, [sp, #4]
 8003d44:	9200      	str	r2, [sp, #0]
 8003d46:	4643      	mov	r3, r8
 8003d48:	0032      	movs	r2, r6
 8003d4a:	0029      	movs	r1, r5
 8003d4c:	0020      	movs	r0, r4
 8003d4e:	f7ff f9eb 	bl	8003128 <_tx_thread_create>
 8003d52:	0003      	movs	r3, r0
 8003d54:	607b      	str	r3, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)

    } while (status != TX_SUCCESS);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d1d9      	bne.n	8003d10 <_tx_timer_initialize+0x8c>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 8003d5c:	4b18      	ldr	r3, [pc, #96]	@ (8003dc0 <_tx_timer_initialize+0x13c>)
 8003d5e:	2200      	movs	r2, #0
 8003d60:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 8003d62:	4b18      	ldr	r3, [pc, #96]	@ (8003dc4 <_tx_timer_initialize+0x140>)
 8003d64:	2200      	movs	r2, #0
 8003d66:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 8003d68:	46c0      	nop			@ (mov r8, r8)
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	b007      	add	sp, #28
 8003d6e:	bcc0      	pop	{r6, r7}
 8003d70:	46b9      	mov	r9, r7
 8003d72:	46b0      	mov	r8, r6
 8003d74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d76:	46c0      	nop			@ (mov r8, r8)
 8003d78:	20000f20 	.word	0x20000f20
 8003d7c:	20001480 	.word	0x20001480
 8003d80:	20000f24 	.word	0x20000f24
 8003d84:	20000fb4 	.word	0x20000fb4
 8003d88:	20000fc0 	.word	0x20000fc0
 8003d8c:	20000f28 	.word	0x20000f28
 8003d90:	20000fa8 	.word	0x20000fa8
 8003d94:	20000fb0 	.word	0x20000fb0
 8003d98:	20000fac 	.word	0x20000fac
 8003d9c:	20000fa4 	.word	0x20000fa4
 8003da0:	20001074 	.word	0x20001074
 8003da4:	20001080 	.word	0x20001080
 8003da8:	20001078 	.word	0x20001078
 8003dac:	2000107c 	.word	0x2000107c
 8003db0:	4154494d 	.word	0x4154494d
 8003db4:	08003ef1 	.word	0x08003ef1
 8003db8:	080050f0 	.word	0x080050f0
 8003dbc:	20000fc4 	.word	0x20000fc4
 8003dc0:	20000fb8 	.word	0x20000fb8
 8003dc4:	20000fbc 	.word	0x20000fbc

08003dc8 <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b088      	sub	sp, #32
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d049      	beq.n	8003e70 <_tx_timer_system_activate+0xa8>
    {

        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	3301      	adds	r3, #1
 8003de0:	d046      	beq.n	8003e70 <_tx_timer_system_activate+0xa8>
        {

            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	699b      	ldr	r3, [r3, #24]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d142      	bne.n	8003e70 <_tx_timer_system_activate+0xa8>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	2b20      	cmp	r3, #32
 8003dee:	d902      	bls.n	8003df6 <_tx_timer_system_activate+0x2e>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 8003df0:	231f      	movs	r3, #31
 8003df2:	61bb      	str	r3, [r7, #24]
 8003df4:	e002      	b.n	8003dfc <_tx_timer_system_activate+0x34>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	3b01      	subs	r3, #1
 8003dfa:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */

                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 8003dfc:	4b1e      	ldr	r3, [pc, #120]	@ (8003e78 <_tx_timer_system_activate+0xb0>)
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	69bb      	ldr	r3, [r7, #24]
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	18d3      	adds	r3, r2, r3
 8003e06:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 8003e08:	4b1c      	ldr	r3, [pc, #112]	@ (8003e7c <_tx_timer_system_activate+0xb4>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	69fa      	ldr	r2, [r7, #28]
 8003e0e:	429a      	cmp	r2, r3
 8003e10:	d30b      	bcc.n	8003e2a <_tx_timer_system_activate+0x62>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 8003e12:	4b1a      	ldr	r3, [pc, #104]	@ (8003e7c <_tx_timer_system_activate+0xb4>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	69fa      	ldr	r2, [r7, #28]
 8003e18:	1ad3      	subs	r3, r2, r3
 8003e1a:	109b      	asrs	r3, r3, #2
 8003e1c:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 8003e1e:	4b18      	ldr	r3, [pc, #96]	@ (8003e80 <_tx_timer_system_activate+0xb8>)
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	009b      	lsls	r3, r3, #2
 8003e26:	18d3      	adds	r3, r2, r3
 8003e28:	61fb      	str	r3, [r7, #28]
                }

                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 8003e2a:	69fb      	ldr	r3, [r7, #28]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d109      	bne.n	8003e46 <_tx_timer_system_activate+0x7e>
                {

                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	687a      	ldr	r2, [r7, #4]
 8003e36:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	687a      	ldr	r2, [r7, #4]
 8003e3c:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 8003e3e:	69fb      	ldr	r3, [r7, #28]
 8003e40:	687a      	ldr	r2, [r7, #4]
 8003e42:	601a      	str	r2, [r3, #0]
 8003e44:	e011      	b.n	8003e6a <_tx_timer_system_activate+0xa2>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 8003e46:	69fb      	ldr	r3, [r7, #28]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	695b      	ldr	r3, [r3, #20]
 8003e50:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	687a      	ldr	r2, [r7, #4]
 8003e56:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	68fa      	ldr	r2, [r7, #12]
 8003e62:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	68ba      	ldr	r2, [r7, #8]
 8003e68:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	69fa      	ldr	r2, [r7, #28]
 8003e6e:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 8003e70:	46c0      	nop			@ (mov r8, r8)
 8003e72:	46bd      	mov	sp, r7
 8003e74:	b008      	add	sp, #32
 8003e76:	bd80      	pop	{r7, pc}
 8003e78:	20000fb0 	.word	0x20000fb0
 8003e7c:	20000fac 	.word	0x20000fac
 8003e80:	20000fa8 	.word	0x20000fa8

08003e84 <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b086      	sub	sp, #24
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	699b      	ldr	r3, [r3, #24]
 8003e90:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d026      	beq.n	8003ee6 <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	691b      	ldr	r3, [r3, #16]
 8003e9c:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 8003e9e:	687a      	ldr	r2, [r7, #4]
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	d108      	bne.n	8003eb8 <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	687a      	ldr	r2, [r7, #4]
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d117      	bne.n	8003ee0 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	601a      	str	r2, [r3, #0]
 8003eb6:	e013      	b.n	8003ee0 <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	695b      	ldr	r3, [r3, #20]
 8003ebc:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	68fa      	ldr	r2, [r7, #12]
 8003ec2:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	693a      	ldr	r2, [r7, #16]
 8003ec8:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	687a      	ldr	r2, [r7, #4]
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d105      	bne.n	8003ee0 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	697a      	ldr	r2, [r7, #20]
 8003ed8:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	693a      	ldr	r2, [r7, #16]
 8003ede:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	619a      	str	r2, [r3, #24]
    }
}
 8003ee6:	46c0      	nop			@ (mov r8, r8)
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	b006      	add	sp, #24
 8003eec:	bd80      	pop	{r7, pc}
	...

08003ef0 <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b094      	sub	sp, #80	@ 0x50
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 8003ef8:	2300      	movs	r3, #0
 8003efa:	647b      	str	r3, [r7, #68]	@ 0x44
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	4a70      	ldr	r2, [pc, #448]	@ (80040c0 <_tx_timer_thread_entry+0x1d0>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d000      	beq.n	8003f06 <_tx_timer_thread_entry+0x16>
 8003f04:	e0d8      	b.n	80040b8 <_tx_timer_thread_entry+0x1c8>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8003f06:	f3ef 8310 	mrs	r3, PRIMASK
 8003f0a:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile (" CPSID i" : : : "memory" );
 8003f0c:	b672      	cpsid	i
    return(primask_value);
 8003f0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {

            /* First, move the current list pointer and clear the timer
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 8003f10:	64fb      	str	r3, [r7, #76]	@ 0x4c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 8003f12:	4b6c      	ldr	r3, [pc, #432]	@ (80040c4 <_tx_timer_thread_entry+0x1d4>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d003      	beq.n	8003f28 <_tx_timer_thread_entry+0x38>
            {

                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	220c      	movs	r2, #12
 8003f24:	18ba      	adds	r2, r7, r2
 8003f26:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 8003f28:	4b66      	ldr	r3, [pc, #408]	@ (80040c4 <_tx_timer_thread_entry+0x1d4>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 8003f30:	4b64      	ldr	r3, [pc, #400]	@ (80040c4 <_tx_timer_thread_entry+0x1d4>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	1d1a      	adds	r2, r3, #4
 8003f36:	4b63      	ldr	r3, [pc, #396]	@ (80040c4 <_tx_timer_thread_entry+0x1d4>)
 8003f38:	601a      	str	r2, [r3, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 8003f3a:	4b62      	ldr	r3, [pc, #392]	@ (80040c4 <_tx_timer_thread_entry+0x1d4>)
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	4b62      	ldr	r3, [pc, #392]	@ (80040c8 <_tx_timer_thread_entry+0x1d8>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	429a      	cmp	r2, r3
 8003f44:	d103      	bne.n	8003f4e <_tx_timer_thread_entry+0x5e>
            {

                _tx_timer_current_ptr =  _tx_timer_list_start;
 8003f46:	4b61      	ldr	r3, [pc, #388]	@ (80040cc <_tx_timer_thread_entry+0x1dc>)
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	4b5e      	ldr	r3, [pc, #376]	@ (80040c4 <_tx_timer_thread_entry+0x1d4>)
 8003f4c:	601a      	str	r2, [r3, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 8003f4e:	4b60      	ldr	r3, [pc, #384]	@ (80040d0 <_tx_timer_thread_entry+0x1e0>)
 8003f50:	2200      	movs	r2, #0
 8003f52:	601a      	str	r2, [r3, #0]
 8003f54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003f56:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8003f58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f5a:	f383 8810 	msr	PRIMASK, r3
}
 8003f5e:	46c0      	nop			@ (mov r8, r8)
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8003f60:	f3ef 8310 	mrs	r3, PRIMASK
 8003f64:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile (" CPSID i" : : : "memory" );
 8003f66:	b672      	cpsid	i
    return(primask_value);
 8003f68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 8003f6a:	64fb      	str	r3, [r7, #76]	@ 0x4c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 8003f6c:	e07d      	b.n	800406a <_tx_timer_thread_entry+0x17a>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	63fb      	str	r3, [r7, #60]	@ 0x3c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	691b      	ldr	r3, [r3, #16]
 8003f76:	63bb      	str	r3, [r7, #56]	@ 0x38

                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 8003f7c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003f7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f80:	429a      	cmp	r2, r3
 8003f82:	d102      	bne.n	8003f8a <_tx_timer_thread_entry+0x9a>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 8003f84:	2300      	movs	r3, #0
 8003f86:	60fb      	str	r3, [r7, #12]
 8003f88:	e00e      	b.n	8003fa8 <_tx_timer_thread_entry+0xb8>
                {

                    /* No, not the only expired timer.  */

                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 8003f8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f8c:	695b      	ldr	r3, [r3, #20]
 8003f8e:	637b      	str	r3, [r7, #52]	@ 0x34
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 8003f90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f92:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003f94:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 8003f96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f98:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003f9a:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 8003f9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f9e:	220c      	movs	r2, #12
 8003fa0:	18ba      	adds	r2, r7, r2
 8003fa2:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 8003fa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fa6:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 8003fa8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	2b20      	cmp	r3, #32
 8003fae:	d911      	bls.n	8003fd4 <_tx_timer_thread_entry+0xe4>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 8003fb0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	3b20      	subs	r3, #32
 8003fb6:	001a      	movs	r2, r3
                    current_timer -> tx_timer_internal_remaining_ticks =
 8003fb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003fba:	601a      	str	r2, [r3, #0]

                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	64bb      	str	r3, [r7, #72]	@ 0x48

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 8003fc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003fc2:	2208      	movs	r2, #8
 8003fc4:	18ba      	adds	r2, r7, r2
 8003fc6:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 8003fc8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003fca:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003fcc:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 8003fce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003fd0:	60bb      	str	r3, [r7, #8]
 8003fd2:	e01a      	b.n	800400a <_tx_timer_thread_entry+0x11a>
                    }
#endif

                    /* Copy the calling function and ID into local variables before interrupts
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 8003fd4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	64bb      	str	r3, [r7, #72]	@ 0x48
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 8003fda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003fdc:	68db      	ldr	r3, [r3, #12]
 8003fde:	647b      	str	r3, [r7, #68]	@ 0x44

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 8003fe0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003fe2:	685a      	ldr	r2, [r3, #4]
 8003fe4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003fe6:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 8003fe8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d009      	beq.n	8004004 <_tx_timer_thread_entry+0x114>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 8003ff0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ff2:	2208      	movs	r2, #8
 8003ff4:	18ba      	adds	r2, r7, r2
 8003ff6:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 8003ff8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ffa:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003ffc:	611a      	str	r2, [r3, #16]

                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 8003ffe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004000:	60bb      	str	r3, [r7, #8]
 8004002:	e002      	b.n	800400a <_tx_timer_thread_entry+0x11a>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 8004004:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004006:	2200      	movs	r2, #0
 8004008:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 800400a:	4b32      	ldr	r3, [pc, #200]	@ (80040d4 <_tx_timer_thread_entry+0x1e4>)
 800400c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800400e:	601a      	str	r2, [r3, #0]
 8004010:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004012:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8004014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004016:	f383 8810 	msr	PRIMASK, r3
}
 800401a:	46c0      	nop			@ (mov r8, r8)

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 800401c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800401e:	2b00      	cmp	r3, #0
 8004020:	d003      	beq.n	800402a <_tx_timer_thread_entry+0x13a>
                {

                    (timeout_function) (timeout_param);
 8004022:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004024:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004026:	0010      	movs	r0, r2
 8004028:	4798      	blx	r3
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800402a:	f3ef 8310 	mrs	r3, PRIMASK
 800402e:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8004030:	b672      	cpsid	i
    return(primask_value);
 8004032:	6a3b      	ldr	r3, [r7, #32]
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 8004034:	64fb      	str	r3, [r7, #76]	@ 0x4c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 8004036:	4b27      	ldr	r3, [pc, #156]	@ (80040d4 <_tx_timer_thread_entry+0x1e4>)
 8004038:	2200      	movs	r2, #0
 800403a:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004040:	429a      	cmp	r2, r3
 8004042:	d106      	bne.n	8004052 <_tx_timer_thread_entry+0x162>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 8004044:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004046:	2200      	movs	r2, #0
 8004048:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 800404a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800404c:	0018      	movs	r0, r3
 800404e:	f7ff febb 	bl	8003dc8 <_tx_timer_system_activate>
 8004052:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004054:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8004056:	69bb      	ldr	r3, [r7, #24]
 8004058:	f383 8810 	msr	PRIMASK, r3
}
 800405c:	46c0      	nop			@ (mov r8, r8)
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800405e:	f3ef 8310 	mrs	r3, PRIMASK
 8004062:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8004064:	b672      	cpsid	i
    return(primask_value);
 8004066:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 8004068:	64fb      	str	r3, [r7, #76]	@ 0x4c
            while (expired_timers != TX_NULL)
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d000      	beq.n	8004072 <_tx_timer_thread_entry+0x182>
 8004070:	e77d      	b.n	8003f6e <_tx_timer_thread_entry+0x7e>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 8004072:	4b17      	ldr	r3, [pc, #92]	@ (80040d0 <_tx_timer_thread_entry+0x1e0>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d117      	bne.n	80040aa <_tx_timer_thread_entry+0x1ba>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 800407a:	4b17      	ldr	r3, [pc, #92]	@ (80040d8 <_tx_timer_thread_entry+0x1e8>)
 800407c:	643b      	str	r3, [r7, #64]	@ 0x40

                /* Set the status to suspending, in order to indicate the
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 800407e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004080:	2203      	movs	r2, #3
 8004082:	631a      	str	r2, [r3, #48]	@ 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8004084:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004086:	2201      	movs	r2, #1
 8004088:	639a      	str	r2, [r3, #56]	@ 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 800408a:	4b14      	ldr	r3, [pc, #80]	@ (80040dc <_tx_timer_thread_entry+0x1ec>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	1c5a      	adds	r2, r3, #1
 8004090:	4b12      	ldr	r3, [pc, #72]	@ (80040dc <_tx_timer_thread_entry+0x1ec>)
 8004092:	601a      	str	r2, [r3, #0]
 8004094:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004096:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	f383 8810 	msr	PRIMASK, r3
}
 800409e:	46c0      	nop			@ (mov r8, r8)

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 80040a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80040a2:	0018      	movs	r0, r3
 80040a4:	f7ff fbbc 	bl	8003820 <_tx_thread_system_suspend>
 80040a8:	e72d      	b.n	8003f06 <_tx_timer_thread_entry+0x16>
 80040aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80040ac:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	f383 8810 	msr	PRIMASK, r3
}
 80040b4:	46c0      	nop			@ (mov r8, r8)
            TX_DISABLE
 80040b6:	e726      	b.n	8003f06 <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 80040b8:	46c0      	nop			@ (mov r8, r8)
 80040ba:	46bd      	mov	sp, r7
 80040bc:	b014      	add	sp, #80	@ 0x50
 80040be:	bd80      	pop	{r7, pc}
 80040c0:	4154494d 	.word	0x4154494d
 80040c4:	20000fb0 	.word	0x20000fb0
 80040c8:	20000fac 	.word	0x20000fac
 80040cc:	20000fa8 	.word	0x20000fa8
 80040d0:	20000fb4 	.word	0x20000fb4
 80040d4:	20000fc0 	.word	0x20000fc0
 80040d8:	20000fc4 	.word	0x20000fc4
 80040dc:	20000f14 	.word	0x20000f14

080040e0 <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b090      	sub	sp, #64	@ 0x40
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	60f8      	str	r0, [r7, #12]
 80040e8:	60b9      	str	r1, [r7, #8]
 80040ea:	607a      	str	r2, [r7, #4]
 80040ec:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80040ee:	2300      	movs	r3, #0
 80040f0:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d102      	bne.n	80040fe <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 80040f8:	2302      	movs	r3, #2
 80040fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80040fc:	e070      	b.n	80041e0 <_txe_byte_pool_create+0x100>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 80040fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004100:	2b34      	cmp	r3, #52	@ 0x34
 8004102:	d002      	beq.n	800410a <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8004104:	2302      	movs	r3, #2
 8004106:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004108:	e06a      	b.n	80041e0 <_txe_byte_pool_create+0x100>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800410a:	f3ef 8310 	mrs	r3, PRIMASK
 800410e:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile (" CPSID i" : : : "memory" );
 8004110:	b672      	cpsid	i
    return(primask_value);
 8004112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8004114:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8004116:	4b3a      	ldr	r3, [pc, #232]	@ (8004200 <_txe_byte_pool_create+0x120>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	1c5a      	adds	r2, r3, #1
 800411c:	4b38      	ldr	r3, [pc, #224]	@ (8004200 <_txe_byte_pool_create+0x120>)
 800411e:	601a      	str	r2, [r3, #0]
 8004120:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004122:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8004124:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004126:	f383 8810 	msr	PRIMASK, r3
}
 800412a:	46c0      	nop			@ (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 800412c:	4b35      	ldr	r3, [pc, #212]	@ (8004204 <_txe_byte_pool_create+0x124>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	637b      	str	r3, [r7, #52]	@ 0x34
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 8004132:	2300      	movs	r3, #0
 8004134:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004136:	e009      	b.n	800414c <_txe_byte_pool_create+0x6c>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 8004138:	68fa      	ldr	r2, [r7, #12]
 800413a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800413c:	429a      	cmp	r2, r3
 800413e:	d00b      	beq.n	8004158 <_txe_byte_pool_create+0x78>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 8004140:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004142:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004144:	637b      	str	r3, [r7, #52]	@ 0x34
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 8004146:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004148:	3301      	adds	r3, #1
 800414a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800414c:	4b2e      	ldr	r3, [pc, #184]	@ (8004208 <_txe_byte_pool_create+0x128>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004152:	429a      	cmp	r2, r3
 8004154:	d3f0      	bcc.n	8004138 <_txe_byte_pool_create+0x58>
 8004156:	e000      	b.n	800415a <_txe_byte_pool_create+0x7a>
                break;
 8004158:	46c0      	nop			@ (mov r8, r8)
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800415a:	f3ef 8310 	mrs	r3, PRIMASK
 800415e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8004160:	b672      	cpsid	i
    return(primask_value);
 8004162:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8004164:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8004166:	4b26      	ldr	r3, [pc, #152]	@ (8004200 <_txe_byte_pool_create+0x120>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	1e5a      	subs	r2, r3, #1
 800416c:	4b24      	ldr	r3, [pc, #144]	@ (8004200 <_txe_byte_pool_create+0x120>)
 800416e:	601a      	str	r2, [r3, #0]
 8004170:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004172:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8004174:	6a3b      	ldr	r3, [r7, #32]
 8004176:	f383 8810 	msr	PRIMASK, r3
}
 800417a:	46c0      	nop			@ (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800417c:	f7ff fa18 	bl	80035b0 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 8004180:	68fa      	ldr	r2, [r7, #12]
 8004182:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004184:	429a      	cmp	r2, r3
 8004186:	d102      	bne.n	800418e <_txe_byte_pool_create+0xae>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 8004188:	2302      	movs	r3, #2
 800418a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800418c:	e028      	b.n	80041e0 <_txe_byte_pool_create+0x100>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d102      	bne.n	800419a <_txe_byte_pool_create+0xba>
        {

            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 8004194:	2303      	movs	r3, #3
 8004196:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004198:	e022      	b.n	80041e0 <_txe_byte_pool_create+0x100>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	2b63      	cmp	r3, #99	@ 0x63
 800419e:	d802      	bhi.n	80041a6 <_txe_byte_pool_create+0xc6>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 80041a0:	2305      	movs	r3, #5
 80041a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80041a4:	e01c      	b.n	80041e0 <_txe_byte_pool_create+0x100>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 80041a6:	4b19      	ldr	r3, [pc, #100]	@ (800420c <_txe_byte_pool_create+0x12c>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	62fb      	str	r3, [r7, #44]	@ 0x2c

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 80041ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80041ae:	4b18      	ldr	r3, [pc, #96]	@ (8004210 <_txe_byte_pool_create+0x130>)
 80041b0:	429a      	cmp	r2, r3
 80041b2:	d101      	bne.n	80041b8 <_txe_byte_pool_create+0xd8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 80041b4:	2313      	movs	r3, #19
 80041b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80041b8:	f3ef 8305 	mrs	r3, IPSR
 80041bc:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 80041be:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80041c0:	4b14      	ldr	r3, [pc, #80]	@ (8004214 <_txe_byte_pool_create+0x134>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4313      	orrs	r3, r2
 80041c6:	d00b      	beq.n	80041e0 <_txe_byte_pool_create+0x100>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80041c8:	f3ef 8305 	mrs	r3, IPSR
 80041cc:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80041ce:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 80041d0:	4b10      	ldr	r3, [pc, #64]	@ (8004214 <_txe_byte_pool_create+0x134>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4313      	orrs	r3, r2
 80041d6:	4a10      	ldr	r2, [pc, #64]	@ (8004218 <_txe_byte_pool_create+0x138>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d801      	bhi.n	80041e0 <_txe_byte_pool_create+0x100>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 80041dc:	2313      	movs	r3, #19
 80041de:	63fb      	str	r3, [r7, #60]	@ 0x3c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80041e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d107      	bne.n	80041f6 <_txe_byte_pool_create+0x116>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	687a      	ldr	r2, [r7, #4]
 80041ea:	68b9      	ldr	r1, [r7, #8]
 80041ec:	68f8      	ldr	r0, [r7, #12]
 80041ee:	f7fe fa81 	bl	80026f4 <_tx_byte_pool_create>
 80041f2:	0003      	movs	r3, r0
 80041f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    }

    /* Return completion status.  */
    return(status);
 80041f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80041f8:	0018      	movs	r0, r3
 80041fa:	46bd      	mov	sp, r7
 80041fc:	b010      	add	sp, #64	@ 0x40
 80041fe:	bd80      	pop	{r7, pc}
 8004200:	20000f14 	.word	0x20000f14
 8004204:	20000e6c 	.word	0x20000e6c
 8004208:	20000e70 	.word	0x20000e70
 800420c:	20000e7c 	.word	0x20000e7c
 8004210:	20000fc4 	.word	0x20000fc4
 8004214:	2000000c 	.word	0x2000000c
 8004218:	f0f0f0ef 	.word	0xf0f0f0ef

0800421c <_txe_queue_create>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_create(TX_QUEUE *queue_ptr, CHAR *name_ptr, UINT message_size,
                        VOID *queue_start, ULONG queue_size, UINT queue_control_block_size)
{
 800421c:	b590      	push	{r4, r7, lr}
 800421e:	b093      	sub	sp, #76	@ 0x4c
 8004220:	af02      	add	r7, sp, #8
 8004222:	60f8      	str	r0, [r7, #12]
 8004224:	60b9      	str	r1, [r7, #8]
 8004226:	607a      	str	r2, [r7, #4]
 8004228:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800422a:	2300      	movs	r3, #0
 800422c:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d102      	bne.n	800423a <_txe_queue_create+0x1e>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 8004234:	2309      	movs	r3, #9
 8004236:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004238:	e07e      	b.n	8004338 <_txe_queue_create+0x11c>
    }

    /* Now check for a valid control block size.  */
    else if (queue_control_block_size != (sizeof(TX_QUEUE)))
 800423a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800423c:	2b38      	cmp	r3, #56	@ 0x38
 800423e:	d002      	beq.n	8004246 <_txe_queue_create+0x2a>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 8004240:	2309      	movs	r3, #9
 8004242:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004244:	e078      	b.n	8004338 <_txe_queue_create+0x11c>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8004246:	f3ef 8310 	mrs	r3, PRIMASK
 800424a:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile (" CPSID i" : : : "memory" );
 800424c:	b672      	cpsid	i
    return(primask_value);
 800424e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8004250:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8004252:	4b43      	ldr	r3, [pc, #268]	@ (8004360 <_txe_queue_create+0x144>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	1c5a      	adds	r2, r3, #1
 8004258:	4b41      	ldr	r3, [pc, #260]	@ (8004360 <_txe_queue_create+0x144>)
 800425a:	601a      	str	r2, [r3, #0]
 800425c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800425e:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8004260:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004262:	f383 8810 	msr	PRIMASK, r3
}
 8004266:	46c0      	nop			@ (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_queue =   _tx_queue_created_ptr;
 8004268:	4b3e      	ldr	r3, [pc, #248]	@ (8004364 <_txe_queue_create+0x148>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	637b      	str	r3, [r7, #52]	@ 0x34
        for (i = ((ULONG) 0); i < _tx_queue_created_count; i++)
 800426e:	2300      	movs	r3, #0
 8004270:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004272:	e009      	b.n	8004288 <_txe_queue_create+0x6c>
        {

            /* Determine if this queue matches the queue in the list.  */
            if (queue_ptr == next_queue)
 8004274:	68fa      	ldr	r2, [r7, #12]
 8004276:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004278:	429a      	cmp	r2, r3
 800427a:	d00b      	beq.n	8004294 <_txe_queue_create+0x78>
            }
            else
            {

                /* Move to the next queue.  */
                next_queue =  next_queue -> tx_queue_created_next;
 800427c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800427e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004280:	637b      	str	r3, [r7, #52]	@ 0x34
        for (i = ((ULONG) 0); i < _tx_queue_created_count; i++)
 8004282:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004284:	3301      	adds	r3, #1
 8004286:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004288:	4b37      	ldr	r3, [pc, #220]	@ (8004368 <_txe_queue_create+0x14c>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800428e:	429a      	cmp	r2, r3
 8004290:	d3f0      	bcc.n	8004274 <_txe_queue_create+0x58>
 8004292:	e000      	b.n	8004296 <_txe_queue_create+0x7a>
                break;
 8004294:	46c0      	nop			@ (mov r8, r8)
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8004296:	f3ef 8310 	mrs	r3, PRIMASK
 800429a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800429c:	b672      	cpsid	i
    return(primask_value);
 800429e:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 80042a0:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 80042a2:	4b2f      	ldr	r3, [pc, #188]	@ (8004360 <_txe_queue_create+0x144>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	1e5a      	subs	r2, r3, #1
 80042a8:	4b2d      	ldr	r3, [pc, #180]	@ (8004360 <_txe_queue_create+0x144>)
 80042aa:	601a      	str	r2, [r3, #0]
 80042ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042ae:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80042b0:	6a3b      	ldr	r3, [r7, #32]
 80042b2:	f383 8810 	msr	PRIMASK, r3
}
 80042b6:	46c0      	nop			@ (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 80042b8:	f7ff f97a 	bl	80035b0 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate queue.  */
        if (queue_ptr == next_queue)
 80042bc:	68fa      	ldr	r2, [r7, #12]
 80042be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d102      	bne.n	80042ca <_txe_queue_create+0xae>
        {

            /* Queue is already created, return appropriate error code.  */
            status =  TX_QUEUE_ERROR;
 80042c4:	2309      	movs	r3, #9
 80042c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80042c8:	e036      	b.n	8004338 <_txe_queue_create+0x11c>
        }

        /* Check the starting address of the queue.  */
        else if (queue_start == TX_NULL)
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d102      	bne.n	80042d6 <_txe_queue_create+0xba>
        {

            /* Invalid starting address of queue.  */
            status =  TX_PTR_ERROR;
 80042d0:	2303      	movs	r3, #3
 80042d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80042d4:	e030      	b.n	8004338 <_txe_queue_create+0x11c>
        }

        /* Check for an invalid message size - less than 1.  */
        else if (message_size < TX_1_ULONG)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d102      	bne.n	80042e2 <_txe_queue_create+0xc6>
        {

            /* Invalid message size specified.  */
            status =  TX_SIZE_ERROR;
 80042dc:	2305      	movs	r3, #5
 80042de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80042e0:	e02a      	b.n	8004338 <_txe_queue_create+0x11c>
        }

        /* Check for an invalid message size - greater than 16.  */
        else if (message_size > TX_16_ULONG)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2b10      	cmp	r3, #16
 80042e6:	d902      	bls.n	80042ee <_txe_queue_create+0xd2>
        {

            /* Invalid message size specified.  */
            status =  TX_SIZE_ERROR;
 80042e8:	2305      	movs	r3, #5
 80042ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80042ec:	e024      	b.n	8004338 <_txe_queue_create+0x11c>
        }

        /* Check on the queue size.  */
        else if ((queue_size/(sizeof(ULONG))) < message_size)
 80042ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80042f0:	089b      	lsrs	r3, r3, #2
 80042f2:	687a      	ldr	r2, [r7, #4]
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d902      	bls.n	80042fe <_txe_queue_create+0xe2>
        {

            /* Invalid queue size specified.  */
            status =  TX_SIZE_ERROR;
 80042f8:	2305      	movs	r3, #5
 80042fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80042fc:	e01c      	b.n	8004338 <_txe_queue_create+0x11c>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 80042fe:	4b1b      	ldr	r3, [pc, #108]	@ (800436c <_txe_queue_create+0x150>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	62fb      	str	r3, [r7, #44]	@ 0x2c

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 8004304:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004306:	4b1a      	ldr	r3, [pc, #104]	@ (8004370 <_txe_queue_create+0x154>)
 8004308:	429a      	cmp	r2, r3
 800430a:	d101      	bne.n	8004310 <_txe_queue_create+0xf4>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800430c:	2313      	movs	r3, #19
 800430e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8004310:	f3ef 8305 	mrs	r3, IPSR
 8004314:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8004316:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8004318:	4b16      	ldr	r3, [pc, #88]	@ (8004374 <_txe_queue_create+0x158>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4313      	orrs	r3, r2
 800431e:	d00b      	beq.n	8004338 <_txe_queue_create+0x11c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8004320:	f3ef 8305 	mrs	r3, IPSR
 8004324:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8004326:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8004328:	4b12      	ldr	r3, [pc, #72]	@ (8004374 <_txe_queue_create+0x158>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4313      	orrs	r3, r2
 800432e:	4a12      	ldr	r2, [pc, #72]	@ (8004378 <_txe_queue_create+0x15c>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d801      	bhi.n	8004338 <_txe_queue_create+0x11c>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 8004334:	2313      	movs	r3, #19
 8004336:	63fb      	str	r3, [r7, #60]	@ 0x3c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8004338:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800433a:	2b00      	cmp	r3, #0
 800433c:	d10a      	bne.n	8004354 <_txe_queue_create+0x138>
    {

        /* Call actual queue create function.  */
        status =  _tx_queue_create(queue_ptr, name_ptr, message_size, queue_start, queue_size);
 800433e:	683c      	ldr	r4, [r7, #0]
 8004340:	687a      	ldr	r2, [r7, #4]
 8004342:	68b9      	ldr	r1, [r7, #8]
 8004344:	68f8      	ldr	r0, [r7, #12]
 8004346:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004348:	9300      	str	r3, [sp, #0]
 800434a:	0023      	movs	r3, r4
 800434c:	f7fe fb70 	bl	8002a30 <_tx_queue_create>
 8004350:	0003      	movs	r3, r0
 8004352:	63fb      	str	r3, [r7, #60]	@ 0x3c
    }

    /* Return completion status.  */
    return(status);
 8004354:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004356:	0018      	movs	r0, r3
 8004358:	46bd      	mov	sp, r7
 800435a:	b011      	add	sp, #68	@ 0x44
 800435c:	bd90      	pop	{r4, r7, pc}
 800435e:	46c0      	nop			@ (mov r8, r8)
 8004360:	20000f14 	.word	0x20000f14
 8004364:	20000e4c 	.word	0x20000e4c
 8004368:	20000e50 	.word	0x20000e50
 800436c:	20000e7c 	.word	0x20000e7c
 8004370:	20000fc4 	.word	0x20000fc4
 8004374:	2000000c 	.word	0x2000000c
 8004378:	f0f0f0ef 	.word	0xf0f0f0ef

0800437c <_txe_queue_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_receive(TX_QUEUE *queue_ptr, VOID *destination_ptr, ULONG wait_option)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b088      	sub	sp, #32
 8004380:	af00      	add	r7, sp, #0
 8004382:	60f8      	str	r0, [r7, #12]
 8004384:	60b9      	str	r1, [r7, #8]
 8004386:	607a      	str	r2, [r7, #4]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8004388:	2300      	movs	r3, #0
 800438a:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d102      	bne.n	8004398 <_txe_queue_receive+0x1c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 8004392:	2309      	movs	r3, #9
 8004394:	61fb      	str	r3, [r7, #28]
 8004396:	e024      	b.n	80043e2 <_txe_queue_receive+0x66>
    }

    /* Now check for invalid queue ID.  */
    else if (queue_ptr -> tx_queue_id != TX_QUEUE_ID)
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a19      	ldr	r2, [pc, #100]	@ (8004404 <_txe_queue_receive+0x88>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d002      	beq.n	80043a8 <_txe_queue_receive+0x2c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 80043a2:	2309      	movs	r3, #9
 80043a4:	61fb      	str	r3, [r7, #28]
 80043a6:	e01c      	b.n	80043e2 <_txe_queue_receive+0x66>
    }

    /* Check for an invalid destination for message.  */
    else if (destination_ptr == TX_NULL)
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d102      	bne.n	80043b4 <_txe_queue_receive+0x38>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 80043ae:	2303      	movs	r3, #3
 80043b0:	61fb      	str	r3, [r7, #28]
 80043b2:	e016      	b.n	80043e2 <_txe_queue_receive+0x66>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d013      	beq.n	80043e2 <_txe_queue_receive+0x66>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80043ba:	f3ef 8305 	mrs	r3, IPSR
 80043be:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80043c0:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80043c2:	4b11      	ldr	r3, [pc, #68]	@ (8004408 <_txe_queue_receive+0x8c>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4313      	orrs	r3, r2
 80043c8:	d002      	beq.n	80043d0 <_txe_queue_receive+0x54>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 80043ca:	2304      	movs	r3, #4
 80043cc:	61fb      	str	r3, [r7, #28]
 80043ce:	e008      	b.n	80043e2 <_txe_queue_receive+0x66>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 80043d0:	4b0e      	ldr	r3, [pc, #56]	@ (800440c <_txe_queue_receive+0x90>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 80043d6:	69ba      	ldr	r2, [r7, #24]
 80043d8:	4b0d      	ldr	r3, [pc, #52]	@ (8004410 <_txe_queue_receive+0x94>)
 80043da:	429a      	cmp	r2, r3
 80043dc:	d101      	bne.n	80043e2 <_txe_queue_receive+0x66>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 80043de:	2304      	movs	r3, #4
 80043e0:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80043e2:	69fb      	ldr	r3, [r7, #28]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d107      	bne.n	80043f8 <_txe_queue_receive+0x7c>
    {

        /* Call actual queue receive function.  */
        status =  _tx_queue_receive(queue_ptr, destination_ptr, wait_option);
 80043e8:	687a      	ldr	r2, [r7, #4]
 80043ea:	68b9      	ldr	r1, [r7, #8]
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	0018      	movs	r0, r3
 80043f0:	f7fe fba6 	bl	8002b40 <_tx_queue_receive>
 80043f4:	0003      	movs	r3, r0
 80043f6:	61fb      	str	r3, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 80043f8:	69fb      	ldr	r3, [r7, #28]
}
 80043fa:	0018      	movs	r0, r3
 80043fc:	46bd      	mov	sp, r7
 80043fe:	b008      	add	sp, #32
 8004400:	bd80      	pop	{r7, pc}
 8004402:	46c0      	nop			@ (mov r8, r8)
 8004404:	51554555 	.word	0x51554555
 8004408:	2000000c 	.word	0x2000000c
 800440c:	20000e7c 	.word	0x20000e7c
 8004410:	20000fc4 	.word	0x20000fc4

08004414 <_txe_queue_send>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_send(TX_QUEUE *queue_ptr, VOID *source_ptr, ULONG wait_option)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b088      	sub	sp, #32
 8004418:	af00      	add	r7, sp, #0
 800441a:	60f8      	str	r0, [r7, #12]
 800441c:	60b9      	str	r1, [r7, #8]
 800441e:	607a      	str	r2, [r7, #4]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8004420:	2300      	movs	r3, #0
 8004422:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d102      	bne.n	8004430 <_txe_queue_send+0x1c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800442a:	2309      	movs	r3, #9
 800442c:	61fb      	str	r3, [r7, #28]
 800442e:	e024      	b.n	800447a <_txe_queue_send+0x66>
    }

    /* Now check for invalid queue ID.  */
    else if (queue_ptr -> tx_queue_id != TX_QUEUE_ID)
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a19      	ldr	r2, [pc, #100]	@ (800449c <_txe_queue_send+0x88>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d002      	beq.n	8004440 <_txe_queue_send+0x2c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800443a:	2309      	movs	r3, #9
 800443c:	61fb      	str	r3, [r7, #28]
 800443e:	e01c      	b.n	800447a <_txe_queue_send+0x66>
    }

    /* Check for an invalid source for message.  */
    else if (source_ptr == TX_NULL)
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d102      	bne.n	800444c <_txe_queue_send+0x38>
    {

        /* Null source pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 8004446:	2303      	movs	r3, #3
 8004448:	61fb      	str	r3, [r7, #28]
 800444a:	e016      	b.n	800447a <_txe_queue_send+0x66>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d013      	beq.n	800447a <_txe_queue_send+0x66>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8004452:	f3ef 8305 	mrs	r3, IPSR
 8004456:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8004458:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800445a:	4b11      	ldr	r3, [pc, #68]	@ (80044a0 <_txe_queue_send+0x8c>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4313      	orrs	r3, r2
 8004460:	d002      	beq.n	8004468 <_txe_queue_send+0x54>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 8004462:	2304      	movs	r3, #4
 8004464:	61fb      	str	r3, [r7, #28]
 8004466:	e008      	b.n	800447a <_txe_queue_send+0x66>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 8004468:	4b0e      	ldr	r3, [pc, #56]	@ (80044a4 <_txe_queue_send+0x90>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 800446e:	69ba      	ldr	r2, [r7, #24]
 8004470:	4b0d      	ldr	r3, [pc, #52]	@ (80044a8 <_txe_queue_send+0x94>)
 8004472:	429a      	cmp	r2, r3
 8004474:	d101      	bne.n	800447a <_txe_queue_send+0x66>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 8004476:	2304      	movs	r3, #4
 8004478:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800447a:	69fb      	ldr	r3, [r7, #28]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d107      	bne.n	8004490 <_txe_queue_send+0x7c>
    {

        /* Call actual queue send function.  */
        status =  _tx_queue_send(queue_ptr, source_ptr, wait_option);
 8004480:	687a      	ldr	r2, [r7, #4]
 8004482:	68b9      	ldr	r1, [r7, #8]
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	0018      	movs	r0, r3
 8004488:	f7fe fd22 	bl	8002ed0 <_tx_queue_send>
 800448c:	0003      	movs	r3, r0
 800448e:	61fb      	str	r3, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 8004490:	69fb      	ldr	r3, [r7, #28]
}
 8004492:	0018      	movs	r0, r3
 8004494:	46bd      	mov	sp, r7
 8004496:	b008      	add	sp, #32
 8004498:	bd80      	pop	{r7, pc}
 800449a:	46c0      	nop			@ (mov r8, r8)
 800449c:	51554555 	.word	0x51554555
 80044a0:	2000000c 	.word	0x2000000c
 80044a4:	20000e7c 	.word	0x20000e7c
 80044a8:	20000fc4 	.word	0x20000fc4

080044ac <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr,
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size,
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 80044ac:	b590      	push	{r4, r7, lr}
 80044ae:	b099      	sub	sp, #100	@ 0x64
 80044b0:	af06      	add	r7, sp, #24
 80044b2:	60f8      	str	r0, [r7, #12]
 80044b4:	60b9      	str	r1, [r7, #8]
 80044b6:	607a      	str	r2, [r7, #4]
 80044b8:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80044ba:	2300      	movs	r3, #0
 80044bc:	647b      	str	r3, [r7, #68]	@ 0x44

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d102      	bne.n	80044ca <_txe_thread_create+0x1e>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 80044c4:	230e      	movs	r3, #14
 80044c6:	647b      	str	r3, [r7, #68]	@ 0x44
 80044c8:	e0b6      	b.n	8004638 <_txe_thread_create+0x18c>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 80044ca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80044cc:	2bb0      	cmp	r3, #176	@ 0xb0
 80044ce:	d002      	beq.n	80044d6 <_txe_thread_create+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 80044d0:	230e      	movs	r3, #14
 80044d2:	647b      	str	r3, [r7, #68]	@ 0x44
 80044d4:	e0b0      	b.n	8004638 <_txe_thread_create+0x18c>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80044d6:	f3ef 8310 	mrs	r3, PRIMASK
 80044da:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80044dc:	b672      	cpsid	i
    return(primask_value);
 80044de:	6a3b      	ldr	r3, [r7, #32]
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 80044e0:	637b      	str	r3, [r7, #52]	@ 0x34

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 80044e2:	4b64      	ldr	r3, [pc, #400]	@ (8004674 <_txe_thread_create+0x1c8>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	1c5a      	adds	r2, r3, #1
 80044e8:	4b62      	ldr	r3, [pc, #392]	@ (8004674 <_txe_thread_create+0x1c8>)
 80044ea:	601a      	str	r2, [r3, #0]
 80044ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044ee:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80044f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044f2:	f383 8810 	msr	PRIMASK, r3
}
 80044f6:	46c0      	nop			@ (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
 80044f8:	2300      	movs	r3, #0
 80044fa:	643b      	str	r3, [r7, #64]	@ 0x40
        next_thread =  _tx_thread_created_ptr;
 80044fc:	4b5e      	ldr	r3, [pc, #376]	@ (8004678 <_txe_thread_create+0x1cc>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	63bb      	str	r3, [r7, #56]	@ 0x38
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 8004502:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004504:	633b      	str	r3, [r7, #48]	@ 0x30
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 8004506:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004508:	3b01      	subs	r3, #1
 800450a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800450c:	18d3      	adds	r3, r2, r3
 800450e:	633b      	str	r3, [r7, #48]	@ 0x30
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
 8004510:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004512:	62fb      	str	r3, [r7, #44]	@ 0x2c
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 8004514:	2300      	movs	r3, #0
 8004516:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004518:	e02b      	b.n	8004572 <_txe_thread_create+0xc6>
        {

            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 800451a:	68fa      	ldr	r2, [r7, #12]
 800451c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800451e:	429a      	cmp	r2, r3
 8004520:	d101      	bne.n	8004526 <_txe_thread_create+0x7a>
            {

                /* Set the break flag.  */
                break_flag =  TX_TRUE;
 8004522:	2301      	movs	r3, #1
 8004524:	643b      	str	r3, [r7, #64]	@ 0x40
            }

            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 8004526:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004528:	2b01      	cmp	r3, #1
 800452a:	d028      	beq.n	800457e <_txe_thread_create+0xd2>
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 800452c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800452e:	68db      	ldr	r3, [r3, #12]
 8004530:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004532:	429a      	cmp	r2, r3
 8004534:	d308      	bcc.n	8004548 <_txe_thread_create+0x9c>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 8004536:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004538:	691b      	ldr	r3, [r3, #16]
 800453a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800453c:	429a      	cmp	r2, r3
 800453e:	d203      	bcs.n	8004548 <_txe_thread_create+0x9c>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 8004540:	2300      	movs	r3, #0
 8004542:	65bb      	str	r3, [r7, #88]	@ 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 8004544:	2301      	movs	r3, #1
 8004546:	643b      	str	r3, [r7, #64]	@ 0x40
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 8004548:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800454a:	68db      	ldr	r3, [r3, #12]
 800454c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800454e:	429a      	cmp	r2, r3
 8004550:	d308      	bcc.n	8004564 <_txe_thread_create+0xb8>
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 8004552:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004554:	691b      	ldr	r3, [r3, #16]
 8004556:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004558:	429a      	cmp	r2, r3
 800455a:	d203      	bcs.n	8004564 <_txe_thread_create+0xb8>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 800455c:	2300      	movs	r3, #0
 800455e:	65bb      	str	r3, [r7, #88]	@ 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 8004560:	2301      	movs	r3, #1
 8004562:	643b      	str	r3, [r7, #64]	@ 0x40
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 8004564:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004566:	2288      	movs	r2, #136	@ 0x88
 8004568:	589b      	ldr	r3, [r3, r2]
 800456a:	63bb      	str	r3, [r7, #56]	@ 0x38
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 800456c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800456e:	3301      	adds	r3, #1
 8004570:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004572:	4b42      	ldr	r3, [pc, #264]	@ (800467c <_txe_thread_create+0x1d0>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004578:	429a      	cmp	r2, r3
 800457a:	d3ce      	bcc.n	800451a <_txe_thread_create+0x6e>
 800457c:	e000      	b.n	8004580 <_txe_thread_create+0xd4>
                break;
 800457e:	46c0      	nop			@ (mov r8, r8)
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8004580:	f3ef 8310 	mrs	r3, PRIMASK
 8004584:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8004586:	b672      	cpsid	i
    return(primask_value);
 8004588:	69bb      	ldr	r3, [r7, #24]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800458a:	637b      	str	r3, [r7, #52]	@ 0x34

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800458c:	4b39      	ldr	r3, [pc, #228]	@ (8004674 <_txe_thread_create+0x1c8>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	1e5a      	subs	r2, r3, #1
 8004592:	4b38      	ldr	r3, [pc, #224]	@ (8004674 <_txe_thread_create+0x1c8>)
 8004594:	601a      	str	r2, [r3, #0]
 8004596:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004598:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800459a:	69fb      	ldr	r3, [r7, #28]
 800459c:	f383 8810 	msr	PRIMASK, r3
}
 80045a0:	46c0      	nop			@ (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 80045a2:	f7ff f805 	bl	80035b0 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 80045a6:	68fa      	ldr	r2, [r7, #12]
 80045a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045aa:	429a      	cmp	r2, r3
 80045ac:	d102      	bne.n	80045b4 <_txe_thread_create+0x108>
        {

            /* Thread is already created, return appropriate error code.  */
            status =  TX_THREAD_ERROR;
 80045ae:	230e      	movs	r3, #14
 80045b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80045b2:	e041      	b.n	8004638 <_txe_thread_create+0x18c>
        }

        /* Check for invalid starting address of stack.  */
        else if (stack_start == TX_NULL)
 80045b4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d102      	bne.n	80045c0 <_txe_thread_create+0x114>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 80045ba:	2303      	movs	r3, #3
 80045bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80045be:	e03b      	b.n	8004638 <_txe_thread_create+0x18c>
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d102      	bne.n	80045cc <_txe_thread_create+0x120>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 80045c6:	2303      	movs	r3, #3
 80045c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80045ca:	e035      	b.n	8004638 <_txe_thread_create+0x18c>
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 80045cc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80045ce:	2bc7      	cmp	r3, #199	@ 0xc7
 80045d0:	d802      	bhi.n	80045d8 <_txe_thread_create+0x12c>
        {

            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
 80045d2:	2305      	movs	r3, #5
 80045d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80045d6:	e02f      	b.n	8004638 <_txe_thread_create+0x18c>
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 80045d8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80045da:	2b1f      	cmp	r3, #31
 80045dc:	d902      	bls.n	80045e4 <_txe_thread_create+0x138>
        {

            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
 80045de:	230f      	movs	r3, #15
 80045e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80045e2:	e029      	b.n	8004638 <_txe_thread_create+0x18c>
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 80045e4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80045e6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80045e8:	429a      	cmp	r2, r3
 80045ea:	d902      	bls.n	80045f2 <_txe_thread_create+0x146>
        {

            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
 80045ec:	2318      	movs	r3, #24
 80045ee:	647b      	str	r3, [r7, #68]	@ 0x44
 80045f0:	e022      	b.n	8004638 <_txe_thread_create+0x18c>
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 80045f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d902      	bls.n	80045fe <_txe_thread_create+0x152>
        {

            /* Invalid auto start selection, return appropriate error code.  */
            status =  TX_START_ERROR;
 80045f8:	2310      	movs	r3, #16
 80045fa:	647b      	str	r3, [r7, #68]	@ 0x44
 80045fc:	e01c      	b.n	8004638 <_txe_thread_create+0x18c>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 80045fe:	4b20      	ldr	r3, [pc, #128]	@ (8004680 <_txe_thread_create+0x1d4>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	62bb      	str	r3, [r7, #40]	@ 0x28

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 8004604:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004606:	4b1f      	ldr	r3, [pc, #124]	@ (8004684 <_txe_thread_create+0x1d8>)
 8004608:	429a      	cmp	r2, r3
 800460a:	d101      	bne.n	8004610 <_txe_thread_create+0x164>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800460c:	2313      	movs	r3, #19
 800460e:	647b      	str	r3, [r7, #68]	@ 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8004610:	f3ef 8305 	mrs	r3, IPSR
 8004614:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8004616:	697a      	ldr	r2, [r7, #20]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8004618:	4b1b      	ldr	r3, [pc, #108]	@ (8004688 <_txe_thread_create+0x1dc>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4313      	orrs	r3, r2
 800461e:	d00b      	beq.n	8004638 <_txe_thread_create+0x18c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8004620:	f3ef 8305 	mrs	r3, IPSR
 8004624:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8004626:	693a      	ldr	r2, [r7, #16]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8004628:	4b17      	ldr	r3, [pc, #92]	@ (8004688 <_txe_thread_create+0x1dc>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4313      	orrs	r3, r2
 800462e:	4a17      	ldr	r2, [pc, #92]	@ (800468c <_txe_thread_create+0x1e0>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d801      	bhi.n	8004638 <_txe_thread_create+0x18c>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 8004634:	2313      	movs	r3, #19
 8004636:	647b      	str	r3, [r7, #68]	@ 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8004638:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800463a:	2b00      	cmp	r3, #0
 800463c:	d114      	bne.n	8004668 <_txe_thread_create+0x1bc>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 800463e:	683c      	ldr	r4, [r7, #0]
 8004640:	687a      	ldr	r2, [r7, #4]
 8004642:	68b9      	ldr	r1, [r7, #8]
 8004644:	68f8      	ldr	r0, [r7, #12]
 8004646:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004648:	9305      	str	r3, [sp, #20]
 800464a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800464c:	9304      	str	r3, [sp, #16]
 800464e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004650:	9303      	str	r3, [sp, #12]
 8004652:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004654:	9302      	str	r3, [sp, #8]
 8004656:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004658:	9301      	str	r3, [sp, #4]
 800465a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800465c:	9300      	str	r3, [sp, #0]
 800465e:	0023      	movs	r3, r4
 8004660:	f7fe fd62 	bl	8003128 <_tx_thread_create>
 8004664:	0003      	movs	r3, r0
 8004666:	647b      	str	r3, [r7, #68]	@ 0x44
                        stack_start, stack_size, priority, preempt_threshold,
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
 8004668:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800466a:	0018      	movs	r0, r3
 800466c:	46bd      	mov	sp, r7
 800466e:	b013      	add	sp, #76	@ 0x4c
 8004670:	bd90      	pop	{r4, r7, pc}
 8004672:	46c0      	nop			@ (mov r8, r8)
 8004674:	20000f14 	.word	0x20000f14
 8004678:	20000e84 	.word	0x20000e84
 800467c:	20000e88 	.word	0x20000e88
 8004680:	20000e7c 	.word	0x20000e7c
 8004684:	20000fc4 	.word	0x20000fc4
 8004688:	2000000c 	.word	0x2000000c
 800468c:	f0f0f0ef 	.word	0xf0f0f0ef

08004690 <std>:
 8004690:	2300      	movs	r3, #0
 8004692:	b510      	push	{r4, lr}
 8004694:	0004      	movs	r4, r0
 8004696:	6003      	str	r3, [r0, #0]
 8004698:	6043      	str	r3, [r0, #4]
 800469a:	6083      	str	r3, [r0, #8]
 800469c:	8181      	strh	r1, [r0, #12]
 800469e:	6643      	str	r3, [r0, #100]	@ 0x64
 80046a0:	81c2      	strh	r2, [r0, #14]
 80046a2:	6103      	str	r3, [r0, #16]
 80046a4:	6143      	str	r3, [r0, #20]
 80046a6:	6183      	str	r3, [r0, #24]
 80046a8:	0019      	movs	r1, r3
 80046aa:	2208      	movs	r2, #8
 80046ac:	305c      	adds	r0, #92	@ 0x5c
 80046ae:	f000 f9ff 	bl	8004ab0 <memset>
 80046b2:	4b0b      	ldr	r3, [pc, #44]	@ (80046e0 <std+0x50>)
 80046b4:	6224      	str	r4, [r4, #32]
 80046b6:	6263      	str	r3, [r4, #36]	@ 0x24
 80046b8:	4b0a      	ldr	r3, [pc, #40]	@ (80046e4 <std+0x54>)
 80046ba:	62a3      	str	r3, [r4, #40]	@ 0x28
 80046bc:	4b0a      	ldr	r3, [pc, #40]	@ (80046e8 <std+0x58>)
 80046be:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80046c0:	4b0a      	ldr	r3, [pc, #40]	@ (80046ec <std+0x5c>)
 80046c2:	6323      	str	r3, [r4, #48]	@ 0x30
 80046c4:	4b0a      	ldr	r3, [pc, #40]	@ (80046f0 <std+0x60>)
 80046c6:	429c      	cmp	r4, r3
 80046c8:	d005      	beq.n	80046d6 <std+0x46>
 80046ca:	4b0a      	ldr	r3, [pc, #40]	@ (80046f4 <std+0x64>)
 80046cc:	429c      	cmp	r4, r3
 80046ce:	d002      	beq.n	80046d6 <std+0x46>
 80046d0:	4b09      	ldr	r3, [pc, #36]	@ (80046f8 <std+0x68>)
 80046d2:	429c      	cmp	r4, r3
 80046d4:	d103      	bne.n	80046de <std+0x4e>
 80046d6:	0020      	movs	r0, r4
 80046d8:	3058      	adds	r0, #88	@ 0x58
 80046da:	f000 fa69 	bl	8004bb0 <__retarget_lock_init_recursive>
 80046de:	bd10      	pop	{r4, pc}
 80046e0:	080048d9 	.word	0x080048d9
 80046e4:	08004901 	.word	0x08004901
 80046e8:	08004939 	.word	0x08004939
 80046ec:	08004965 	.word	0x08004965
 80046f0:	20001484 	.word	0x20001484
 80046f4:	200014ec 	.word	0x200014ec
 80046f8:	20001554 	.word	0x20001554

080046fc <stdio_exit_handler>:
 80046fc:	b510      	push	{r4, lr}
 80046fe:	4a03      	ldr	r2, [pc, #12]	@ (800470c <stdio_exit_handler+0x10>)
 8004700:	4903      	ldr	r1, [pc, #12]	@ (8004710 <stdio_exit_handler+0x14>)
 8004702:	4804      	ldr	r0, [pc, #16]	@ (8004714 <stdio_exit_handler+0x18>)
 8004704:	f000 f86c 	bl	80047e0 <_fwalk_sglue>
 8004708:	bd10      	pop	{r4, pc}
 800470a:	46c0      	nop			@ (mov r8, r8)
 800470c:	20000010 	.word	0x20000010
 8004710:	08004ebd 	.word	0x08004ebd
 8004714:	20000020 	.word	0x20000020

08004718 <cleanup_stdio>:
 8004718:	6841      	ldr	r1, [r0, #4]
 800471a:	4b0b      	ldr	r3, [pc, #44]	@ (8004748 <cleanup_stdio+0x30>)
 800471c:	b510      	push	{r4, lr}
 800471e:	0004      	movs	r4, r0
 8004720:	4299      	cmp	r1, r3
 8004722:	d001      	beq.n	8004728 <cleanup_stdio+0x10>
 8004724:	f000 fbca 	bl	8004ebc <_fflush_r>
 8004728:	68a1      	ldr	r1, [r4, #8]
 800472a:	4b08      	ldr	r3, [pc, #32]	@ (800474c <cleanup_stdio+0x34>)
 800472c:	4299      	cmp	r1, r3
 800472e:	d002      	beq.n	8004736 <cleanup_stdio+0x1e>
 8004730:	0020      	movs	r0, r4
 8004732:	f000 fbc3 	bl	8004ebc <_fflush_r>
 8004736:	68e1      	ldr	r1, [r4, #12]
 8004738:	4b05      	ldr	r3, [pc, #20]	@ (8004750 <cleanup_stdio+0x38>)
 800473a:	4299      	cmp	r1, r3
 800473c:	d002      	beq.n	8004744 <cleanup_stdio+0x2c>
 800473e:	0020      	movs	r0, r4
 8004740:	f000 fbbc 	bl	8004ebc <_fflush_r>
 8004744:	bd10      	pop	{r4, pc}
 8004746:	46c0      	nop			@ (mov r8, r8)
 8004748:	20001484 	.word	0x20001484
 800474c:	200014ec 	.word	0x200014ec
 8004750:	20001554 	.word	0x20001554

08004754 <global_stdio_init.part.0>:
 8004754:	b510      	push	{r4, lr}
 8004756:	4b09      	ldr	r3, [pc, #36]	@ (800477c <global_stdio_init.part.0+0x28>)
 8004758:	4a09      	ldr	r2, [pc, #36]	@ (8004780 <global_stdio_init.part.0+0x2c>)
 800475a:	2104      	movs	r1, #4
 800475c:	601a      	str	r2, [r3, #0]
 800475e:	4809      	ldr	r0, [pc, #36]	@ (8004784 <global_stdio_init.part.0+0x30>)
 8004760:	2200      	movs	r2, #0
 8004762:	f7ff ff95 	bl	8004690 <std>
 8004766:	2201      	movs	r2, #1
 8004768:	2109      	movs	r1, #9
 800476a:	4807      	ldr	r0, [pc, #28]	@ (8004788 <global_stdio_init.part.0+0x34>)
 800476c:	f7ff ff90 	bl	8004690 <std>
 8004770:	2202      	movs	r2, #2
 8004772:	2112      	movs	r1, #18
 8004774:	4805      	ldr	r0, [pc, #20]	@ (800478c <global_stdio_init.part.0+0x38>)
 8004776:	f7ff ff8b 	bl	8004690 <std>
 800477a:	bd10      	pop	{r4, pc}
 800477c:	200015bc 	.word	0x200015bc
 8004780:	080046fd 	.word	0x080046fd
 8004784:	20001484 	.word	0x20001484
 8004788:	200014ec 	.word	0x200014ec
 800478c:	20001554 	.word	0x20001554

08004790 <__sfp_lock_acquire>:
 8004790:	b510      	push	{r4, lr}
 8004792:	4802      	ldr	r0, [pc, #8]	@ (800479c <__sfp_lock_acquire+0xc>)
 8004794:	f000 fa0d 	bl	8004bb2 <__retarget_lock_acquire_recursive>
 8004798:	bd10      	pop	{r4, pc}
 800479a:	46c0      	nop			@ (mov r8, r8)
 800479c:	200015c5 	.word	0x200015c5

080047a0 <__sfp_lock_release>:
 80047a0:	b510      	push	{r4, lr}
 80047a2:	4802      	ldr	r0, [pc, #8]	@ (80047ac <__sfp_lock_release+0xc>)
 80047a4:	f000 fa06 	bl	8004bb4 <__retarget_lock_release_recursive>
 80047a8:	bd10      	pop	{r4, pc}
 80047aa:	46c0      	nop			@ (mov r8, r8)
 80047ac:	200015c5 	.word	0x200015c5

080047b0 <__sinit>:
 80047b0:	b510      	push	{r4, lr}
 80047b2:	0004      	movs	r4, r0
 80047b4:	f7ff ffec 	bl	8004790 <__sfp_lock_acquire>
 80047b8:	6a23      	ldr	r3, [r4, #32]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d002      	beq.n	80047c4 <__sinit+0x14>
 80047be:	f7ff ffef 	bl	80047a0 <__sfp_lock_release>
 80047c2:	bd10      	pop	{r4, pc}
 80047c4:	4b04      	ldr	r3, [pc, #16]	@ (80047d8 <__sinit+0x28>)
 80047c6:	6223      	str	r3, [r4, #32]
 80047c8:	4b04      	ldr	r3, [pc, #16]	@ (80047dc <__sinit+0x2c>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d1f6      	bne.n	80047be <__sinit+0xe>
 80047d0:	f7ff ffc0 	bl	8004754 <global_stdio_init.part.0>
 80047d4:	e7f3      	b.n	80047be <__sinit+0xe>
 80047d6:	46c0      	nop			@ (mov r8, r8)
 80047d8:	08004719 	.word	0x08004719
 80047dc:	200015bc 	.word	0x200015bc

080047e0 <_fwalk_sglue>:
 80047e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80047e2:	0014      	movs	r4, r2
 80047e4:	2600      	movs	r6, #0
 80047e6:	9000      	str	r0, [sp, #0]
 80047e8:	9101      	str	r1, [sp, #4]
 80047ea:	68a5      	ldr	r5, [r4, #8]
 80047ec:	6867      	ldr	r7, [r4, #4]
 80047ee:	3f01      	subs	r7, #1
 80047f0:	d504      	bpl.n	80047fc <_fwalk_sglue+0x1c>
 80047f2:	6824      	ldr	r4, [r4, #0]
 80047f4:	2c00      	cmp	r4, #0
 80047f6:	d1f8      	bne.n	80047ea <_fwalk_sglue+0xa>
 80047f8:	0030      	movs	r0, r6
 80047fa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80047fc:	89ab      	ldrh	r3, [r5, #12]
 80047fe:	2b01      	cmp	r3, #1
 8004800:	d908      	bls.n	8004814 <_fwalk_sglue+0x34>
 8004802:	220e      	movs	r2, #14
 8004804:	5eab      	ldrsh	r3, [r5, r2]
 8004806:	3301      	adds	r3, #1
 8004808:	d004      	beq.n	8004814 <_fwalk_sglue+0x34>
 800480a:	0029      	movs	r1, r5
 800480c:	9800      	ldr	r0, [sp, #0]
 800480e:	9b01      	ldr	r3, [sp, #4]
 8004810:	4798      	blx	r3
 8004812:	4306      	orrs	r6, r0
 8004814:	3568      	adds	r5, #104	@ 0x68
 8004816:	e7ea      	b.n	80047ee <_fwalk_sglue+0xe>

08004818 <_puts_r>:
 8004818:	6a03      	ldr	r3, [r0, #32]
 800481a:	b570      	push	{r4, r5, r6, lr}
 800481c:	0005      	movs	r5, r0
 800481e:	000e      	movs	r6, r1
 8004820:	6884      	ldr	r4, [r0, #8]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d101      	bne.n	800482a <_puts_r+0x12>
 8004826:	f7ff ffc3 	bl	80047b0 <__sinit>
 800482a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800482c:	07db      	lsls	r3, r3, #31
 800482e:	d405      	bmi.n	800483c <_puts_r+0x24>
 8004830:	89a3      	ldrh	r3, [r4, #12]
 8004832:	059b      	lsls	r3, r3, #22
 8004834:	d402      	bmi.n	800483c <_puts_r+0x24>
 8004836:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004838:	f000 f9bb 	bl	8004bb2 <__retarget_lock_acquire_recursive>
 800483c:	89a3      	ldrh	r3, [r4, #12]
 800483e:	071b      	lsls	r3, r3, #28
 8004840:	d502      	bpl.n	8004848 <_puts_r+0x30>
 8004842:	6923      	ldr	r3, [r4, #16]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d11f      	bne.n	8004888 <_puts_r+0x70>
 8004848:	0021      	movs	r1, r4
 800484a:	0028      	movs	r0, r5
 800484c:	f000 f8d2 	bl	80049f4 <__swsetup_r>
 8004850:	2800      	cmp	r0, #0
 8004852:	d019      	beq.n	8004888 <_puts_r+0x70>
 8004854:	2501      	movs	r5, #1
 8004856:	426d      	negs	r5, r5
 8004858:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800485a:	07db      	lsls	r3, r3, #31
 800485c:	d405      	bmi.n	800486a <_puts_r+0x52>
 800485e:	89a3      	ldrh	r3, [r4, #12]
 8004860:	059b      	lsls	r3, r3, #22
 8004862:	d402      	bmi.n	800486a <_puts_r+0x52>
 8004864:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004866:	f000 f9a5 	bl	8004bb4 <__retarget_lock_release_recursive>
 800486a:	0028      	movs	r0, r5
 800486c:	bd70      	pop	{r4, r5, r6, pc}
 800486e:	3601      	adds	r6, #1
 8004870:	60a3      	str	r3, [r4, #8]
 8004872:	2b00      	cmp	r3, #0
 8004874:	da04      	bge.n	8004880 <_puts_r+0x68>
 8004876:	69a2      	ldr	r2, [r4, #24]
 8004878:	429a      	cmp	r2, r3
 800487a:	dc16      	bgt.n	80048aa <_puts_r+0x92>
 800487c:	290a      	cmp	r1, #10
 800487e:	d014      	beq.n	80048aa <_puts_r+0x92>
 8004880:	6823      	ldr	r3, [r4, #0]
 8004882:	1c5a      	adds	r2, r3, #1
 8004884:	6022      	str	r2, [r4, #0]
 8004886:	7019      	strb	r1, [r3, #0]
 8004888:	68a3      	ldr	r3, [r4, #8]
 800488a:	7831      	ldrb	r1, [r6, #0]
 800488c:	3b01      	subs	r3, #1
 800488e:	2900      	cmp	r1, #0
 8004890:	d1ed      	bne.n	800486e <_puts_r+0x56>
 8004892:	60a3      	str	r3, [r4, #8]
 8004894:	2b00      	cmp	r3, #0
 8004896:	da0f      	bge.n	80048b8 <_puts_r+0xa0>
 8004898:	0022      	movs	r2, r4
 800489a:	0028      	movs	r0, r5
 800489c:	310a      	adds	r1, #10
 800489e:	f000 f867 	bl	8004970 <__swbuf_r>
 80048a2:	3001      	adds	r0, #1
 80048a4:	d0d6      	beq.n	8004854 <_puts_r+0x3c>
 80048a6:	250a      	movs	r5, #10
 80048a8:	e7d6      	b.n	8004858 <_puts_r+0x40>
 80048aa:	0022      	movs	r2, r4
 80048ac:	0028      	movs	r0, r5
 80048ae:	f000 f85f 	bl	8004970 <__swbuf_r>
 80048b2:	3001      	adds	r0, #1
 80048b4:	d1e8      	bne.n	8004888 <_puts_r+0x70>
 80048b6:	e7cd      	b.n	8004854 <_puts_r+0x3c>
 80048b8:	6823      	ldr	r3, [r4, #0]
 80048ba:	1c5a      	adds	r2, r3, #1
 80048bc:	6022      	str	r2, [r4, #0]
 80048be:	220a      	movs	r2, #10
 80048c0:	701a      	strb	r2, [r3, #0]
 80048c2:	e7f0      	b.n	80048a6 <_puts_r+0x8e>

080048c4 <puts>:
 80048c4:	b510      	push	{r4, lr}
 80048c6:	4b03      	ldr	r3, [pc, #12]	@ (80048d4 <puts+0x10>)
 80048c8:	0001      	movs	r1, r0
 80048ca:	6818      	ldr	r0, [r3, #0]
 80048cc:	f7ff ffa4 	bl	8004818 <_puts_r>
 80048d0:	bd10      	pop	{r4, pc}
 80048d2:	46c0      	nop			@ (mov r8, r8)
 80048d4:	2000001c 	.word	0x2000001c

080048d8 <__sread>:
 80048d8:	b570      	push	{r4, r5, r6, lr}
 80048da:	000c      	movs	r4, r1
 80048dc:	250e      	movs	r5, #14
 80048de:	5f49      	ldrsh	r1, [r1, r5]
 80048e0:	f000 f914 	bl	8004b0c <_read_r>
 80048e4:	2800      	cmp	r0, #0
 80048e6:	db03      	blt.n	80048f0 <__sread+0x18>
 80048e8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80048ea:	181b      	adds	r3, r3, r0
 80048ec:	6563      	str	r3, [r4, #84]	@ 0x54
 80048ee:	bd70      	pop	{r4, r5, r6, pc}
 80048f0:	89a3      	ldrh	r3, [r4, #12]
 80048f2:	4a02      	ldr	r2, [pc, #8]	@ (80048fc <__sread+0x24>)
 80048f4:	4013      	ands	r3, r2
 80048f6:	81a3      	strh	r3, [r4, #12]
 80048f8:	e7f9      	b.n	80048ee <__sread+0x16>
 80048fa:	46c0      	nop			@ (mov r8, r8)
 80048fc:	ffffefff 	.word	0xffffefff

08004900 <__swrite>:
 8004900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004902:	001f      	movs	r7, r3
 8004904:	898b      	ldrh	r3, [r1, #12]
 8004906:	0005      	movs	r5, r0
 8004908:	000c      	movs	r4, r1
 800490a:	0016      	movs	r6, r2
 800490c:	05db      	lsls	r3, r3, #23
 800490e:	d505      	bpl.n	800491c <__swrite+0x1c>
 8004910:	230e      	movs	r3, #14
 8004912:	5ec9      	ldrsh	r1, [r1, r3]
 8004914:	2200      	movs	r2, #0
 8004916:	2302      	movs	r3, #2
 8004918:	f000 f8e4 	bl	8004ae4 <_lseek_r>
 800491c:	89a3      	ldrh	r3, [r4, #12]
 800491e:	4a05      	ldr	r2, [pc, #20]	@ (8004934 <__swrite+0x34>)
 8004920:	0028      	movs	r0, r5
 8004922:	4013      	ands	r3, r2
 8004924:	81a3      	strh	r3, [r4, #12]
 8004926:	0032      	movs	r2, r6
 8004928:	230e      	movs	r3, #14
 800492a:	5ee1      	ldrsh	r1, [r4, r3]
 800492c:	003b      	movs	r3, r7
 800492e:	f000 f901 	bl	8004b34 <_write_r>
 8004932:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004934:	ffffefff 	.word	0xffffefff

08004938 <__sseek>:
 8004938:	b570      	push	{r4, r5, r6, lr}
 800493a:	000c      	movs	r4, r1
 800493c:	250e      	movs	r5, #14
 800493e:	5f49      	ldrsh	r1, [r1, r5]
 8004940:	f000 f8d0 	bl	8004ae4 <_lseek_r>
 8004944:	89a3      	ldrh	r3, [r4, #12]
 8004946:	1c42      	adds	r2, r0, #1
 8004948:	d103      	bne.n	8004952 <__sseek+0x1a>
 800494a:	4a05      	ldr	r2, [pc, #20]	@ (8004960 <__sseek+0x28>)
 800494c:	4013      	ands	r3, r2
 800494e:	81a3      	strh	r3, [r4, #12]
 8004950:	bd70      	pop	{r4, r5, r6, pc}
 8004952:	2280      	movs	r2, #128	@ 0x80
 8004954:	0152      	lsls	r2, r2, #5
 8004956:	4313      	orrs	r3, r2
 8004958:	81a3      	strh	r3, [r4, #12]
 800495a:	6560      	str	r0, [r4, #84]	@ 0x54
 800495c:	e7f8      	b.n	8004950 <__sseek+0x18>
 800495e:	46c0      	nop			@ (mov r8, r8)
 8004960:	ffffefff 	.word	0xffffefff

08004964 <__sclose>:
 8004964:	b510      	push	{r4, lr}
 8004966:	230e      	movs	r3, #14
 8004968:	5ec9      	ldrsh	r1, [r1, r3]
 800496a:	f000 f8a9 	bl	8004ac0 <_close_r>
 800496e:	bd10      	pop	{r4, pc}

08004970 <__swbuf_r>:
 8004970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004972:	0006      	movs	r6, r0
 8004974:	000d      	movs	r5, r1
 8004976:	0014      	movs	r4, r2
 8004978:	2800      	cmp	r0, #0
 800497a:	d004      	beq.n	8004986 <__swbuf_r+0x16>
 800497c:	6a03      	ldr	r3, [r0, #32]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d101      	bne.n	8004986 <__swbuf_r+0x16>
 8004982:	f7ff ff15 	bl	80047b0 <__sinit>
 8004986:	69a3      	ldr	r3, [r4, #24]
 8004988:	60a3      	str	r3, [r4, #8]
 800498a:	89a3      	ldrh	r3, [r4, #12]
 800498c:	071b      	lsls	r3, r3, #28
 800498e:	d502      	bpl.n	8004996 <__swbuf_r+0x26>
 8004990:	6923      	ldr	r3, [r4, #16]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d109      	bne.n	80049aa <__swbuf_r+0x3a>
 8004996:	0021      	movs	r1, r4
 8004998:	0030      	movs	r0, r6
 800499a:	f000 f82b 	bl	80049f4 <__swsetup_r>
 800499e:	2800      	cmp	r0, #0
 80049a0:	d003      	beq.n	80049aa <__swbuf_r+0x3a>
 80049a2:	2501      	movs	r5, #1
 80049a4:	426d      	negs	r5, r5
 80049a6:	0028      	movs	r0, r5
 80049a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80049aa:	6923      	ldr	r3, [r4, #16]
 80049ac:	6820      	ldr	r0, [r4, #0]
 80049ae:	b2ef      	uxtb	r7, r5
 80049b0:	1ac0      	subs	r0, r0, r3
 80049b2:	6963      	ldr	r3, [r4, #20]
 80049b4:	b2ed      	uxtb	r5, r5
 80049b6:	4283      	cmp	r3, r0
 80049b8:	dc05      	bgt.n	80049c6 <__swbuf_r+0x56>
 80049ba:	0021      	movs	r1, r4
 80049bc:	0030      	movs	r0, r6
 80049be:	f000 fa7d 	bl	8004ebc <_fflush_r>
 80049c2:	2800      	cmp	r0, #0
 80049c4:	d1ed      	bne.n	80049a2 <__swbuf_r+0x32>
 80049c6:	68a3      	ldr	r3, [r4, #8]
 80049c8:	3001      	adds	r0, #1
 80049ca:	3b01      	subs	r3, #1
 80049cc:	60a3      	str	r3, [r4, #8]
 80049ce:	6823      	ldr	r3, [r4, #0]
 80049d0:	1c5a      	adds	r2, r3, #1
 80049d2:	6022      	str	r2, [r4, #0]
 80049d4:	701f      	strb	r7, [r3, #0]
 80049d6:	6963      	ldr	r3, [r4, #20]
 80049d8:	4283      	cmp	r3, r0
 80049da:	d004      	beq.n	80049e6 <__swbuf_r+0x76>
 80049dc:	89a3      	ldrh	r3, [r4, #12]
 80049de:	07db      	lsls	r3, r3, #31
 80049e0:	d5e1      	bpl.n	80049a6 <__swbuf_r+0x36>
 80049e2:	2d0a      	cmp	r5, #10
 80049e4:	d1df      	bne.n	80049a6 <__swbuf_r+0x36>
 80049e6:	0021      	movs	r1, r4
 80049e8:	0030      	movs	r0, r6
 80049ea:	f000 fa67 	bl	8004ebc <_fflush_r>
 80049ee:	2800      	cmp	r0, #0
 80049f0:	d0d9      	beq.n	80049a6 <__swbuf_r+0x36>
 80049f2:	e7d6      	b.n	80049a2 <__swbuf_r+0x32>

080049f4 <__swsetup_r>:
 80049f4:	4b2d      	ldr	r3, [pc, #180]	@ (8004aac <__swsetup_r+0xb8>)
 80049f6:	b570      	push	{r4, r5, r6, lr}
 80049f8:	0005      	movs	r5, r0
 80049fa:	6818      	ldr	r0, [r3, #0]
 80049fc:	000c      	movs	r4, r1
 80049fe:	2800      	cmp	r0, #0
 8004a00:	d004      	beq.n	8004a0c <__swsetup_r+0x18>
 8004a02:	6a03      	ldr	r3, [r0, #32]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d101      	bne.n	8004a0c <__swsetup_r+0x18>
 8004a08:	f7ff fed2 	bl	80047b0 <__sinit>
 8004a0c:	230c      	movs	r3, #12
 8004a0e:	5ee2      	ldrsh	r2, [r4, r3]
 8004a10:	0713      	lsls	r3, r2, #28
 8004a12:	d423      	bmi.n	8004a5c <__swsetup_r+0x68>
 8004a14:	06d3      	lsls	r3, r2, #27
 8004a16:	d407      	bmi.n	8004a28 <__swsetup_r+0x34>
 8004a18:	2309      	movs	r3, #9
 8004a1a:	602b      	str	r3, [r5, #0]
 8004a1c:	2340      	movs	r3, #64	@ 0x40
 8004a1e:	2001      	movs	r0, #1
 8004a20:	4313      	orrs	r3, r2
 8004a22:	81a3      	strh	r3, [r4, #12]
 8004a24:	4240      	negs	r0, r0
 8004a26:	e03a      	b.n	8004a9e <__swsetup_r+0xaa>
 8004a28:	0752      	lsls	r2, r2, #29
 8004a2a:	d513      	bpl.n	8004a54 <__swsetup_r+0x60>
 8004a2c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004a2e:	2900      	cmp	r1, #0
 8004a30:	d008      	beq.n	8004a44 <__swsetup_r+0x50>
 8004a32:	0023      	movs	r3, r4
 8004a34:	3344      	adds	r3, #68	@ 0x44
 8004a36:	4299      	cmp	r1, r3
 8004a38:	d002      	beq.n	8004a40 <__swsetup_r+0x4c>
 8004a3a:	0028      	movs	r0, r5
 8004a3c:	f000 f8bc 	bl	8004bb8 <_free_r>
 8004a40:	2300      	movs	r3, #0
 8004a42:	6363      	str	r3, [r4, #52]	@ 0x34
 8004a44:	2224      	movs	r2, #36	@ 0x24
 8004a46:	89a3      	ldrh	r3, [r4, #12]
 8004a48:	4393      	bics	r3, r2
 8004a4a:	81a3      	strh	r3, [r4, #12]
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	6063      	str	r3, [r4, #4]
 8004a50:	6923      	ldr	r3, [r4, #16]
 8004a52:	6023      	str	r3, [r4, #0]
 8004a54:	2308      	movs	r3, #8
 8004a56:	89a2      	ldrh	r2, [r4, #12]
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	81a3      	strh	r3, [r4, #12]
 8004a5c:	6923      	ldr	r3, [r4, #16]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d10b      	bne.n	8004a7a <__swsetup_r+0x86>
 8004a62:	21a0      	movs	r1, #160	@ 0xa0
 8004a64:	2280      	movs	r2, #128	@ 0x80
 8004a66:	89a3      	ldrh	r3, [r4, #12]
 8004a68:	0089      	lsls	r1, r1, #2
 8004a6a:	0092      	lsls	r2, r2, #2
 8004a6c:	400b      	ands	r3, r1
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d003      	beq.n	8004a7a <__swsetup_r+0x86>
 8004a72:	0021      	movs	r1, r4
 8004a74:	0028      	movs	r0, r5
 8004a76:	f000 fa77 	bl	8004f68 <__smakebuf_r>
 8004a7a:	230c      	movs	r3, #12
 8004a7c:	5ee2      	ldrsh	r2, [r4, r3]
 8004a7e:	2101      	movs	r1, #1
 8004a80:	0013      	movs	r3, r2
 8004a82:	400b      	ands	r3, r1
 8004a84:	420a      	tst	r2, r1
 8004a86:	d00b      	beq.n	8004aa0 <__swsetup_r+0xac>
 8004a88:	2300      	movs	r3, #0
 8004a8a:	60a3      	str	r3, [r4, #8]
 8004a8c:	6963      	ldr	r3, [r4, #20]
 8004a8e:	425b      	negs	r3, r3
 8004a90:	61a3      	str	r3, [r4, #24]
 8004a92:	2000      	movs	r0, #0
 8004a94:	6923      	ldr	r3, [r4, #16]
 8004a96:	4283      	cmp	r3, r0
 8004a98:	d101      	bne.n	8004a9e <__swsetup_r+0xaa>
 8004a9a:	0613      	lsls	r3, r2, #24
 8004a9c:	d4be      	bmi.n	8004a1c <__swsetup_r+0x28>
 8004a9e:	bd70      	pop	{r4, r5, r6, pc}
 8004aa0:	0791      	lsls	r1, r2, #30
 8004aa2:	d400      	bmi.n	8004aa6 <__swsetup_r+0xb2>
 8004aa4:	6963      	ldr	r3, [r4, #20]
 8004aa6:	60a3      	str	r3, [r4, #8]
 8004aa8:	e7f3      	b.n	8004a92 <__swsetup_r+0x9e>
 8004aaa:	46c0      	nop			@ (mov r8, r8)
 8004aac:	2000001c 	.word	0x2000001c

08004ab0 <memset>:
 8004ab0:	0003      	movs	r3, r0
 8004ab2:	1882      	adds	r2, r0, r2
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d100      	bne.n	8004aba <memset+0xa>
 8004ab8:	4770      	bx	lr
 8004aba:	7019      	strb	r1, [r3, #0]
 8004abc:	3301      	adds	r3, #1
 8004abe:	e7f9      	b.n	8004ab4 <memset+0x4>

08004ac0 <_close_r>:
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	b570      	push	{r4, r5, r6, lr}
 8004ac4:	4d06      	ldr	r5, [pc, #24]	@ (8004ae0 <_close_r+0x20>)
 8004ac6:	0004      	movs	r4, r0
 8004ac8:	0008      	movs	r0, r1
 8004aca:	602b      	str	r3, [r5, #0]
 8004acc:	f7fc f839 	bl	8000b42 <_close>
 8004ad0:	1c43      	adds	r3, r0, #1
 8004ad2:	d103      	bne.n	8004adc <_close_r+0x1c>
 8004ad4:	682b      	ldr	r3, [r5, #0]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d000      	beq.n	8004adc <_close_r+0x1c>
 8004ada:	6023      	str	r3, [r4, #0]
 8004adc:	bd70      	pop	{r4, r5, r6, pc}
 8004ade:	46c0      	nop			@ (mov r8, r8)
 8004ae0:	200015c0 	.word	0x200015c0

08004ae4 <_lseek_r>:
 8004ae4:	b570      	push	{r4, r5, r6, lr}
 8004ae6:	0004      	movs	r4, r0
 8004ae8:	0008      	movs	r0, r1
 8004aea:	0011      	movs	r1, r2
 8004aec:	001a      	movs	r2, r3
 8004aee:	2300      	movs	r3, #0
 8004af0:	4d05      	ldr	r5, [pc, #20]	@ (8004b08 <_lseek_r+0x24>)
 8004af2:	602b      	str	r3, [r5, #0]
 8004af4:	f7fc f846 	bl	8000b84 <_lseek>
 8004af8:	1c43      	adds	r3, r0, #1
 8004afa:	d103      	bne.n	8004b04 <_lseek_r+0x20>
 8004afc:	682b      	ldr	r3, [r5, #0]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d000      	beq.n	8004b04 <_lseek_r+0x20>
 8004b02:	6023      	str	r3, [r4, #0]
 8004b04:	bd70      	pop	{r4, r5, r6, pc}
 8004b06:	46c0      	nop			@ (mov r8, r8)
 8004b08:	200015c0 	.word	0x200015c0

08004b0c <_read_r>:
 8004b0c:	b570      	push	{r4, r5, r6, lr}
 8004b0e:	0004      	movs	r4, r0
 8004b10:	0008      	movs	r0, r1
 8004b12:	0011      	movs	r1, r2
 8004b14:	001a      	movs	r2, r3
 8004b16:	2300      	movs	r3, #0
 8004b18:	4d05      	ldr	r5, [pc, #20]	@ (8004b30 <_read_r+0x24>)
 8004b1a:	602b      	str	r3, [r5, #0]
 8004b1c:	f7fb ffd8 	bl	8000ad0 <_read>
 8004b20:	1c43      	adds	r3, r0, #1
 8004b22:	d103      	bne.n	8004b2c <_read_r+0x20>
 8004b24:	682b      	ldr	r3, [r5, #0]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d000      	beq.n	8004b2c <_read_r+0x20>
 8004b2a:	6023      	str	r3, [r4, #0]
 8004b2c:	bd70      	pop	{r4, r5, r6, pc}
 8004b2e:	46c0      	nop			@ (mov r8, r8)
 8004b30:	200015c0 	.word	0x200015c0

08004b34 <_write_r>:
 8004b34:	b570      	push	{r4, r5, r6, lr}
 8004b36:	0004      	movs	r4, r0
 8004b38:	0008      	movs	r0, r1
 8004b3a:	0011      	movs	r1, r2
 8004b3c:	001a      	movs	r2, r3
 8004b3e:	2300      	movs	r3, #0
 8004b40:	4d05      	ldr	r5, [pc, #20]	@ (8004b58 <_write_r+0x24>)
 8004b42:	602b      	str	r3, [r5, #0]
 8004b44:	f7fb ffe1 	bl	8000b0a <_write>
 8004b48:	1c43      	adds	r3, r0, #1
 8004b4a:	d103      	bne.n	8004b54 <_write_r+0x20>
 8004b4c:	682b      	ldr	r3, [r5, #0]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d000      	beq.n	8004b54 <_write_r+0x20>
 8004b52:	6023      	str	r3, [r4, #0]
 8004b54:	bd70      	pop	{r4, r5, r6, pc}
 8004b56:	46c0      	nop			@ (mov r8, r8)
 8004b58:	200015c0 	.word	0x200015c0

08004b5c <__errno>:
 8004b5c:	4b01      	ldr	r3, [pc, #4]	@ (8004b64 <__errno+0x8>)
 8004b5e:	6818      	ldr	r0, [r3, #0]
 8004b60:	4770      	bx	lr
 8004b62:	46c0      	nop			@ (mov r8, r8)
 8004b64:	2000001c 	.word	0x2000001c

08004b68 <__libc_init_array>:
 8004b68:	b570      	push	{r4, r5, r6, lr}
 8004b6a:	2600      	movs	r6, #0
 8004b6c:	4c0c      	ldr	r4, [pc, #48]	@ (8004ba0 <__libc_init_array+0x38>)
 8004b6e:	4d0d      	ldr	r5, [pc, #52]	@ (8004ba4 <__libc_init_array+0x3c>)
 8004b70:	1b64      	subs	r4, r4, r5
 8004b72:	10a4      	asrs	r4, r4, #2
 8004b74:	42a6      	cmp	r6, r4
 8004b76:	d109      	bne.n	8004b8c <__libc_init_array+0x24>
 8004b78:	2600      	movs	r6, #0
 8004b7a:	f000 fa6d 	bl	8005058 <_init>
 8004b7e:	4c0a      	ldr	r4, [pc, #40]	@ (8004ba8 <__libc_init_array+0x40>)
 8004b80:	4d0a      	ldr	r5, [pc, #40]	@ (8004bac <__libc_init_array+0x44>)
 8004b82:	1b64      	subs	r4, r4, r5
 8004b84:	10a4      	asrs	r4, r4, #2
 8004b86:	42a6      	cmp	r6, r4
 8004b88:	d105      	bne.n	8004b96 <__libc_init_array+0x2e>
 8004b8a:	bd70      	pop	{r4, r5, r6, pc}
 8004b8c:	00b3      	lsls	r3, r6, #2
 8004b8e:	58eb      	ldr	r3, [r5, r3]
 8004b90:	4798      	blx	r3
 8004b92:	3601      	adds	r6, #1
 8004b94:	e7ee      	b.n	8004b74 <__libc_init_array+0xc>
 8004b96:	00b3      	lsls	r3, r6, #2
 8004b98:	58eb      	ldr	r3, [r5, r3]
 8004b9a:	4798      	blx	r3
 8004b9c:	3601      	adds	r6, #1
 8004b9e:	e7f2      	b.n	8004b86 <__libc_init_array+0x1e>
 8004ba0:	0800517c 	.word	0x0800517c
 8004ba4:	0800517c 	.word	0x0800517c
 8004ba8:	08005180 	.word	0x08005180
 8004bac:	0800517c 	.word	0x0800517c

08004bb0 <__retarget_lock_init_recursive>:
 8004bb0:	4770      	bx	lr

08004bb2 <__retarget_lock_acquire_recursive>:
 8004bb2:	4770      	bx	lr

08004bb4 <__retarget_lock_release_recursive>:
 8004bb4:	4770      	bx	lr
	...

08004bb8 <_free_r>:
 8004bb8:	b570      	push	{r4, r5, r6, lr}
 8004bba:	0005      	movs	r5, r0
 8004bbc:	1e0c      	subs	r4, r1, #0
 8004bbe:	d010      	beq.n	8004be2 <_free_r+0x2a>
 8004bc0:	3c04      	subs	r4, #4
 8004bc2:	6823      	ldr	r3, [r4, #0]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	da00      	bge.n	8004bca <_free_r+0x12>
 8004bc8:	18e4      	adds	r4, r4, r3
 8004bca:	0028      	movs	r0, r5
 8004bcc:	f000 f8e0 	bl	8004d90 <__malloc_lock>
 8004bd0:	4a1d      	ldr	r2, [pc, #116]	@ (8004c48 <_free_r+0x90>)
 8004bd2:	6813      	ldr	r3, [r2, #0]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d105      	bne.n	8004be4 <_free_r+0x2c>
 8004bd8:	6063      	str	r3, [r4, #4]
 8004bda:	6014      	str	r4, [r2, #0]
 8004bdc:	0028      	movs	r0, r5
 8004bde:	f000 f8df 	bl	8004da0 <__malloc_unlock>
 8004be2:	bd70      	pop	{r4, r5, r6, pc}
 8004be4:	42a3      	cmp	r3, r4
 8004be6:	d908      	bls.n	8004bfa <_free_r+0x42>
 8004be8:	6820      	ldr	r0, [r4, #0]
 8004bea:	1821      	adds	r1, r4, r0
 8004bec:	428b      	cmp	r3, r1
 8004bee:	d1f3      	bne.n	8004bd8 <_free_r+0x20>
 8004bf0:	6819      	ldr	r1, [r3, #0]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	1809      	adds	r1, r1, r0
 8004bf6:	6021      	str	r1, [r4, #0]
 8004bf8:	e7ee      	b.n	8004bd8 <_free_r+0x20>
 8004bfa:	001a      	movs	r2, r3
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d001      	beq.n	8004c06 <_free_r+0x4e>
 8004c02:	42a3      	cmp	r3, r4
 8004c04:	d9f9      	bls.n	8004bfa <_free_r+0x42>
 8004c06:	6811      	ldr	r1, [r2, #0]
 8004c08:	1850      	adds	r0, r2, r1
 8004c0a:	42a0      	cmp	r0, r4
 8004c0c:	d10b      	bne.n	8004c26 <_free_r+0x6e>
 8004c0e:	6820      	ldr	r0, [r4, #0]
 8004c10:	1809      	adds	r1, r1, r0
 8004c12:	1850      	adds	r0, r2, r1
 8004c14:	6011      	str	r1, [r2, #0]
 8004c16:	4283      	cmp	r3, r0
 8004c18:	d1e0      	bne.n	8004bdc <_free_r+0x24>
 8004c1a:	6818      	ldr	r0, [r3, #0]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	1841      	adds	r1, r0, r1
 8004c20:	6011      	str	r1, [r2, #0]
 8004c22:	6053      	str	r3, [r2, #4]
 8004c24:	e7da      	b.n	8004bdc <_free_r+0x24>
 8004c26:	42a0      	cmp	r0, r4
 8004c28:	d902      	bls.n	8004c30 <_free_r+0x78>
 8004c2a:	230c      	movs	r3, #12
 8004c2c:	602b      	str	r3, [r5, #0]
 8004c2e:	e7d5      	b.n	8004bdc <_free_r+0x24>
 8004c30:	6820      	ldr	r0, [r4, #0]
 8004c32:	1821      	adds	r1, r4, r0
 8004c34:	428b      	cmp	r3, r1
 8004c36:	d103      	bne.n	8004c40 <_free_r+0x88>
 8004c38:	6819      	ldr	r1, [r3, #0]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	1809      	adds	r1, r1, r0
 8004c3e:	6021      	str	r1, [r4, #0]
 8004c40:	6063      	str	r3, [r4, #4]
 8004c42:	6054      	str	r4, [r2, #4]
 8004c44:	e7ca      	b.n	8004bdc <_free_r+0x24>
 8004c46:	46c0      	nop			@ (mov r8, r8)
 8004c48:	200015cc 	.word	0x200015cc

08004c4c <sbrk_aligned>:
 8004c4c:	b570      	push	{r4, r5, r6, lr}
 8004c4e:	4e0f      	ldr	r6, [pc, #60]	@ (8004c8c <sbrk_aligned+0x40>)
 8004c50:	000d      	movs	r5, r1
 8004c52:	6831      	ldr	r1, [r6, #0]
 8004c54:	0004      	movs	r4, r0
 8004c56:	2900      	cmp	r1, #0
 8004c58:	d102      	bne.n	8004c60 <sbrk_aligned+0x14>
 8004c5a:	f000 f9eb 	bl	8005034 <_sbrk_r>
 8004c5e:	6030      	str	r0, [r6, #0]
 8004c60:	0029      	movs	r1, r5
 8004c62:	0020      	movs	r0, r4
 8004c64:	f000 f9e6 	bl	8005034 <_sbrk_r>
 8004c68:	1c43      	adds	r3, r0, #1
 8004c6a:	d103      	bne.n	8004c74 <sbrk_aligned+0x28>
 8004c6c:	2501      	movs	r5, #1
 8004c6e:	426d      	negs	r5, r5
 8004c70:	0028      	movs	r0, r5
 8004c72:	bd70      	pop	{r4, r5, r6, pc}
 8004c74:	2303      	movs	r3, #3
 8004c76:	1cc5      	adds	r5, r0, #3
 8004c78:	439d      	bics	r5, r3
 8004c7a:	42a8      	cmp	r0, r5
 8004c7c:	d0f8      	beq.n	8004c70 <sbrk_aligned+0x24>
 8004c7e:	1a29      	subs	r1, r5, r0
 8004c80:	0020      	movs	r0, r4
 8004c82:	f000 f9d7 	bl	8005034 <_sbrk_r>
 8004c86:	3001      	adds	r0, #1
 8004c88:	d1f2      	bne.n	8004c70 <sbrk_aligned+0x24>
 8004c8a:	e7ef      	b.n	8004c6c <sbrk_aligned+0x20>
 8004c8c:	200015c8 	.word	0x200015c8

08004c90 <_malloc_r>:
 8004c90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004c92:	2203      	movs	r2, #3
 8004c94:	1ccb      	adds	r3, r1, #3
 8004c96:	4393      	bics	r3, r2
 8004c98:	3308      	adds	r3, #8
 8004c9a:	0005      	movs	r5, r0
 8004c9c:	001f      	movs	r7, r3
 8004c9e:	2b0c      	cmp	r3, #12
 8004ca0:	d234      	bcs.n	8004d0c <_malloc_r+0x7c>
 8004ca2:	270c      	movs	r7, #12
 8004ca4:	42b9      	cmp	r1, r7
 8004ca6:	d833      	bhi.n	8004d10 <_malloc_r+0x80>
 8004ca8:	0028      	movs	r0, r5
 8004caa:	f000 f871 	bl	8004d90 <__malloc_lock>
 8004cae:	4e37      	ldr	r6, [pc, #220]	@ (8004d8c <_malloc_r+0xfc>)
 8004cb0:	6833      	ldr	r3, [r6, #0]
 8004cb2:	001c      	movs	r4, r3
 8004cb4:	2c00      	cmp	r4, #0
 8004cb6:	d12f      	bne.n	8004d18 <_malloc_r+0x88>
 8004cb8:	0039      	movs	r1, r7
 8004cba:	0028      	movs	r0, r5
 8004cbc:	f7ff ffc6 	bl	8004c4c <sbrk_aligned>
 8004cc0:	0004      	movs	r4, r0
 8004cc2:	1c43      	adds	r3, r0, #1
 8004cc4:	d15f      	bne.n	8004d86 <_malloc_r+0xf6>
 8004cc6:	6834      	ldr	r4, [r6, #0]
 8004cc8:	9400      	str	r4, [sp, #0]
 8004cca:	9b00      	ldr	r3, [sp, #0]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d14a      	bne.n	8004d66 <_malloc_r+0xd6>
 8004cd0:	2c00      	cmp	r4, #0
 8004cd2:	d052      	beq.n	8004d7a <_malloc_r+0xea>
 8004cd4:	6823      	ldr	r3, [r4, #0]
 8004cd6:	0028      	movs	r0, r5
 8004cd8:	18e3      	adds	r3, r4, r3
 8004cda:	9900      	ldr	r1, [sp, #0]
 8004cdc:	9301      	str	r3, [sp, #4]
 8004cde:	f000 f9a9 	bl	8005034 <_sbrk_r>
 8004ce2:	9b01      	ldr	r3, [sp, #4]
 8004ce4:	4283      	cmp	r3, r0
 8004ce6:	d148      	bne.n	8004d7a <_malloc_r+0xea>
 8004ce8:	6823      	ldr	r3, [r4, #0]
 8004cea:	0028      	movs	r0, r5
 8004cec:	1aff      	subs	r7, r7, r3
 8004cee:	0039      	movs	r1, r7
 8004cf0:	f7ff ffac 	bl	8004c4c <sbrk_aligned>
 8004cf4:	3001      	adds	r0, #1
 8004cf6:	d040      	beq.n	8004d7a <_malloc_r+0xea>
 8004cf8:	6823      	ldr	r3, [r4, #0]
 8004cfa:	19db      	adds	r3, r3, r7
 8004cfc:	6023      	str	r3, [r4, #0]
 8004cfe:	6833      	ldr	r3, [r6, #0]
 8004d00:	685a      	ldr	r2, [r3, #4]
 8004d02:	2a00      	cmp	r2, #0
 8004d04:	d133      	bne.n	8004d6e <_malloc_r+0xde>
 8004d06:	9b00      	ldr	r3, [sp, #0]
 8004d08:	6033      	str	r3, [r6, #0]
 8004d0a:	e019      	b.n	8004d40 <_malloc_r+0xb0>
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	dac9      	bge.n	8004ca4 <_malloc_r+0x14>
 8004d10:	230c      	movs	r3, #12
 8004d12:	602b      	str	r3, [r5, #0]
 8004d14:	2000      	movs	r0, #0
 8004d16:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004d18:	6821      	ldr	r1, [r4, #0]
 8004d1a:	1bc9      	subs	r1, r1, r7
 8004d1c:	d420      	bmi.n	8004d60 <_malloc_r+0xd0>
 8004d1e:	290b      	cmp	r1, #11
 8004d20:	d90a      	bls.n	8004d38 <_malloc_r+0xa8>
 8004d22:	19e2      	adds	r2, r4, r7
 8004d24:	6027      	str	r7, [r4, #0]
 8004d26:	42a3      	cmp	r3, r4
 8004d28:	d104      	bne.n	8004d34 <_malloc_r+0xa4>
 8004d2a:	6032      	str	r2, [r6, #0]
 8004d2c:	6863      	ldr	r3, [r4, #4]
 8004d2e:	6011      	str	r1, [r2, #0]
 8004d30:	6053      	str	r3, [r2, #4]
 8004d32:	e005      	b.n	8004d40 <_malloc_r+0xb0>
 8004d34:	605a      	str	r2, [r3, #4]
 8004d36:	e7f9      	b.n	8004d2c <_malloc_r+0x9c>
 8004d38:	6862      	ldr	r2, [r4, #4]
 8004d3a:	42a3      	cmp	r3, r4
 8004d3c:	d10e      	bne.n	8004d5c <_malloc_r+0xcc>
 8004d3e:	6032      	str	r2, [r6, #0]
 8004d40:	0028      	movs	r0, r5
 8004d42:	f000 f82d 	bl	8004da0 <__malloc_unlock>
 8004d46:	0020      	movs	r0, r4
 8004d48:	2207      	movs	r2, #7
 8004d4a:	300b      	adds	r0, #11
 8004d4c:	1d23      	adds	r3, r4, #4
 8004d4e:	4390      	bics	r0, r2
 8004d50:	1ac2      	subs	r2, r0, r3
 8004d52:	4298      	cmp	r0, r3
 8004d54:	d0df      	beq.n	8004d16 <_malloc_r+0x86>
 8004d56:	1a1b      	subs	r3, r3, r0
 8004d58:	50a3      	str	r3, [r4, r2]
 8004d5a:	e7dc      	b.n	8004d16 <_malloc_r+0x86>
 8004d5c:	605a      	str	r2, [r3, #4]
 8004d5e:	e7ef      	b.n	8004d40 <_malloc_r+0xb0>
 8004d60:	0023      	movs	r3, r4
 8004d62:	6864      	ldr	r4, [r4, #4]
 8004d64:	e7a6      	b.n	8004cb4 <_malloc_r+0x24>
 8004d66:	9c00      	ldr	r4, [sp, #0]
 8004d68:	6863      	ldr	r3, [r4, #4]
 8004d6a:	9300      	str	r3, [sp, #0]
 8004d6c:	e7ad      	b.n	8004cca <_malloc_r+0x3a>
 8004d6e:	001a      	movs	r2, r3
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	42a3      	cmp	r3, r4
 8004d74:	d1fb      	bne.n	8004d6e <_malloc_r+0xde>
 8004d76:	2300      	movs	r3, #0
 8004d78:	e7da      	b.n	8004d30 <_malloc_r+0xa0>
 8004d7a:	230c      	movs	r3, #12
 8004d7c:	0028      	movs	r0, r5
 8004d7e:	602b      	str	r3, [r5, #0]
 8004d80:	f000 f80e 	bl	8004da0 <__malloc_unlock>
 8004d84:	e7c6      	b.n	8004d14 <_malloc_r+0x84>
 8004d86:	6007      	str	r7, [r0, #0]
 8004d88:	e7da      	b.n	8004d40 <_malloc_r+0xb0>
 8004d8a:	46c0      	nop			@ (mov r8, r8)
 8004d8c:	200015cc 	.word	0x200015cc

08004d90 <__malloc_lock>:
 8004d90:	b510      	push	{r4, lr}
 8004d92:	4802      	ldr	r0, [pc, #8]	@ (8004d9c <__malloc_lock+0xc>)
 8004d94:	f7ff ff0d 	bl	8004bb2 <__retarget_lock_acquire_recursive>
 8004d98:	bd10      	pop	{r4, pc}
 8004d9a:	46c0      	nop			@ (mov r8, r8)
 8004d9c:	200015c4 	.word	0x200015c4

08004da0 <__malloc_unlock>:
 8004da0:	b510      	push	{r4, lr}
 8004da2:	4802      	ldr	r0, [pc, #8]	@ (8004dac <__malloc_unlock+0xc>)
 8004da4:	f7ff ff06 	bl	8004bb4 <__retarget_lock_release_recursive>
 8004da8:	bd10      	pop	{r4, pc}
 8004daa:	46c0      	nop			@ (mov r8, r8)
 8004dac:	200015c4 	.word	0x200015c4

08004db0 <__sflush_r>:
 8004db0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004db2:	220c      	movs	r2, #12
 8004db4:	5e8b      	ldrsh	r3, [r1, r2]
 8004db6:	0005      	movs	r5, r0
 8004db8:	000c      	movs	r4, r1
 8004dba:	071a      	lsls	r2, r3, #28
 8004dbc:	d456      	bmi.n	8004e6c <__sflush_r+0xbc>
 8004dbe:	684a      	ldr	r2, [r1, #4]
 8004dc0:	2a00      	cmp	r2, #0
 8004dc2:	dc02      	bgt.n	8004dca <__sflush_r+0x1a>
 8004dc4:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8004dc6:	2a00      	cmp	r2, #0
 8004dc8:	dd4e      	ble.n	8004e68 <__sflush_r+0xb8>
 8004dca:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8004dcc:	2f00      	cmp	r7, #0
 8004dce:	d04b      	beq.n	8004e68 <__sflush_r+0xb8>
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	2080      	movs	r0, #128	@ 0x80
 8004dd4:	682e      	ldr	r6, [r5, #0]
 8004dd6:	602a      	str	r2, [r5, #0]
 8004dd8:	001a      	movs	r2, r3
 8004dda:	0140      	lsls	r0, r0, #5
 8004ddc:	6a21      	ldr	r1, [r4, #32]
 8004dde:	4002      	ands	r2, r0
 8004de0:	4203      	tst	r3, r0
 8004de2:	d033      	beq.n	8004e4c <__sflush_r+0x9c>
 8004de4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004de6:	89a3      	ldrh	r3, [r4, #12]
 8004de8:	075b      	lsls	r3, r3, #29
 8004dea:	d506      	bpl.n	8004dfa <__sflush_r+0x4a>
 8004dec:	6863      	ldr	r3, [r4, #4]
 8004dee:	1ad2      	subs	r2, r2, r3
 8004df0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d001      	beq.n	8004dfa <__sflush_r+0x4a>
 8004df6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004df8:	1ad2      	subs	r2, r2, r3
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	0028      	movs	r0, r5
 8004dfe:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8004e00:	6a21      	ldr	r1, [r4, #32]
 8004e02:	47b8      	blx	r7
 8004e04:	89a2      	ldrh	r2, [r4, #12]
 8004e06:	1c43      	adds	r3, r0, #1
 8004e08:	d106      	bne.n	8004e18 <__sflush_r+0x68>
 8004e0a:	6829      	ldr	r1, [r5, #0]
 8004e0c:	291d      	cmp	r1, #29
 8004e0e:	d846      	bhi.n	8004e9e <__sflush_r+0xee>
 8004e10:	4b29      	ldr	r3, [pc, #164]	@ (8004eb8 <__sflush_r+0x108>)
 8004e12:	410b      	asrs	r3, r1
 8004e14:	07db      	lsls	r3, r3, #31
 8004e16:	d442      	bmi.n	8004e9e <__sflush_r+0xee>
 8004e18:	2300      	movs	r3, #0
 8004e1a:	6063      	str	r3, [r4, #4]
 8004e1c:	6923      	ldr	r3, [r4, #16]
 8004e1e:	6023      	str	r3, [r4, #0]
 8004e20:	04d2      	lsls	r2, r2, #19
 8004e22:	d505      	bpl.n	8004e30 <__sflush_r+0x80>
 8004e24:	1c43      	adds	r3, r0, #1
 8004e26:	d102      	bne.n	8004e2e <__sflush_r+0x7e>
 8004e28:	682b      	ldr	r3, [r5, #0]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d100      	bne.n	8004e30 <__sflush_r+0x80>
 8004e2e:	6560      	str	r0, [r4, #84]	@ 0x54
 8004e30:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004e32:	602e      	str	r6, [r5, #0]
 8004e34:	2900      	cmp	r1, #0
 8004e36:	d017      	beq.n	8004e68 <__sflush_r+0xb8>
 8004e38:	0023      	movs	r3, r4
 8004e3a:	3344      	adds	r3, #68	@ 0x44
 8004e3c:	4299      	cmp	r1, r3
 8004e3e:	d002      	beq.n	8004e46 <__sflush_r+0x96>
 8004e40:	0028      	movs	r0, r5
 8004e42:	f7ff feb9 	bl	8004bb8 <_free_r>
 8004e46:	2300      	movs	r3, #0
 8004e48:	6363      	str	r3, [r4, #52]	@ 0x34
 8004e4a:	e00d      	b.n	8004e68 <__sflush_r+0xb8>
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	0028      	movs	r0, r5
 8004e50:	47b8      	blx	r7
 8004e52:	0002      	movs	r2, r0
 8004e54:	1c43      	adds	r3, r0, #1
 8004e56:	d1c6      	bne.n	8004de6 <__sflush_r+0x36>
 8004e58:	682b      	ldr	r3, [r5, #0]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d0c3      	beq.n	8004de6 <__sflush_r+0x36>
 8004e5e:	2b1d      	cmp	r3, #29
 8004e60:	d001      	beq.n	8004e66 <__sflush_r+0xb6>
 8004e62:	2b16      	cmp	r3, #22
 8004e64:	d11a      	bne.n	8004e9c <__sflush_r+0xec>
 8004e66:	602e      	str	r6, [r5, #0]
 8004e68:	2000      	movs	r0, #0
 8004e6a:	e01e      	b.n	8004eaa <__sflush_r+0xfa>
 8004e6c:	690e      	ldr	r6, [r1, #16]
 8004e6e:	2e00      	cmp	r6, #0
 8004e70:	d0fa      	beq.n	8004e68 <__sflush_r+0xb8>
 8004e72:	680f      	ldr	r7, [r1, #0]
 8004e74:	600e      	str	r6, [r1, #0]
 8004e76:	1bba      	subs	r2, r7, r6
 8004e78:	9201      	str	r2, [sp, #4]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	079b      	lsls	r3, r3, #30
 8004e7e:	d100      	bne.n	8004e82 <__sflush_r+0xd2>
 8004e80:	694a      	ldr	r2, [r1, #20]
 8004e82:	60a2      	str	r2, [r4, #8]
 8004e84:	9b01      	ldr	r3, [sp, #4]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	ddee      	ble.n	8004e68 <__sflush_r+0xb8>
 8004e8a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8004e8c:	0032      	movs	r2, r6
 8004e8e:	001f      	movs	r7, r3
 8004e90:	0028      	movs	r0, r5
 8004e92:	9b01      	ldr	r3, [sp, #4]
 8004e94:	6a21      	ldr	r1, [r4, #32]
 8004e96:	47b8      	blx	r7
 8004e98:	2800      	cmp	r0, #0
 8004e9a:	dc07      	bgt.n	8004eac <__sflush_r+0xfc>
 8004e9c:	89a2      	ldrh	r2, [r4, #12]
 8004e9e:	2340      	movs	r3, #64	@ 0x40
 8004ea0:	2001      	movs	r0, #1
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	b21b      	sxth	r3, r3
 8004ea6:	81a3      	strh	r3, [r4, #12]
 8004ea8:	4240      	negs	r0, r0
 8004eaa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004eac:	9b01      	ldr	r3, [sp, #4]
 8004eae:	1836      	adds	r6, r6, r0
 8004eb0:	1a1b      	subs	r3, r3, r0
 8004eb2:	9301      	str	r3, [sp, #4]
 8004eb4:	e7e6      	b.n	8004e84 <__sflush_r+0xd4>
 8004eb6:	46c0      	nop			@ (mov r8, r8)
 8004eb8:	dfbffffe 	.word	0xdfbffffe

08004ebc <_fflush_r>:
 8004ebc:	690b      	ldr	r3, [r1, #16]
 8004ebe:	b570      	push	{r4, r5, r6, lr}
 8004ec0:	0005      	movs	r5, r0
 8004ec2:	000c      	movs	r4, r1
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d102      	bne.n	8004ece <_fflush_r+0x12>
 8004ec8:	2500      	movs	r5, #0
 8004eca:	0028      	movs	r0, r5
 8004ecc:	bd70      	pop	{r4, r5, r6, pc}
 8004ece:	2800      	cmp	r0, #0
 8004ed0:	d004      	beq.n	8004edc <_fflush_r+0x20>
 8004ed2:	6a03      	ldr	r3, [r0, #32]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d101      	bne.n	8004edc <_fflush_r+0x20>
 8004ed8:	f7ff fc6a 	bl	80047b0 <__sinit>
 8004edc:	220c      	movs	r2, #12
 8004ede:	5ea3      	ldrsh	r3, [r4, r2]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d0f1      	beq.n	8004ec8 <_fflush_r+0xc>
 8004ee4:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004ee6:	07d2      	lsls	r2, r2, #31
 8004ee8:	d404      	bmi.n	8004ef4 <_fflush_r+0x38>
 8004eea:	059b      	lsls	r3, r3, #22
 8004eec:	d402      	bmi.n	8004ef4 <_fflush_r+0x38>
 8004eee:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004ef0:	f7ff fe5f 	bl	8004bb2 <__retarget_lock_acquire_recursive>
 8004ef4:	0028      	movs	r0, r5
 8004ef6:	0021      	movs	r1, r4
 8004ef8:	f7ff ff5a 	bl	8004db0 <__sflush_r>
 8004efc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004efe:	0005      	movs	r5, r0
 8004f00:	07db      	lsls	r3, r3, #31
 8004f02:	d4e2      	bmi.n	8004eca <_fflush_r+0xe>
 8004f04:	89a3      	ldrh	r3, [r4, #12]
 8004f06:	059b      	lsls	r3, r3, #22
 8004f08:	d4df      	bmi.n	8004eca <_fflush_r+0xe>
 8004f0a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004f0c:	f7ff fe52 	bl	8004bb4 <__retarget_lock_release_recursive>
 8004f10:	e7db      	b.n	8004eca <_fflush_r+0xe>
	...

08004f14 <__swhatbuf_r>:
 8004f14:	b570      	push	{r4, r5, r6, lr}
 8004f16:	000e      	movs	r6, r1
 8004f18:	001d      	movs	r5, r3
 8004f1a:	230e      	movs	r3, #14
 8004f1c:	5ec9      	ldrsh	r1, [r1, r3]
 8004f1e:	0014      	movs	r4, r2
 8004f20:	b096      	sub	sp, #88	@ 0x58
 8004f22:	2900      	cmp	r1, #0
 8004f24:	da0c      	bge.n	8004f40 <__swhatbuf_r+0x2c>
 8004f26:	89b2      	ldrh	r2, [r6, #12]
 8004f28:	2380      	movs	r3, #128	@ 0x80
 8004f2a:	0011      	movs	r1, r2
 8004f2c:	4019      	ands	r1, r3
 8004f2e:	421a      	tst	r2, r3
 8004f30:	d114      	bne.n	8004f5c <__swhatbuf_r+0x48>
 8004f32:	2380      	movs	r3, #128	@ 0x80
 8004f34:	00db      	lsls	r3, r3, #3
 8004f36:	2000      	movs	r0, #0
 8004f38:	6029      	str	r1, [r5, #0]
 8004f3a:	6023      	str	r3, [r4, #0]
 8004f3c:	b016      	add	sp, #88	@ 0x58
 8004f3e:	bd70      	pop	{r4, r5, r6, pc}
 8004f40:	466a      	mov	r2, sp
 8004f42:	f000 f853 	bl	8004fec <_fstat_r>
 8004f46:	2800      	cmp	r0, #0
 8004f48:	dbed      	blt.n	8004f26 <__swhatbuf_r+0x12>
 8004f4a:	23f0      	movs	r3, #240	@ 0xf0
 8004f4c:	9901      	ldr	r1, [sp, #4]
 8004f4e:	021b      	lsls	r3, r3, #8
 8004f50:	4019      	ands	r1, r3
 8004f52:	4b04      	ldr	r3, [pc, #16]	@ (8004f64 <__swhatbuf_r+0x50>)
 8004f54:	18c9      	adds	r1, r1, r3
 8004f56:	424b      	negs	r3, r1
 8004f58:	4159      	adcs	r1, r3
 8004f5a:	e7ea      	b.n	8004f32 <__swhatbuf_r+0x1e>
 8004f5c:	2100      	movs	r1, #0
 8004f5e:	2340      	movs	r3, #64	@ 0x40
 8004f60:	e7e9      	b.n	8004f36 <__swhatbuf_r+0x22>
 8004f62:	46c0      	nop			@ (mov r8, r8)
 8004f64:	ffffe000 	.word	0xffffe000

08004f68 <__smakebuf_r>:
 8004f68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f6a:	2602      	movs	r6, #2
 8004f6c:	898b      	ldrh	r3, [r1, #12]
 8004f6e:	0005      	movs	r5, r0
 8004f70:	000c      	movs	r4, r1
 8004f72:	b085      	sub	sp, #20
 8004f74:	4233      	tst	r3, r6
 8004f76:	d007      	beq.n	8004f88 <__smakebuf_r+0x20>
 8004f78:	0023      	movs	r3, r4
 8004f7a:	3347      	adds	r3, #71	@ 0x47
 8004f7c:	6023      	str	r3, [r4, #0]
 8004f7e:	6123      	str	r3, [r4, #16]
 8004f80:	2301      	movs	r3, #1
 8004f82:	6163      	str	r3, [r4, #20]
 8004f84:	b005      	add	sp, #20
 8004f86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f88:	ab03      	add	r3, sp, #12
 8004f8a:	aa02      	add	r2, sp, #8
 8004f8c:	f7ff ffc2 	bl	8004f14 <__swhatbuf_r>
 8004f90:	9f02      	ldr	r7, [sp, #8]
 8004f92:	9001      	str	r0, [sp, #4]
 8004f94:	0039      	movs	r1, r7
 8004f96:	0028      	movs	r0, r5
 8004f98:	f7ff fe7a 	bl	8004c90 <_malloc_r>
 8004f9c:	2800      	cmp	r0, #0
 8004f9e:	d108      	bne.n	8004fb2 <__smakebuf_r+0x4a>
 8004fa0:	220c      	movs	r2, #12
 8004fa2:	5ea3      	ldrsh	r3, [r4, r2]
 8004fa4:	059a      	lsls	r2, r3, #22
 8004fa6:	d4ed      	bmi.n	8004f84 <__smakebuf_r+0x1c>
 8004fa8:	2203      	movs	r2, #3
 8004faa:	4393      	bics	r3, r2
 8004fac:	431e      	orrs	r6, r3
 8004fae:	81a6      	strh	r6, [r4, #12]
 8004fb0:	e7e2      	b.n	8004f78 <__smakebuf_r+0x10>
 8004fb2:	2380      	movs	r3, #128	@ 0x80
 8004fb4:	89a2      	ldrh	r2, [r4, #12]
 8004fb6:	6020      	str	r0, [r4, #0]
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	81a3      	strh	r3, [r4, #12]
 8004fbc:	9b03      	ldr	r3, [sp, #12]
 8004fbe:	6120      	str	r0, [r4, #16]
 8004fc0:	6167      	str	r7, [r4, #20]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d00c      	beq.n	8004fe0 <__smakebuf_r+0x78>
 8004fc6:	0028      	movs	r0, r5
 8004fc8:	230e      	movs	r3, #14
 8004fca:	5ee1      	ldrsh	r1, [r4, r3]
 8004fcc:	f000 f820 	bl	8005010 <_isatty_r>
 8004fd0:	2800      	cmp	r0, #0
 8004fd2:	d005      	beq.n	8004fe0 <__smakebuf_r+0x78>
 8004fd4:	2303      	movs	r3, #3
 8004fd6:	89a2      	ldrh	r2, [r4, #12]
 8004fd8:	439a      	bics	r2, r3
 8004fda:	3b02      	subs	r3, #2
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	81a3      	strh	r3, [r4, #12]
 8004fe0:	89a3      	ldrh	r3, [r4, #12]
 8004fe2:	9a01      	ldr	r2, [sp, #4]
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	81a3      	strh	r3, [r4, #12]
 8004fe8:	e7cc      	b.n	8004f84 <__smakebuf_r+0x1c>
	...

08004fec <_fstat_r>:
 8004fec:	2300      	movs	r3, #0
 8004fee:	b570      	push	{r4, r5, r6, lr}
 8004ff0:	4d06      	ldr	r5, [pc, #24]	@ (800500c <_fstat_r+0x20>)
 8004ff2:	0004      	movs	r4, r0
 8004ff4:	0008      	movs	r0, r1
 8004ff6:	0011      	movs	r1, r2
 8004ff8:	602b      	str	r3, [r5, #0]
 8004ffa:	f7fb fdac 	bl	8000b56 <_fstat>
 8004ffe:	1c43      	adds	r3, r0, #1
 8005000:	d103      	bne.n	800500a <_fstat_r+0x1e>
 8005002:	682b      	ldr	r3, [r5, #0]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d000      	beq.n	800500a <_fstat_r+0x1e>
 8005008:	6023      	str	r3, [r4, #0]
 800500a:	bd70      	pop	{r4, r5, r6, pc}
 800500c:	200015c0 	.word	0x200015c0

08005010 <_isatty_r>:
 8005010:	2300      	movs	r3, #0
 8005012:	b570      	push	{r4, r5, r6, lr}
 8005014:	4d06      	ldr	r5, [pc, #24]	@ (8005030 <_isatty_r+0x20>)
 8005016:	0004      	movs	r4, r0
 8005018:	0008      	movs	r0, r1
 800501a:	602b      	str	r3, [r5, #0]
 800501c:	f7fb fda9 	bl	8000b72 <_isatty>
 8005020:	1c43      	adds	r3, r0, #1
 8005022:	d103      	bne.n	800502c <_isatty_r+0x1c>
 8005024:	682b      	ldr	r3, [r5, #0]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d000      	beq.n	800502c <_isatty_r+0x1c>
 800502a:	6023      	str	r3, [r4, #0]
 800502c:	bd70      	pop	{r4, r5, r6, pc}
 800502e:	46c0      	nop			@ (mov r8, r8)
 8005030:	200015c0 	.word	0x200015c0

08005034 <_sbrk_r>:
 8005034:	2300      	movs	r3, #0
 8005036:	b570      	push	{r4, r5, r6, lr}
 8005038:	4d06      	ldr	r5, [pc, #24]	@ (8005054 <_sbrk_r+0x20>)
 800503a:	0004      	movs	r4, r0
 800503c:	0008      	movs	r0, r1
 800503e:	602b      	str	r3, [r5, #0]
 8005040:	f7fb fdac 	bl	8000b9c <_sbrk>
 8005044:	1c43      	adds	r3, r0, #1
 8005046:	d103      	bne.n	8005050 <_sbrk_r+0x1c>
 8005048:	682b      	ldr	r3, [r5, #0]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d000      	beq.n	8005050 <_sbrk_r+0x1c>
 800504e:	6023      	str	r3, [r4, #0]
 8005050:	bd70      	pop	{r4, r5, r6, pc}
 8005052:	46c0      	nop			@ (mov r8, r8)
 8005054:	200015c0 	.word	0x200015c0

08005058 <_init>:
 8005058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800505a:	46c0      	nop			@ (mov r8, r8)
 800505c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800505e:	bc08      	pop	{r3}
 8005060:	469e      	mov	lr, r3
 8005062:	4770      	bx	lr

08005064 <_fini>:
 8005064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005066:	46c0      	nop			@ (mov r8, r8)
 8005068:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800506a:	bc08      	pop	{r3}
 800506c:	469e      	mov	lr, r3
 800506e:	4770      	bx	lr
